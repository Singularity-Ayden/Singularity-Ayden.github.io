{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/robots.txt","hash":"0587d0a1491159f445ffcf309f60b0c75bdae4f6","modified":1488425536000},{"_id":"themes/icarus/.DS_Store","hash":"70a26f6ecffd0f2948b179dac3ef6260a3d31a71","modified":1520321993155},{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1520321080366},{"_id":"themes/icarus/LICENSE","hash":"df00918fa95de563927fd92b26f14c7affdc3052","modified":1520321080366},{"_id":"themes/icarus/README.md","hash":"acd2d5d12820b065345d68f88bfc3a739f8d8ae2","modified":1520321080367},{"_id":"themes/icarus/_config.yml","hash":"8fda18793f9137e17a6a407662ef21848cdc1a8e","modified":1520577440213},{"_id":"themes/icarus/package.json","hash":"1bc52ef10a33df23e56bd73c927f605019c87d41","modified":1520321080386},{"_id":"source/_posts/Atom-编辑器快捷键.md","hash":"b98194a302898b9cf237d05325d24fd73d0c36d6","modified":1520577447501},{"_id":"source/_posts/Css3实现背景毛玻璃效果.md","hash":"daa98423a4e3ef01d959d2c98a86b308beca2c29","modified":1520490006839},{"_id":"source/_posts/Decorators-修饰器.md","hash":"b917aaa042876506071bae4b9ff138b834616860","modified":1520477281534},{"_id":"source/_posts/Es6-模块化.md","hash":"c6e89ad54bb890a3091667e417c1c06ef8a4e1c8","modified":1520477263372},{"_id":"source/_posts/Generator-生成器.md","hash":"e3fe8e92320a3beec99afe8e5f2583cf9520458a","modified":1520477256431},{"_id":"source/_posts/Iterator-和-for-of-循环.md","hash":"726260726b0bc25b5b180f2b4944884faba75bd3","modified":1520477241889},{"_id":"source/_posts/JS日期格式化转换方法.md","hash":"835ae67a93f5153741a07945d87d95635df7f437","modified":1520477524649},{"_id":"source/_posts/Object.assign.md","hash":"48220000ffb0cc24a9fcb137a636a44385ee661e","modified":1520477227491},{"_id":"source/_posts/Promise-异步编程的解决方案.md","hash":"1109a6678601b602ca77392a13e47433b9c2cffe","modified":1520477218236},{"_id":"source/_posts/Symbol数据类型.md","hash":"fa7761da1dceb4699eb45fc47bb170c4179de63b","modified":1520477311355},{"_id":"source/_posts/javascript-事件.md","hash":"e7a34f847bf95e13c6ee23bd1d16514f33f57c5c","modified":1520477405123},{"_id":"source/_posts/angular-gongjufangfa.md","hash":"893c3049cf40b34a993a656c9ba75ebe0b8e9e53","modified":1520476689327},{"_id":"source/_posts/vue-导航.md","hash":"afc70c304107682659d06f203b2746edafe25cd1","modified":1520477449984},{"_id":"source/_posts/web-phone-Debug.md","hash":"e39a12d74258747596cf164e9855da6278d81509","modified":1520477648585},{"_id":"source/_posts/webIcon.md","hash":"1a09018be20ca46a10d3bf9d8116da9604015dd2","modified":1520477611034},{"_id":"source/_posts/‘js中的跨域处理’.md","hash":"0fcfc46e079f4c45da2d7061b30425b75af15921","modified":1520476509801},{"_id":"source/_posts/学习总结.md","hash":"8c7be03538857a29b20e345004f345d3b26e53fc","modified":1520476653582},{"_id":"source/_posts/判断两个数组是否相等-判断两个对象是否相等.md","hash":"5d2321693930a25d9a7c9074d251bd26ef5c1ee1","modified":1520476546091},{"_id":"source/_posts/闭包实现倒计时程序.md","hash":"bbf5a0543ed7190f82d7b722f41a40bfb27c6967","modified":1520476529754},{"_id":"source/about/index.md","hash":"3c0eecb3b51eb07f834e4ef7588c65246cf3f2e3","modified":1520331323473},{"_id":"source/categories/index.md","hash":"cf5bc2d07b3fff693fd439ae4f41514d607ee6d8","modified":1520331193552},{"_id":"source/archive/index.md","hash":"05e9781bb11f28238cf9c9598f4b7674db6ea1e4","modified":1520475849172},{"_id":"source/links/index.md","hash":"efb445db9a2edc3a4142b89cfe2a067d236811fb","modified":1520334957731},{"_id":"source/tags/index.md","hash":"cccf1086f65dc00aa437dcd870dc6a29c03d1f73","modified":1520331228958},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1520321080356},{"_id":"themes/icarus/.git/config","hash":"965ef2ab67fe8b8aa4fb072307ee50d7cf6b31fe","modified":1520321080359},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1520320780228},{"_id":"themes/icarus/.git/index","hash":"695ed520ca66f78b29da303bd0b0acb25e14e20f","modified":1520336988237},{"_id":"themes/icarus/.git/packed-refs","hash":"a3c13b37ddb6b9d47351f993eefc214f4f694e1c","modified":1520321080354},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"9393fd3dbc943f1544facb66af7fd8b7a5b9ddbb","modified":1520321080366},{"_id":"themes/icarus/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1520321080368},{"_id":"themes/icarus/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1520321080368},{"_id":"themes/icarus/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1520321080368},{"_id":"themes/icarus/languages/id.yml","hash":"e4961da507f66c8f7c37f85653a9437cb2056bf6","modified":1520321080369},{"_id":"themes/icarus/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1520321080369},{"_id":"themes/icarus/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1520321080369},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1520321080369},{"_id":"themes/icarus/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1520321080369},{"_id":"themes/icarus/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1520321080370},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1520321080370},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1520321080370},{"_id":"themes/icarus/layout/archive.ejs","hash":"c1ecf667f40f34d61ab33eed46bab143eb1af36d","modified":1520321080370},{"_id":"themes/icarus/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1520321080370},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1520321080371},{"_id":"themes/icarus/layout/index.ejs","hash":"43e971ebc35657b18e08a049559790348a16666f","modified":1520321080379},{"_id":"themes/icarus/layout/layout.ejs","hash":"6f01b3d46d184a820297f9542497808b152bb09e","modified":1520321080379},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1520321080379},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1520321080380},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1520321080384},{"_id":"themes/icarus/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1520321080384},{"_id":"themes/icarus/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1520321080386},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1520321080386},{"_id":"themes/icarus/source/.DS_Store","hash":"d6fe2163cdc821efc7e9e750f2e35fd1a7067203","modified":1520321998161},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1520320780230},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1520320780229},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1520320780231},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1520320780232},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1520320780230},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1520320780232},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1520320780229},{"_id":"themes/icarus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1520320780231},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1520320780231},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1520320780233},{"_id":"themes/icarus/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1520320780228},{"_id":"themes/icarus/.git/logs/HEAD","hash":"afab9daec9f60fb36e5d6678309ae22bbe4ce61c","modified":1520321080357},{"_id":"themes/icarus/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1520321080367},{"_id":"themes/icarus/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1520321080367},{"_id":"themes/icarus/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1520321080368},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"b4bd2e641af59e06becaa8f2dc97867f023b8dcf","modified":1520321080371},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"57c194d0fa268ce2f3e9c755b3154b8a0709f613","modified":1520321080371},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1520321080372},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1520321080372},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1520321080372},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"c7998209b9a766eeba6976dd4bdffb1f87469358","modified":1520321080372},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"0bce9ca0767b49d2a9fc026a6004a8526a20624b","modified":1520321080373},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1520321080373},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"792e4f0e93b2bdc5abd85d447d804a5c608a9c5c","modified":1520321080373},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"d45f652268671de96c86d8ca50b9deaf011274f0","modified":1520321080373},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"0ea90a606f0d386a5ae0da83c0501cbb25319fde","modified":1520321080374},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"05f372ed3609be79acee9402331590c7dc5d70b2","modified":1520491606708},{"_id":"themes/icarus/layout/common/article.ejs","hash":"9c260a551596f71e93177f2289b5cb1c4bc7d96c","modified":1520321080374},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"cbfe560fcab445d42ceeb5d1beba5957d5be5eaa","modified":1520321080375},{"_id":"themes/icarus/layout/common/head.ejs","hash":"44f30945882afd27c89da2173da501fb1b531488","modified":1520321080375},{"_id":"themes/icarus/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1520321080375},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1520321080378},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1520321080378},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"1ee2384f98c8ccaa7a5b00f14ad2a9a67022c143","modified":1520321080378},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1520321080378},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1520321080379},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1520321080380},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1520321080380},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"e22f99652a220d926103801a3cad55ea9c450e05","modified":1520321080380},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1520321080381},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1520321080381},{"_id":"themes/icarus/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1520321080381},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1520321080382},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1520321080382},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1520321080382},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1520321080383},{"_id":"themes/icarus/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1520321080383},{"_id":"themes/icarus/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1520321080383},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1520321080383},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d9ebbb7f6ce2f25df5ae25e4a1fef3c08f7054b9","modified":1520321080384},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"583bda80cf15b3ef11fefbd1b502897dfff40100","modified":1520321080384},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"aad118699718b62c0d3f3cfd6f17a181139a76af","modified":1520321080385},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2ca923465275fb38a7ac7d67211d6e94a977e957","modified":1520321080385},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"3b8ae5953990436893da9d68f910ebe592005659","modified":1520321080385},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"ca8c7bf555fb6ce4904f2c59160548405c2c8a82","modified":1520321080386},{"_id":"themes/icarus/source/css/.DS_Store","hash":"2e4ae6d8fdf50d866169a81e17627c69b16b1317","modified":1520336909348},{"_id":"themes/icarus/source/css/_extend.styl","hash":"539e02107f35e8b3bdb9bf160dc212a433a7b60e","modified":1520321080387},{"_id":"themes/icarus/source/css/_variables.styl","hash":"d62af931be6612ec8c3a917836379a8cd92fbce1","modified":1520321080410},{"_id":"themes/icarus/source/css/style.styl","hash":"1716b199dba80b26086f325d69c36fa682465106","modified":1520321080412},{"_id":"themes/icarus/source/js/insight.js","hash":"c1bafa7f87e9f25fca1e033fc6d1e0c82712ac99","modified":1520321080412},{"_id":"themes/icarus/source/js/main.js","hash":"23b373067df0dbac27622bc7537bb4fda243a9c8","modified":1520321080413},{"_id":"themes/icarus/.git/objects/pack/pack-f4d7451bc7491a1e7337a65b4c7853baf5bd721a.idx","hash":"a056b80d48acc4af0f68d234f87b2163fa53fec8","modified":1520321080338},{"_id":"themes/icarus/.git/refs/heads/master","hash":"93cadec7110d74453ec94cf59c8dc39d1e7e6459","modified":1520321080357},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1520321080376},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1520321080376},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1520321080376},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1520321080377},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1520321080377},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1520321080377},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1520321080377},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1520321080387},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1520321080388},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1520321080388},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1520321080388},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1520321080389},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1520321080389},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1520321080389},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1520321080389},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1520321080390},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1520321080390},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1520321080390},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1520321080391},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1520321080391},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1520321080391},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1520321080391},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1520321080392},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1520321080392},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1520321080392},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1520321080393},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1520321080393},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1520321080393},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1520321080393},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1520321080394},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1520321080394},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1520321080394},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1520321080394},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1520321080395},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1520321080395},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1520321080395},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1520321080396},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1520321080396},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1520321080396},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1520321080397},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1520321080397},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1520321080397},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1520321080397},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1520321080398},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1520321080398},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1520321080398},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1520321080398},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1520321080399},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1520321080399},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1520321080399},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1520321080399},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1520321080400},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1520321080400},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1520321080400},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1520321080401},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1520321080401},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1520321080401},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1520321080401},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1520321080402},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1520321080402},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1520321080402},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1520321080402},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1520321080403},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1520321080403},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1520321080403},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1520321080404},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1520321080404},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1520321080404},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1520321080404},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1520321080405},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1520321080405},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1520321080405},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1520321080406},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1520321080406},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1520321080406},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1520321080406},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1520321080407},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"d35088c83ddd7a197d6d94e16a2ce3a7e29fa1dc","modified":1520321080407},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"77c4ae7fe3dc16c569bb45d365cc3c147c2e9498","modified":1520321080407},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1520321080407},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1520321080408},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"1e351f741144135871a3373fe7e969dc961b65e7","modified":1520321080408},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"19833cd127f26ad90b06c115f8a96a30e0c0e53b","modified":1520321080408},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"fb0170075dc2a41e01dd11bbfdbccbed544c479a","modified":1520321080409},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"f528ca7064d9fcecd737b9b71c9c54601365d7d3","modified":1520321080409},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"c813b98f4fc45b64d2e07e5d944745a654c8c943","modified":1520321080409},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1520321080410},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1520321080410},{"_id":"themes/icarus/source/css/images/.DS_Store","hash":"82f6ed5d92cdd99a8b269546c0d15798d82d783c","modified":1520328217149},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1520321080411},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1520321080428},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1520321080428},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1520321080449},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1520321080450},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"afab9daec9f60fb36e5d6678309ae22bbe4ce61c","modified":1520321080357},{"_id":"themes/icarus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1520321080356},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"4555fea92187d289fe290699d2b742fdc80e05d3","modified":1494165141000},{"_id":"themes/icarus/source/css/images/logo.png","hash":"4555fea92187d289fe290699d2b742fdc80e05d3","modified":1494165141000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1520321080414},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1520321080414},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1520321080429},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1520321080429},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1520321080429},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1520321080430},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1520321080430},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1520321080431},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1520321080431},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1520321080432},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1520321080432},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1520321080432},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1520321080433},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1520321080433},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1520321080434},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1520321080434},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1520321080434},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1520321080435},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1520321080435},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1520321080435},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1520321080436},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1520321080436},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1520321080436},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1520321080437},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1520321080437},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1520321080437},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1520321080438},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1520321080438},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1520321080438},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1520321080439},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1520321080439},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1520321080439},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1520321080440},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1520321080440},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1520321080440},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1520321080441},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1520321080442},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1520321080442},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1520321080443},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1520321080443},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1520321080443},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1520321080444},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1520321080444},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1520321080444},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1520321080444},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1520321080445},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1520321080445},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1520321080445},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1520321080446},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1520321080446},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1520321080447},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1520321080447},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1520321080447},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1520321080447},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1520321080448},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1520321080448},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1520321080448},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1520321080449},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1520321080450},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1520321080450},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1520321080416},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1520321080417},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1520321080425},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1520321080426},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1520321080427},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/HEAD","hash":"afab9daec9f60fb36e5d6678309ae22bbe4ce61c","modified":1520321080356},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1520321080424},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1520321080422},{"_id":"themes/icarus/.git/objects/pack/pack-f4d7451bc7491a1e7337a65b4c7853baf5bd721a.pack","hash":"e6fe8da800f09678954db9fefc791d0410c145a1","modified":1520321080337},{"_id":"public/baidusitemap.xml","hash":"2d874c20c2c713f905603e6b7c101322f6bb1438","modified":1520493535844},{"_id":"public/sitemap.xml","hash":"fe084296c9b5fc3246b4a431f025c3a98d6973dd","modified":1520493536393},{"_id":"public/tags/index.html","hash":"f916cb7771fc8be23bcdd65c7092ed40e9ae2d1f","modified":1520501066725},{"_id":"public/tags/css/index.html","hash":"d419dbbcc7d46bb7ed0217bc7f5c8fd36c3f7abd","modified":1520501066733},{"_id":"public/about/index.html","hash":"995588bf4a6e3e018d089eb37cfa74a94df45b17","modified":1520501129851},{"_id":"public/categories/index.html","hash":"64a7342bcaa74d0c5e485b81ca2d0cc47c76996c","modified":1520501066725},{"_id":"public/archive/index.html","hash":"57f252b452087849769f2256e995e7c60bd7f453","modified":1520501129851},{"_id":"public/links/index.html","hash":"e2c1b53e1925ff4baa10813d0b333901336ff492","modified":1520501129851},{"_id":"public/Css3实现背景毛玻璃效果.html","hash":"8746089237bccdd648e3752329ff0ba718e1ebdd","modified":1520501129851},{"_id":"public/javascript-事件.html","hash":"ddb42e9db03ad6030654614a49aab3701125a961","modified":1520501129851},{"_id":"public/vue-导航.html","hash":"1eac25be71b457db362ff94b44c0359395b7c0e1","modified":1520501129851},{"_id":"public/web-phone-Debug.html","hash":"f97cac4aa9f6e93cb9352cbae0464e6583bf81c3","modified":1520501129851},{"_id":"public/JS日期格式化转换方法.html","hash":"6b781f87f06a3dd7c06eb45b3b8871732aa75e2c","modified":1520501129851},{"_id":"public/angular-gongjufangfa.html","hash":"510db383bf4c688c6caa5a60a6ee3f7bd876fcf8","modified":1520501129852},{"_id":"public/Atom-编辑器快捷键.html","hash":"8f79136b437e218c0cbc2b57762516dfa2cc7cde","modified":1520501129852},{"_id":"public/学习总结.html","hash":"8e11ba1b3f8de2d2622c0644ff0871e8e13d035f","modified":1520501129852},{"_id":"public/Symbol数据类型.html","hash":"0a58434c3b223686c4fd420a1986225f9a2907f7","modified":1520501129852},{"_id":"public/闭包实现倒计时程序.html","hash":"fd23b0ab717a5062704e570048ee43d7b24f1afb","modified":1520501129852},{"_id":"public/Decorators-修饰器.html","hash":"64820b3ede2ca13947b0c14934a0acd464e4a8d9","modified":1520501129852},{"_id":"public/Es6-模块化.html","hash":"a495f12381efdd666d117c0a6ffcf9c7507420ed","modified":1520501129852},{"_id":"public/Iterator-和-for-of-循环.html","hash":"95872e6fa2a6fb40c90f5e5a841df2bb0020cc5f","modified":1520501129852},{"_id":"public/Generator-生成器.html","hash":"2715084cfbb3f8384d8657f73eeb283cee6da4bd","modified":1520501129852},{"_id":"public/Object.assign.html","hash":"c739c5d9516ec138d8b546a05ece227e6fd70c96","modified":1520501129852},{"_id":"public/Promise-异步编程的解决方案.html","hash":"ec1fa1dd380d9ffbd10c4ac94e0e41acc3f9c61d","modified":1520501129852},{"_id":"public/webIcon.html","hash":"bb6052b475044a9166b5b81bba0b47082c08c946","modified":1520501129852},{"_id":"public/判断两个数组是否相等-判断两个对象是否相等.html","hash":"ecb12cd5801d5e586e99e6f17f72de4b6e476694","modified":1520501129852},{"_id":"public/‘js中的跨域处理’.html","hash":"e6ecd7a18b46338ef9325b8e9f129e9d460426c7","modified":1520501129852},{"_id":"public/archives/index.html","hash":"134d0221d8d6d57ff802eb38f9337d024d7f3bea","modified":1520501066731},{"_id":"public/categories/杂货/index.html","hash":"ef4b1cdd3203aac3e64dc132512d55f8f9a7ff53","modified":1520501066731},{"_id":"public/categories/CSS3/index.html","hash":"6b1663ec88d0e38df1e621e4deede16fd129975a","modified":1520501066731},{"_id":"public/categories/EcmaJs6/index.html","hash":"eb891d641bcad36f3327e696d5f816020aae5e51","modified":1520501066731},{"_id":"public/categories/Javascript/index.html","hash":"161bc9d103576cae647a42c93968090f68b080ea","modified":1520501066732},{"_id":"public/categories/Angular/index.html","hash":"e26681af594937260751e9141bd4bd5786babea0","modified":1520501066732},{"_id":"public/categories/VUE/index.html","hash":"93b8425b45744b45b98e08041c4797da148e2280","modified":1520501066732},{"_id":"public/categories/web调试/index.html","hash":"5f55443debe8cd39c9cad456e39825d97878b723","modified":1520501066732},{"_id":"public/categories/CSS/index.html","hash":"ce3084a704d9c57b0455ed6231283ec0dcbd8ea2","modified":1520501066732},{"_id":"public/index.html","hash":"cab532f0442e65ab94debb6a6864005a25a92dba","modified":1520501129852},{"_id":"public/page/2/index.html","hash":"1922c04d7de4db7bd52aff133ff9b9c63cbcc2dc","modified":1520501129853},{"_id":"public/tags/开发工具/index.html","hash":"34a7896c7e0a1844531b7b19f7e5e8d58a16589f","modified":1520501066732},{"_id":"public/tags/小程序/index.html","hash":"a82fcd80a59ea0561a30dc1b7e53dcdf57b9da5e","modified":1520501066732},{"_id":"public/tags/css3/index.html","hash":"0cfcec2895afa5d8775f9b82fdd6060e274f5128","modified":1520501066732},{"_id":"public/tags/es6/index.html","hash":"512a8d27fd5f382cdede691f2f0d6c79eb537365","modified":1520501066732},{"_id":"public/tags/js/index.html","hash":"a2b8883cb02043b397c631565be40fee06152a78","modified":1520501066732},{"_id":"public/tags/angular/index.html","hash":"dbee483f68b9b4bdc56d9b0a9c62e7c8793763bc","modified":1520501066732},{"_id":"public/tags/vuejs/index.html","hash":"27fd43f71a7e93cc80a528cf1fbd5a66e9904189","modified":1520501066732},{"_id":"public/tags/web调试/index.html","hash":"cce91ad17334c9a013f51328c2c096e28ab7b2d0","modified":1520501066732},{"_id":"public/robots.txt","hash":"0587d0a1491159f445ffcf309f60b0c75bdae4f6","modified":1520493536462},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1520493536462},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1520493536462},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1520493536462},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1520493536462},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1520493536462},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1520493536462},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1520493536462},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1520493536463},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1520493536463},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1520493536463},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1520493536463},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1520493536463},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1520493536463},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1520493536463},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1520493536463},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1520493536463},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1520493536463},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1520493536463},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1520493536463},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1520493536463},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1520493536463},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1520493536464},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1520493536464},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1520493536464},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1520493536464},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1520493536464},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1520493536464},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1520493536464},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1520493536464},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1520493536464},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1520493536464},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1520493536464},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1520493536464},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1520493536464},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1520493536464},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1520493537023},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1520493537026},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1520493537027},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1520493537027},{"_id":"public/js/main.js","hash":"23b373067df0dbac27622bc7537bb4fda243a9c8","modified":1520493537041},{"_id":"public/js/insight.js","hash":"c1bafa7f87e9f25fca1e033fc6d1e0c82712ac99","modified":1520493537041},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1520493537041},{"_id":"public/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1520493537041},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1520493537041},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1520493537041},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1520493537041},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1520493537041},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1520493537042},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1520493537042},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1520493537042},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1520493537042},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1520493537042},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1520493537042},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1520493537042},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1520493537042},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1520493537042},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1520493537042},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1520493537042},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1520493537042},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1520493537042},{"_id":"public/css/style.css","hash":"f48d9ebb230859086fa29957616afd3d1b962cb1","modified":1520493537042},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1520493537042},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1520493537042},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1520493537043},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1520493537043},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1520493537043},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1520493537043},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1520493537043},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1520493537043},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1520493537043},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1520493537043},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1520493537043},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1520493537043},{"_id":"public/css/images/avatar.png","hash":"4555fea92187d289fe290699d2b742fdc80e05d3","modified":1520493537043},{"_id":"public/css/images/logo.png","hash":"4555fea92187d289fe290699d2b742fdc80e05d3","modified":1520493537043},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1520493537044},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1520493537054}],"Category":[{"name":"杂货","_id":"cjei6lc6v0004rexmd8c53snj"},{"name":"CSS3","_id":"cjei6lc70000brexmgosri0eq"},{"name":"EcmaJs6","_id":"cjei6lc74000irexm2cmlyyaj"},{"name":"Javascript","_id":"cjei6lc7f0019rexmp4fl64gr"},{"name":"Angular","_id":"cjei6lc7k001nrexmnx7zoqbt"},{"name":"VUE","_id":"cjei6lc7l001urexmii4otye5"},{"name":"web调试","_id":"cjei6lc7m0020rexmidz4awmo"},{"name":"CSS","_id":"cjei6lc7n0025rexm1owwno5r"}],"Data":[],"Page":[{"title":"关于我","layout":"page","_content":"\n\n\n<center>![mahua](../images/back.jpg)</center >\n<center><h2>2017年3月1日将论坛搭建完成上线，文章陆续上新中，论坛正在测试，请各位客官在评论区留下宝贵意见！</h2></center>\n<!-- <center><h2>一个好奇宝宝的独白</h2></center> -->\n<!--  <p style=\"text-indent:35px\">记得在2013年刚刚接触前端的那个时候，并不知道有“前端”的存在，那时候刚刚上大学，作为6人宿舍唯一一个不会打LOL的奇葩，开始找点事儿干，因为是颜值控，常常看到一些特别美得事物就忍不住驻足，恰巧那个时候我们开设Dreamweaver网页设计这门课，让我机缘巧合的接触到了这门高颜值的技术。之后一有空闲时间就去网上找一些网站技术拿来玩一玩，在自学了两个月的时候，我终于写了一个有我自己名字、照片、和简介的简易版index.html，没有后台，没有发布 ,什么都没有，就几个div加了点颜色，就这么简单的一个东西，就把我乐坏了，那是我第一次享受到属于geek的那种快感。</p>\n <b>未完待续。。。</b> -->\n","source":"about/index.md","raw":"---\ntitle: \"关于我\"\nlayout: \"page\"\n---\n\n\n\n<center>![mahua](../images/back.jpg)</center >\n<center><h2>2017年3月1日将论坛搭建完成上线，文章陆续上新中，论坛正在测试，请各位客官在评论区留下宝贵意见！</h2></center>\n<!-- <center><h2>一个好奇宝宝的独白</h2></center> -->\n<!--  <p style=\"text-indent:35px\">记得在2013年刚刚接触前端的那个时候，并不知道有“前端”的存在，那时候刚刚上大学，作为6人宿舍唯一一个不会打LOL的奇葩，开始找点事儿干，因为是颜值控，常常看到一些特别美得事物就忍不住驻足，恰巧那个时候我们开设Dreamweaver网页设计这门课，让我机缘巧合的接触到了这门高颜值的技术。之后一有空闲时间就去网上找一些网站技术拿来玩一玩，在自学了两个月的时候，我终于写了一个有我自己名字、照片、和简介的简易版index.html，没有后台，没有发布 ,什么都没有，就几个div加了点颜色，就这么简单的一个东西，就把我乐坏了，那是我第一次享受到属于geek的那种快感。</p>\n <b>未完待续。。。</b> -->\n","date":"2018-03-06T10:15:23.473Z","updated":"2018-03-06T10:15:23.473Z","path":"about/index.html","comments":1,"_id":"cjei6lc6s0001rexm3uc88l1r","content":"<p><center><img src=\"../images/back.jpg\" alt=\"mahua\"></center></p>\n<p><center><h2>2017年3月1日将论坛搭建完成上线，文章陆续上新中，论坛正在测试，请各位客官在评论区留下宝贵意见！</h2></center><br><!-- <center><h2>一个好奇宝宝的独白</h2></center> --><br><!--  <p style=\"text-indent:35px\">记得在2013年刚刚接触前端的那个时候，并不知道有“前端”的存在，那时候刚刚上大学，作为6人宿舍唯一一个不会打LOL的奇葩，开始找点事儿干，因为是颜值控，常常看到一些特别美得事物就忍不住驻足，恰巧那个时候我们开设Dreamweaver网页设计这门课，让我机缘巧合的接触到了这门高颜值的技术。之后一有空闲时间就去网上找一些网站技术拿来玩一玩，在自学了两个月的时候，我终于写了一个有我自己名字、照片、和简介的简易版index.html，没有后台，没有发布 ,什么都没有，就几个div加了点颜色，就这么简单的一个东西，就把我乐坏了，那是我第一次享受到属于geek的那种快感。</p>\n <b>未完待续。。。</b> --></p>\n","site":{"data":{}},"excerpt":"","more":"<p><center><img src=\"../images/back.jpg\" alt=\"mahua\"></center></p>\n<p><center><h2>2017年3月1日将论坛搭建完成上线，文章陆续上新中，论坛正在测试，请各位客官在评论区留下宝贵意见！</h2></center><br><!-- <center><h2>一个好奇宝宝的独白</h2></center> --><br><!--  <p style=\"text-indent:35px\">记得在2013年刚刚接触前端的那个时候，并不知道有“前端”的存在，那时候刚刚上大学，作为6人宿舍唯一一个不会打LOL的奇葩，开始找点事儿干，因为是颜值控，常常看到一些特别美得事物就忍不住驻足，恰巧那个时候我们开设Dreamweaver网页设计这门课，让我机缘巧合的接触到了这门高颜值的技术。之后一有空闲时间就去网上找一些网站技术拿来玩一玩，在自学了两个月的时候，我终于写了一个有我自己名字、照片、和简介的简易版index.html，没有后台，没有发布 ,什么都没有，就几个div加了点颜色，就这么简单的一个东西，就把我乐坏了，那是我第一次享受到属于geek的那种快感。</p>\n <b>未完待续。。。</b> --></p>\n"},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2018-03-06T10:13:13.552Z","updated":"2018-03-06T10:13:13.552Z","path":"categories/index.html","comments":1,"_id":"cjei6lc6u0003rexmeuw3x3k3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"archive","date":"2018-03-08T02:24:09.000Z","_content":"","source":"archive/index.md","raw":"---\ntitle: archive\ndate: 2018-03-08 10:24:09\n---\n","updated":"2018-03-08T02:24:09.172Z","path":"archive/index.html","comments":1,"layout":"page","_id":"cjei6lc6y0007rexmnxoqs6u1","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"asdasd\n","source":"links/index.md","raw":"asdasd\n","date":"2018-03-06T11:15:57.731Z","updated":"2018-03-06T11:15:57.731Z","path":"links/index.html","title":"","comments":1,"layout":"page","_id":"cjei6lc6z0009rexmog5vq4mr","content":"<p>asdasd</p>\n","site":{"data":{}},"excerpt":"","more":"<p>asdasd</p>\n"},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2018-03-06T10:13:48.958Z","updated":"2018-03-06T10:13:48.958Z","path":"tags/index.html","comments":1,"_id":"cjei6lc71000drexmpbugru22","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Atom 编辑器快捷键","date":"2017-02-23T02:56:06.000Z","_content":"\n\n\n>快捷键\n\n`cmd+shift+c` ：调取color Picker\n`cmd+shift+P` :\t调取命令行\n\t  `cmd-shift-D`: 复制当前行到下一行\n\t  cmd-L 选取一行，继续按回选取下一行\n\t  cmd+,    打開包管理\n\n[Atom優秀的插件](https://github.com/shery15/awesome-atom-packages/blob/master/README-zh.md)\n\n[優秀插件](http://www.jianshu.com/p/dd97cbb3c22d)\n","source":"_posts/Atom-编辑器快捷键.md","raw":"---\ntitle: Atom 编辑器快捷键\ndate: 2017-02-23 10:56:06\ntags:\n- 开发工具\ncategories:\n- 杂货\n---\n\n\n\n>快捷键\n\n`cmd+shift+c` ：调取color Picker\n`cmd+shift+P` :\t调取命令行\n\t  `cmd-shift-D`: 复制当前行到下一行\n\t  cmd-L 选取一行，继续按回选取下一行\n\t  cmd+,    打開包管理\n\n[Atom優秀的插件](https://github.com/shery15/awesome-atom-packages/blob/master/README-zh.md)\n\n[優秀插件](http://www.jianshu.com/p/dd97cbb3c22d)\n","slug":"Atom-编辑器快捷键","published":1,"updated":"2018-03-09T06:37:27.501Z","_id":"cjei6lc6o0000rexmgbmziwf4","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>快捷键</p>\n</blockquote>\n<p><code>cmd+shift+c</code> ：调取color Picker<br><code>cmd+shift+P</code> :    调取命令行<br>      <code>cmd-shift-D</code>: 复制当前行到下一行<br>      cmd-L 选取一行，继续按回选取下一行<br>      cmd+,    打開包管理</p>\n<p><a href=\"https://github.com/shery15/awesome-atom-packages/blob/master/README-zh.md\" target=\"_blank\" rel=\"noopener\">Atom優秀的插件</a></p>\n<p><a href=\"http://www.jianshu.com/p/dd97cbb3c22d\" target=\"_blank\" rel=\"noopener\">優秀插件</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>快捷键</p>\n</blockquote>\n<p><code>cmd+shift+c</code> ：调取color Picker<br><code>cmd+shift+P</code> :    调取命令行<br>      <code>cmd-shift-D</code>: 复制当前行到下一行<br>      cmd-L 选取一行，继续按回选取下一行<br>      cmd+,    打開包管理</p>\n<p><a href=\"https://github.com/shery15/awesome-atom-packages/blob/master/README-zh.md\" target=\"_blank\" rel=\"noopener\">Atom優秀的插件</a></p>\n<p><a href=\"http://www.jianshu.com/p/dd97cbb3c22d\" target=\"_blank\" rel=\"noopener\">優秀插件</a></p>\n"},{"title":"Css3实现背景毛玻璃效果","date":"2018-03-06T06:57:46.000Z","banner":"https://app.yinxiang.com/shard/s72/res/3f70954e-30e0-4b67-b182-dd2acd6d5fc9","_content":"\n\n\n##### 先上代码\n```html\n\n<div class=\"father\">\n\t<img src=\"your bacImage address\"/>\n\t<div class=\"mask\"></div>\n</div>\n\n\n```\n<!-- more -->\n\n\n\n```css\n.father{\n\twidth:100%;\n\theight: 270px;\n\tdisplay:flex;\n\n\n}\n.father img{\n\twidth:100%;\n\theight:100%;\n    -webkit-filter: blur(2px) ;  //css3 滤镜属性  \n}\n\n\n//给图片加黑色背景蒙层\n.mask{\n  width:100%;\n  position: absolute;\n  background-color: red;\n  height: 270px;\n  z-index: 10;\n  background: #132445;\n  opacity: 0.6;\n}\n```\n\n##### 效果图\n\n![效果图](https://app.yinxiang.com/shard/s72/res/3f70954e-30e0-4b67-b182-dd2acd6d5fc9)\n\n\n\n#### 主要实现  ：\n\n使用到了 css ` filter`(滤镜) 属性\n\n#### 具体请看 [CSS filter属性  文档](https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter)\n","source":"_posts/Css3实现背景毛玻璃效果.md","raw":"---\ntitle: Css3实现背景毛玻璃效果\ndate: 2018-03-06 14:57:46\ntags:\n- 小程序\n- css3\ncategories:\n- CSS3\nbanner: https://app.yinxiang.com/shard/s72/res/3f70954e-30e0-4b67-b182-dd2acd6d5fc9\n---\n\n\n\n##### 先上代码\n```html\n\n<div class=\"father\">\n\t<img src=\"your bacImage address\"/>\n\t<div class=\"mask\"></div>\n</div>\n\n\n```\n<!-- more -->\n\n\n\n```css\n.father{\n\twidth:100%;\n\theight: 270px;\n\tdisplay:flex;\n\n\n}\n.father img{\n\twidth:100%;\n\theight:100%;\n    -webkit-filter: blur(2px) ;  //css3 滤镜属性  \n}\n\n\n//给图片加黑色背景蒙层\n.mask{\n  width:100%;\n  position: absolute;\n  background-color: red;\n  height: 270px;\n  z-index: 10;\n  background: #132445;\n  opacity: 0.6;\n}\n```\n\n##### 效果图\n\n![效果图](https://app.yinxiang.com/shard/s72/res/3f70954e-30e0-4b67-b182-dd2acd6d5fc9)\n\n\n\n#### 主要实现  ：\n\n使用到了 css ` filter`(滤镜) 属性\n\n#### 具体请看 [CSS filter属性  文档](https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter)\n","slug":"Css3实现背景毛玻璃效果","published":1,"updated":"2018-03-08T06:20:06.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc6s0002rexmtmque6fx","content":"<h5 id=\"先上代码\"><a href=\"#先上代码\" class=\"headerlink\" title=\"先上代码\"></a>先上代码</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"your bacImage address\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"mask\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">.father&#123;</div><div class=\"line\">\twidth:100%;</div><div class=\"line\">\theight: 270px;</div><div class=\"line\">\tdisplay:flex;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">.father img&#123;</div><div class=\"line\">\twidth:100%;</div><div class=\"line\">\theight:100%;</div><div class=\"line\">    -webkit-filter: blur(2px) ;  //css3 滤镜属性  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//给图片加黑色背景蒙层</div><div class=\"line\">.mask&#123;</div><div class=\"line\">  width:100%;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  background-color: red;</div><div class=\"line\">  height: 270px;</div><div class=\"line\">  z-index: 10;</div><div class=\"line\">  background: #132445;</div><div class=\"line\">  opacity: 0.6;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h5><p><img src=\"https://app.yinxiang.com/shard/s72/res/3f70954e-30e0-4b67-b182-dd2acd6d5fc9\" alt=\"效果图\"></p>\n<h4 id=\"主要实现-：\"><a href=\"#主要实现-：\" class=\"headerlink\" title=\"主要实现  ：\"></a>主要实现  ：</h4><p>使用到了 css <code>filter</code>(滤镜) 属性</p>\n<h4 id=\"具体请看-CSS-filter属性-文档\"><a href=\"#具体请看-CSS-filter属性-文档\" class=\"headerlink\" title=\"具体请看 CSS filter属性  文档\"></a>具体请看 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter\" target=\"_blank\" rel=\"noopener\">CSS filter属性  文档</a></h4>","site":{"data":{}},"excerpt":"<h5 id=\"先上代码\"><a href=\"#先上代码\" class=\"headerlink\" title=\"先上代码\"></a>先上代码</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"your bacImage address\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"mask\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>","more":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">.father&#123;</div><div class=\"line\">\twidth:100%;</div><div class=\"line\">\theight: 270px;</div><div class=\"line\">\tdisplay:flex;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">.father img&#123;</div><div class=\"line\">\twidth:100%;</div><div class=\"line\">\theight:100%;</div><div class=\"line\">    -webkit-filter: blur(2px) ;  //css3 滤镜属性  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//给图片加黑色背景蒙层</div><div class=\"line\">.mask&#123;</div><div class=\"line\">  width:100%;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  background-color: red;</div><div class=\"line\">  height: 270px;</div><div class=\"line\">  z-index: 10;</div><div class=\"line\">  background: #132445;</div><div class=\"line\">  opacity: 0.6;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h5><p><img src=\"https://app.yinxiang.com/shard/s72/res/3f70954e-30e0-4b67-b182-dd2acd6d5fc9\" alt=\"效果图\"></p>\n<h4 id=\"主要实现-：\"><a href=\"#主要实现-：\" class=\"headerlink\" title=\"主要实现  ：\"></a>主要实现  ：</h4><p>使用到了 css <code>filter</code>(滤镜) 属性</p>\n<h4 id=\"具体请看-CSS-filter属性-文档\"><a href=\"#具体请看-CSS-filter属性-文档\" class=\"headerlink\" title=\"具体请看 CSS filter属性  文档\"></a>具体请看 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter\" target=\"_blank\" rel=\"noopener\">CSS filter属性  文档</a></h4>"},{"title":"Decorators 修饰器","date":"2016-10-17T02:59:00.000Z","_content":">简介：修饰器是一个函数，用于修饰类的行为（修改 扩展类的功能，修饰器只在类的范围使用）。\n\n 需安装：npm install babel-plugin-transform-decorators-legacy --save-dev\n\n#### 1.限制某个属性 是只读的\n\n\n```javascript\n{\n \tlet readonly = function(target,name,descriptor){\n \t\t// target :修改的类本身\n \t\t// name ： 属性本身\n \t\t// descriptor ：属性的描述对象\n \t\tdescriptor.writable = false ;  //只读效果\n \t\treturn descriptor ;\n \t}\n\n \tclass Test {\n \t\t@readonly  // 修饰器\n \t\ttime(){\n \t\t\treturn '2018-01-01' ;\n \t\t}\n \t}\n\n \tlet test=new Test();\n\n\n  \ttest.time=function(){\n       console.log('reset time');\n  \t};\n\n \tconsole.log(test.time()) ;  //  报错\n\n }\n```\n\n<!-- more -->\n\n#### 2.在类的外面 使用修饰器  （必须在class的前面使用）\n\n```javascript\n{\n  let typename=function(target,name,descriptor){\n    target.myname='hello';\n  }\n\n  @typename\n  class Test{\n\n  }\n\n  console.log('类修饰符',Test.myname);\n  // 第三方库修饰器的js库：core-decorators; npm install core-decorators\n}\n```\n\n> 埋点系统\n\n```javascript\n// 案例1\n\n// 日志系统 ： 传统 将埋点写到业务逻辑中\n\n{\n  let log =(type)=>{\n    return function(target,name,descriptor){\n      let src_method = descriptor.value ;\n      descriptor.value =(...arg)=>{\n        src_method.apply(target,arg);\n        console.info(`log ${type}`);\n\n      }\n    }\n  }\n\n  class AD{\n    @log('show')\n    show(){\n      console.info('ad is show') ;\n    }\n    click(){\n      console.info('ad is click') ;\n    }\n  }\n\n  let ad = new AD() ;\n  ad.show();\n  ad.click();\n}\n\n// 好处：埋点抽离出来   \n```\n","source":"_posts/Decorators-修饰器.md","raw":"---\ntitle: Decorators 修饰器\ndate: 2016-10-17 10:59:00\ntags:\n- es6\ncategories:\n- EcmaJs6\n---\n>简介：修饰器是一个函数，用于修饰类的行为（修改 扩展类的功能，修饰器只在类的范围使用）。\n\n 需安装：npm install babel-plugin-transform-decorators-legacy --save-dev\n\n#### 1.限制某个属性 是只读的\n\n\n```javascript\n{\n \tlet readonly = function(target,name,descriptor){\n \t\t// target :修改的类本身\n \t\t// name ： 属性本身\n \t\t// descriptor ：属性的描述对象\n \t\tdescriptor.writable = false ;  //只读效果\n \t\treturn descriptor ;\n \t}\n\n \tclass Test {\n \t\t@readonly  // 修饰器\n \t\ttime(){\n \t\t\treturn '2018-01-01' ;\n \t\t}\n \t}\n\n \tlet test=new Test();\n\n\n  \ttest.time=function(){\n       console.log('reset time');\n  \t};\n\n \tconsole.log(test.time()) ;  //  报错\n\n }\n```\n\n<!-- more -->\n\n#### 2.在类的外面 使用修饰器  （必须在class的前面使用）\n\n```javascript\n{\n  let typename=function(target,name,descriptor){\n    target.myname='hello';\n  }\n\n  @typename\n  class Test{\n\n  }\n\n  console.log('类修饰符',Test.myname);\n  // 第三方库修饰器的js库：core-decorators; npm install core-decorators\n}\n```\n\n> 埋点系统\n\n```javascript\n// 案例1\n\n// 日志系统 ： 传统 将埋点写到业务逻辑中\n\n{\n  let log =(type)=>{\n    return function(target,name,descriptor){\n      let src_method = descriptor.value ;\n      descriptor.value =(...arg)=>{\n        src_method.apply(target,arg);\n        console.info(`log ${type}`);\n\n      }\n    }\n  }\n\n  class AD{\n    @log('show')\n    show(){\n      console.info('ad is show') ;\n    }\n    click(){\n      console.info('ad is click') ;\n    }\n  }\n\n  let ad = new AD() ;\n  ad.show();\n  ad.click();\n}\n\n// 好处：埋点抽离出来   \n```\n","slug":"Decorators-修饰器","published":1,"updated":"2018-03-08T02:48:01.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc6x0006rexmx5whry0j","content":"<blockquote>\n<p>简介：修饰器是一个函数，用于修饰类的行为（修改 扩展类的功能，修饰器只在类的范围使用）。</p>\n</blockquote>\n<p> 需安装：npm install babel-plugin-transform-decorators-legacy –save-dev</p>\n<h4 id=\"1-限制某个属性-是只读的\"><a href=\"#1-限制某个属性-是只读的\" class=\"headerlink\" title=\"1.限制某个属性 是只读的\"></a>1.限制某个属性 是只读的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"> \t<span class=\"keyword\">let</span> readonly = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target,name,descriptor</span>)</span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">// target :修改的类本身</span></div><div class=\"line\"> \t\t<span class=\"comment\">// name ： 属性本身</span></div><div class=\"line\"> \t\t<span class=\"comment\">// descriptor ：属性的描述对象</span></div><div class=\"line\"> \t\tdescriptor.writable = <span class=\"literal\">false</span> ;  <span class=\"comment\">//只读效果</span></div><div class=\"line\"> \t\t<span class=\"keyword\">return</span> descriptor ;</div><div class=\"line\"> \t&#125;</div><div class=\"line\"></div><div class=\"line\"> \t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\"> \t\t@readonly  <span class=\"comment\">// 修饰器</span></div><div class=\"line\"> \t\ttime()&#123;</div><div class=\"line\"> \t\t\t<span class=\"keyword\">return</span> <span class=\"string\">'2018-01-01'</span> ;</div><div class=\"line\"> \t\t&#125;</div><div class=\"line\"> \t&#125;</div><div class=\"line\"></div><div class=\"line\"> \t<span class=\"keyword\">let</span> test=<span class=\"keyword\">new</span> Test();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  \ttest.time=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'reset time'</span>);</div><div class=\"line\">  \t&#125;;</div><div class=\"line\"></div><div class=\"line\"> \t<span class=\"built_in\">console</span>.log(test.time()) ;  <span class=\"comment\">//  报错</span></div><div class=\"line\"></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"2-在类的外面-使用修饰器-（必须在class的前面使用）\"><a href=\"#2-在类的外面-使用修饰器-（必须在class的前面使用）\" class=\"headerlink\" title=\"2.在类的外面 使用修饰器  （必须在class的前面使用）\"></a>2.在类的外面 使用修饰器  （必须在class的前面使用）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> typename=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target,name,descriptor</span>)</span>&#123;</div><div class=\"line\">    target.myname=<span class=\"string\">'hello'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @typename</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'类修饰符'</span>,Test.myname);</div><div class=\"line\">  <span class=\"comment\">// 第三方库修饰器的js库：core-decorators; npm install core-decorators</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>埋点系统</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 案例1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 日志系统 ： 传统 将埋点写到业务逻辑中</span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> log =<span class=\"function\">(<span class=\"params\">type</span>)=&gt;</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target,name,descriptor</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> src_method = descriptor.value ;</div><div class=\"line\">      descriptor.value =<span class=\"function\">(<span class=\"params\">...arg</span>)=&gt;</span>&#123;</div><div class=\"line\">        src_method.apply(target,arg);</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">`log <span class=\"subst\">$&#123;type&#125;</span>`</span>);</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AD</span></span>&#123;</div><div class=\"line\">    @log(<span class=\"string\">'show'</span>)</div><div class=\"line\">    show()&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.info(<span class=\"string\">'ad is show'</span>) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    click()&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.info(<span class=\"string\">'ad is click'</span>) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> ad = <span class=\"keyword\">new</span> AD() ;</div><div class=\"line\">  ad.show();</div><div class=\"line\">  ad.click();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 好处：埋点抽离出来</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>简介：修饰器是一个函数，用于修饰类的行为（修改 扩展类的功能，修饰器只在类的范围使用）。</p>\n</blockquote>\n<p> 需安装：npm install babel-plugin-transform-decorators-legacy –save-dev</p>\n<h4 id=\"1-限制某个属性-是只读的\"><a href=\"#1-限制某个属性-是只读的\" class=\"headerlink\" title=\"1.限制某个属性 是只读的\"></a>1.限制某个属性 是只读的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"> \t<span class=\"keyword\">let</span> readonly = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target,name,descriptor</span>)</span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">// target :修改的类本身</span></div><div class=\"line\"> \t\t<span class=\"comment\">// name ： 属性本身</span></div><div class=\"line\"> \t\t<span class=\"comment\">// descriptor ：属性的描述对象</span></div><div class=\"line\"> \t\tdescriptor.writable = <span class=\"literal\">false</span> ;  <span class=\"comment\">//只读效果</span></div><div class=\"line\"> \t\t<span class=\"keyword\">return</span> descriptor ;</div><div class=\"line\"> \t&#125;</div><div class=\"line\"></div><div class=\"line\"> \t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\"> \t\t@readonly  <span class=\"comment\">// 修饰器</span></div><div class=\"line\"> \t\ttime()&#123;</div><div class=\"line\"> \t\t\t<span class=\"keyword\">return</span> <span class=\"string\">'2018-01-01'</span> ;</div><div class=\"line\"> \t\t&#125;</div><div class=\"line\"> \t&#125;</div><div class=\"line\"></div><div class=\"line\"> \t<span class=\"keyword\">let</span> test=<span class=\"keyword\">new</span> Test();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  \ttest.time=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'reset time'</span>);</div><div class=\"line\">  \t&#125;;</div><div class=\"line\"></div><div class=\"line\"> \t<span class=\"built_in\">console</span>.log(test.time()) ;  <span class=\"comment\">//  报错</span></div><div class=\"line\"></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>","more":"<h4 id=\"2-在类的外面-使用修饰器-（必须在class的前面使用）\"><a href=\"#2-在类的外面-使用修饰器-（必须在class的前面使用）\" class=\"headerlink\" title=\"2.在类的外面 使用修饰器  （必须在class的前面使用）\"></a>2.在类的外面 使用修饰器  （必须在class的前面使用）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> typename=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target,name,descriptor</span>)</span>&#123;</div><div class=\"line\">    target.myname=<span class=\"string\">'hello'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @typename</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'类修饰符'</span>,Test.myname);</div><div class=\"line\">  <span class=\"comment\">// 第三方库修饰器的js库：core-decorators; npm install core-decorators</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>埋点系统</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 案例1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 日志系统 ： 传统 将埋点写到业务逻辑中</span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> log =<span class=\"function\">(<span class=\"params\">type</span>)=&gt;</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target,name,descriptor</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> src_method = descriptor.value ;</div><div class=\"line\">      descriptor.value =<span class=\"function\">(<span class=\"params\">...arg</span>)=&gt;</span>&#123;</div><div class=\"line\">        src_method.apply(target,arg);</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">`log <span class=\"subst\">$&#123;type&#125;</span>`</span>);</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AD</span></span>&#123;</div><div class=\"line\">    @log(<span class=\"string\">'show'</span>)</div><div class=\"line\">    show()&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.info(<span class=\"string\">'ad is show'</span>) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    click()&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.info(<span class=\"string\">'ad is click'</span>) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> ad = <span class=\"keyword\">new</span> AD() ;</div><div class=\"line\">  ad.show();</div><div class=\"line\">  ad.click();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 好处：埋点抽离出来</span></div></pre></td></tr></table></figure>"},{"title":"Es6 模块化","date":"2016-09-01T02:57:59.000Z","_content":"\n> 基本概念\n\n&nbsp;\n\n\n<!-- more -->\n> 语法\n\n```javascript\n// A文件\n// 作为一个模块   1.导出变量  2.导出函数  3.类暴露出去\n\n//第一种写法\nexport let A = 123 ;\nexport function test(argument) {\n\t// body...\n\tconsole.log('test') ;\n}\n\nexport class Hello{\n\ttest(){\n\t\tconsole.log('class') ;\n\t}\n}\n//推荐使用第二种写法\nlet A = 123 ;\nlet test = function(){\n\tconsole.log('test') ;\n}\n\nclass Hello{\n\ttest(){\n\t\tconsole.log('class') ;\n\t}\n}\n\nexport default {\n  A,\n  test,\n  Hello\n}\n\n\n\n\n//B 文件\n\n//第一种写法\nimport(A,test,Hello) from 'A文件地址' ;\n\nconsole.log(A,test,Hello) ;\n\n//第二种写法\nimport * as lesson from './class/lesson17' ;\n\nconsole.log(lesson.A,lesson.test,lesson.Hello) ;\n\n//推荐使用第三种写法\n\nimport lesson17 from './class/lesson17' ;\n\nconsole.log(lesson17.A,lesson17.test,lesson17.Hello) ;\n\n```\n","source":"_posts/Es6-模块化.md","raw":"---\ntitle: Es6 模块化\ndate: 2016-09-01 10:57:59\ntags:\n- es6\ncategories:\n- EcmaJs6\n---\n\n> 基本概念\n\n&nbsp;\n\n\n<!-- more -->\n> 语法\n\n```javascript\n// A文件\n// 作为一个模块   1.导出变量  2.导出函数  3.类暴露出去\n\n//第一种写法\nexport let A = 123 ;\nexport function test(argument) {\n\t// body...\n\tconsole.log('test') ;\n}\n\nexport class Hello{\n\ttest(){\n\t\tconsole.log('class') ;\n\t}\n}\n//推荐使用第二种写法\nlet A = 123 ;\nlet test = function(){\n\tconsole.log('test') ;\n}\n\nclass Hello{\n\ttest(){\n\t\tconsole.log('class') ;\n\t}\n}\n\nexport default {\n  A,\n  test,\n  Hello\n}\n\n\n\n\n//B 文件\n\n//第一种写法\nimport(A,test,Hello) from 'A文件地址' ;\n\nconsole.log(A,test,Hello) ;\n\n//第二种写法\nimport * as lesson from './class/lesson17' ;\n\nconsole.log(lesson.A,lesson.test,lesson.Hello) ;\n\n//推荐使用第三种写法\n\nimport lesson17 from './class/lesson17' ;\n\nconsole.log(lesson17.A,lesson17.test,lesson17.Hello) ;\n\n```\n","slug":"Es6-模块化","published":1,"updated":"2018-03-08T02:47:43.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc6y0008rexmlrubazto","content":"<blockquote>\n<p>基本概念</p>\n</blockquote>\n<p>&nbsp;</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>语法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// A文件</span></div><div class=\"line\"><span class=\"comment\">// 作为一个模块   1.导出变量  2.导出函数  3.类暴露出去</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//第一种写法</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> A = <span class=\"number\">123</span> ;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">argument</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// body...</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>) ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span>&#123;</div><div class=\"line\">\ttest()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'class'</span>) ;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//推荐使用第二种写法</span></div><div class=\"line\"><span class=\"keyword\">let</span> A = <span class=\"number\">123</span> ;</div><div class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>) ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span>&#123;</div><div class=\"line\">\ttest()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'class'</span>) ;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  A,</div><div class=\"line\">  test,</div><div class=\"line\">  Hello</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//B 文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//第一种写法</span></div><div class=\"line\"><span class=\"keyword\">import</span>(A,test,Hello) <span class=\"keyword\">from</span> <span class=\"string\">'A文件地址'</span> ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(A,test,Hello) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//第二种写法</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> lesson <span class=\"keyword\">from</span> <span class=\"string\">'./class/lesson17'</span> ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(lesson.A,lesson.test,lesson.Hello) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//推荐使用第三种写法</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> lesson17 <span class=\"keyword\">from</span> <span class=\"string\">'./class/lesson17'</span> ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(lesson17.A,lesson17.test,lesson17.Hello) ;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>基本概念</p>\n</blockquote>\n<p>&nbsp;</p>","more":"<blockquote>\n<p>语法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// A文件</span></div><div class=\"line\"><span class=\"comment\">// 作为一个模块   1.导出变量  2.导出函数  3.类暴露出去</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//第一种写法</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> A = <span class=\"number\">123</span> ;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">argument</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// body...</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>) ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span>&#123;</div><div class=\"line\">\ttest()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'class'</span>) ;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//推荐使用第二种写法</span></div><div class=\"line\"><span class=\"keyword\">let</span> A = <span class=\"number\">123</span> ;</div><div class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>) ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span>&#123;</div><div class=\"line\">\ttest()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'class'</span>) ;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  A,</div><div class=\"line\">  test,</div><div class=\"line\">  Hello</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//B 文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//第一种写法</span></div><div class=\"line\"><span class=\"keyword\">import</span>(A,test,Hello) <span class=\"keyword\">from</span> <span class=\"string\">'A文件地址'</span> ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(A,test,Hello) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//第二种写法</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> lesson <span class=\"keyword\">from</span> <span class=\"string\">'./class/lesson17'</span> ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(lesson.A,lesson.test,lesson.Hello) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//推荐使用第三种写法</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> lesson17 <span class=\"keyword\">from</span> <span class=\"string\">'./class/lesson17'</span> ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(lesson17.A,lesson17.test,lesson17.Hello) ;</div></pre></td></tr></table></figure>"},{"title":"Generator 生成器","date":"2016-08-23T02:59:33.000Z","_content":">什么是 **Generator**？\n\n解决异步编程 ：\n&nbsp;&nbsp;&nbsp;&nbsp; Generator 包含多个步骤，每个步骤包含``yield`` 或者 ``return``  ，遇到就会停止，进行下一步，调用``next()``函数 。\n\n>基本用法：\n\n\n\n```javascript\n{\n\t// Generator 基本用法\n\tlet tell=function* (){\n    yield 'a';\n    yield 'b';\nborder-left: 5px solid gray;    return 'c'\n  \t};\n\n  let k=tell();\n\n  console.log(k.next());\n  console.log(k.next());\n  console.log(k.next());\n  console.log(k.next());\n\n}\n```\n\n<!-- more -->\n\n> **generator 函数  和  iterator 接口的关系 ：**\n\n>任何一个对象的iterator接口都是部署到Symbol.iterator属性上，generator就是遍历器的生成函数，所以可以直接把generator直接赋值给Symbol.iterator，从而使得对象也具备了iterator接口。\n\n```javascript\n{\n  let obj={};\n  obj[Symbol.iterator]=function* (){\n    yield 1;\n    yield 2;\n    yield 3;\n  }\n\n  for(let value of obj){\n    console.log('value',value);\n  }\n}\n```\n\n>**状态机**  ： 比如使用A、B、C 描述一个事物三种状态。用Generator 处理特别适用。\n\n```javascript\n\n{\n  let state=function* (){\n\t//当状态为1 的时候 不断next() 可以循环状态\n    while(1){\n      yield 'A';\n      yield 'B';\n      yield 'C';\n    }\n  }\n  let status=state();\n  console.log(status.next());\n  console.log(status.next());\n  console.log(status.next());\n  console.log(status.next());\n  console.log(status.next());\n}\n```\n**结果：**\n\n![Alt text | center](https://app.yinxiang.com/shard/s72/res/326cd889-605a-48b8-8504-019b36da5092)\n\n>async 语法\n\n\n\n\n#### 实例1：抽奖次数限制\n\n```javascript\n{\n\n\t// 抽奖逻辑 和 次数限制  分离\n\tlet draw = function(count){\n\t\t//具体逻辑\n\t\tconsole.info(`剩余${count}次数`);\n\t}\n\n\tdraw(1)\n\n\t// 计算当前的次数   之前使用全局变量保存当前次数，这样会非常不安全  \n\n\t// generator\n\n\tlet residue = function* (count){\n\t\twhile(count>0){ // 次数限制限制\n\t\t\tcount -- ;\n\t\t\tyield draw(count) ; //抽奖逻辑\n\t\t}\n\t}\n\n\tlet star = residue (5) ;\n\tlet btn = document.createElement('button') ;\n\n\n\tbtn.id = 'start' ;\n\tbtn.textContent = \"抽奖\" ;\n\tdocument.body.appendChild(btn) ;\n\n\tdocument.getElementById('start').addEventListener('click',function(){\n\t\tstar.next() ;\n\t},false)\n}\n```\n\n\n**结果：**\n\n![Alt text | center](https://app.yinxiang.com/shard/s72/res/1e0566ee-6bb8-4d67-9e1c-cb73b82ebfa3)\n\n#### 实例2：长轮询的generator实现\n\n```javascript\n// 实例2   长轮询 ： 服务端数据 定期变化，前端 需要定时去取。之前 通过定时器不断的取  现在使用 generator\n\n{\n\tlet ajax = function* (){\n\t\tyield new Promise(function(resolve,reject){\n\t\t\tsetTimeout(function(){\n\t\t\t\tresolve({code:0})\n\t\t\t},200) ;\n\t\t})\n\t}\n\n\t// 长轮询\n\n\tlet pull = function(){\n\t\tvar generator = ajax() ;\n\t\tlet step = generator.next() ;\n\t\tstep.value.then(function(d){\n\t\t\tconsole.log(d) ;\n\t\t\tif(d.code !=0){\n\t\t\t\tsetTimeout(function(d){\n\t\t\t\t\tconsole.log('wait') ;\n\t\t\t\t\tpull() ;\n\t\t\t\t},1000)\n\t\t\t}else{\n\t\t\t\tconsole.log(d) ;\n\t\t\t}\n\t\t})\n\t}\n\n\tpull() ;\n}\n\n```\n","source":"_posts/Generator-生成器.md","raw":"---\ntitle: Generator 生成器\ndate: 2016-08-23 10:59:33\ntags:\n- es6\ncategories:\n- EcmaJs6\n---\n>什么是 **Generator**？\n\n解决异步编程 ：\n&nbsp;&nbsp;&nbsp;&nbsp; Generator 包含多个步骤，每个步骤包含``yield`` 或者 ``return``  ，遇到就会停止，进行下一步，调用``next()``函数 。\n\n>基本用法：\n\n\n\n```javascript\n{\n\t// Generator 基本用法\n\tlet tell=function* (){\n    yield 'a';\n    yield 'b';\nborder-left: 5px solid gray;    return 'c'\n  \t};\n\n  let k=tell();\n\n  console.log(k.next());\n  console.log(k.next());\n  console.log(k.next());\n  console.log(k.next());\n\n}\n```\n\n<!-- more -->\n\n> **generator 函数  和  iterator 接口的关系 ：**\n\n>任何一个对象的iterator接口都是部署到Symbol.iterator属性上，generator就是遍历器的生成函数，所以可以直接把generator直接赋值给Symbol.iterator，从而使得对象也具备了iterator接口。\n\n```javascript\n{\n  let obj={};\n  obj[Symbol.iterator]=function* (){\n    yield 1;\n    yield 2;\n    yield 3;\n  }\n\n  for(let value of obj){\n    console.log('value',value);\n  }\n}\n```\n\n>**状态机**  ： 比如使用A、B、C 描述一个事物三种状态。用Generator 处理特别适用。\n\n```javascript\n\n{\n  let state=function* (){\n\t//当状态为1 的时候 不断next() 可以循环状态\n    while(1){\n      yield 'A';\n      yield 'B';\n      yield 'C';\n    }\n  }\n  let status=state();\n  console.log(status.next());\n  console.log(status.next());\n  console.log(status.next());\n  console.log(status.next());\n  console.log(status.next());\n}\n```\n**结果：**\n\n![Alt text | center](https://app.yinxiang.com/shard/s72/res/326cd889-605a-48b8-8504-019b36da5092)\n\n>async 语法\n\n\n\n\n#### 实例1：抽奖次数限制\n\n```javascript\n{\n\n\t// 抽奖逻辑 和 次数限制  分离\n\tlet draw = function(count){\n\t\t//具体逻辑\n\t\tconsole.info(`剩余${count}次数`);\n\t}\n\n\tdraw(1)\n\n\t// 计算当前的次数   之前使用全局变量保存当前次数，这样会非常不安全  \n\n\t// generator\n\n\tlet residue = function* (count){\n\t\twhile(count>0){ // 次数限制限制\n\t\t\tcount -- ;\n\t\t\tyield draw(count) ; //抽奖逻辑\n\t\t}\n\t}\n\n\tlet star = residue (5) ;\n\tlet btn = document.createElement('button') ;\n\n\n\tbtn.id = 'start' ;\n\tbtn.textContent = \"抽奖\" ;\n\tdocument.body.appendChild(btn) ;\n\n\tdocument.getElementById('start').addEventListener('click',function(){\n\t\tstar.next() ;\n\t},false)\n}\n```\n\n\n**结果：**\n\n![Alt text | center](https://app.yinxiang.com/shard/s72/res/1e0566ee-6bb8-4d67-9e1c-cb73b82ebfa3)\n\n#### 实例2：长轮询的generator实现\n\n```javascript\n// 实例2   长轮询 ： 服务端数据 定期变化，前端 需要定时去取。之前 通过定时器不断的取  现在使用 generator\n\n{\n\tlet ajax = function* (){\n\t\tyield new Promise(function(resolve,reject){\n\t\t\tsetTimeout(function(){\n\t\t\t\tresolve({code:0})\n\t\t\t},200) ;\n\t\t})\n\t}\n\n\t// 长轮询\n\n\tlet pull = function(){\n\t\tvar generator = ajax() ;\n\t\tlet step = generator.next() ;\n\t\tstep.value.then(function(d){\n\t\t\tconsole.log(d) ;\n\t\t\tif(d.code !=0){\n\t\t\t\tsetTimeout(function(d){\n\t\t\t\t\tconsole.log('wait') ;\n\t\t\t\t\tpull() ;\n\t\t\t\t},1000)\n\t\t\t}else{\n\t\t\t\tconsole.log(d) ;\n\t\t\t}\n\t\t})\n\t}\n\n\tpull() ;\n}\n\n```\n","slug":"Generator-生成器","published":1,"updated":"2018-03-08T02:47:36.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc70000arexmvbonom8x","content":"<blockquote>\n<p>什么是 <strong>Generator</strong>？</p>\n</blockquote>\n<p>解决异步编程 ：<br>&nbsp;&nbsp;&nbsp;&nbsp; Generator 包含多个步骤，每个步骤包含<code>yield</code> 或者 <code>return</code>  ，遇到就会停止，进行下一步，调用<code>next()</code>函数 。</p>\n<blockquote>\n<p>基本用法：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">// Generator 基本用法</span></div><div class=\"line\">\t<span class=\"keyword\">let</span> tell=<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span>;</div><div class=\"line\">border-left: <span class=\"number\">5</span>px solid gray;    <span class=\"keyword\">return</span> <span class=\"string\">'c'</span></div><div class=\"line\">  \t&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> k=tell();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(k.next());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(k.next());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(k.next());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(k.next());</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>generator 函数  和  iterator 接口的关系 ：</strong></p>\n<p>任何一个对象的iterator接口都是部署到Symbol.iterator属性上，generator就是遍历器的生成函数，所以可以直接把generator直接赋值给Symbol.iterator，从而使得对象也具备了iterator接口。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> obj=&#123;&#125;;</div><div class=\"line\">  obj[<span class=\"built_in\">Symbol</span>.iterator]=<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> obj)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'value'</span>,value);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>状态机</strong>  ： 比如使用A、B、C 描述一个事物三种状态。用Generator 处理特别适用。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> state=<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//当状态为1 的时候 不断next() 可以循环状态</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"string\">'A'</span>;</div><div class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"string\">'B'</span>;</div><div class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"string\">'C'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">let</span> status=state();</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(status.next());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(status.next());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(status.next());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(status.next());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(status.next());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>结果：</strong></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/326cd889-605a-48b8-8504-019b36da5092\" alt=\"Alt text | center\"></p>\n<blockquote>\n<p>async 语法</p>\n</blockquote>\n<h4 id=\"实例1：抽奖次数限制\"><a href=\"#实例1：抽奖次数限制\" class=\"headerlink\" title=\"实例1：抽奖次数限制\"></a>实例1：抽奖次数限制</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 抽奖逻辑 和 次数限制  分离</span></div><div class=\"line\">\t<span class=\"keyword\">let</span> draw = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">count</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//具体逻辑</span></div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.info(<span class=\"string\">`剩余<span class=\"subst\">$&#123;count&#125;</span>次数`</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tdraw(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 计算当前的次数   之前使用全局变量保存当前次数，这样会非常不安全  </span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// generator</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">let</span> residue = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">count</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(count&gt;<span class=\"number\">0</span>)&#123; <span class=\"comment\">// 次数限制限制</span></div><div class=\"line\">\t\t\tcount -- ;</div><div class=\"line\">\t\t\t<span class=\"keyword\">yield</span> draw(count) ; <span class=\"comment\">//抽奖逻辑</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">let</span> star = residue (<span class=\"number\">5</span>) ;</div><div class=\"line\">\t<span class=\"keyword\">let</span> btn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>) ;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tbtn.id = <span class=\"string\">'start'</span> ;</div><div class=\"line\">\tbtn.textContent = <span class=\"string\">\"抽奖\"</span> ;</div><div class=\"line\">\t<span class=\"built_in\">document</span>.body.appendChild(btn) ;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'start'</span>).addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\tstar.next() ;</div><div class=\"line\">\t&#125;,<span class=\"literal\">false</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>结果：</strong></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/1e0566ee-6bb8-4d67-9e1c-cb73b82ebfa3\" alt=\"Alt text | center\"></p>\n<h4 id=\"实例2：长轮询的generator实现\"><a href=\"#实例2：长轮询的generator实现\" class=\"headerlink\" title=\"实例2：长轮询的generator实现\"></a>实例2：长轮询的generator实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 实例2   长轮询 ： 服务端数据 定期变化，前端 需要定时去取。之前 通过定时器不断的取  现在使用 generator</span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">let</span> ajax = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t\t\tresolve(&#123;<span class=\"attr\">code</span>:<span class=\"number\">0</span>&#125;)</div><div class=\"line\">\t\t\t&#125;,<span class=\"number\">200</span>) ;</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 长轮询</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">let</span> pull = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> generator = ajax() ;</div><div class=\"line\">\t\t<span class=\"keyword\">let</span> step = generator.next() ;</div><div class=\"line\">\t\tstep.value.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(d) ;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(d.code !=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'wait'</span>) ;</div><div class=\"line\">\t\t\t\t\tpull() ;</div><div class=\"line\">\t\t\t\t&#125;,<span class=\"number\">1000</span>)</div><div class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(d) ;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpull() ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>什么是 <strong>Generator</strong>？</p>\n</blockquote>\n<p>解决异步编程 ：<br>&nbsp;&nbsp;&nbsp;&nbsp; Generator 包含多个步骤，每个步骤包含<code>yield</code> 或者 <code>return</code>  ，遇到就会停止，进行下一步，调用<code>next()</code>函数 。</p>\n<blockquote>\n<p>基本用法：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">// Generator 基本用法</span></div><div class=\"line\">\t<span class=\"keyword\">let</span> tell=<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span>;</div><div class=\"line\">border-left: <span class=\"number\">5</span>px solid gray;    <span class=\"keyword\">return</span> <span class=\"string\">'c'</span></div><div class=\"line\">  \t&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> k=tell();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(k.next());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(k.next());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(k.next());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(k.next());</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<blockquote>\n<p><strong>generator 函数  和  iterator 接口的关系 ：</strong></p>\n<p>任何一个对象的iterator接口都是部署到Symbol.iterator属性上，generator就是遍历器的生成函数，所以可以直接把generator直接赋值给Symbol.iterator，从而使得对象也具备了iterator接口。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> obj=&#123;&#125;;</div><div class=\"line\">  obj[<span class=\"built_in\">Symbol</span>.iterator]=<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> obj)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'value'</span>,value);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>状态机</strong>  ： 比如使用A、B、C 描述一个事物三种状态。用Generator 处理特别适用。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> state=<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//当状态为1 的时候 不断next() 可以循环状态</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"string\">'A'</span>;</div><div class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"string\">'B'</span>;</div><div class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"string\">'C'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">let</span> status=state();</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(status.next());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(status.next());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(status.next());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(status.next());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(status.next());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>结果：</strong></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/326cd889-605a-48b8-8504-019b36da5092\" alt=\"Alt text | center\"></p>\n<blockquote>\n<p>async 语法</p>\n</blockquote>\n<h4 id=\"实例1：抽奖次数限制\"><a href=\"#实例1：抽奖次数限制\" class=\"headerlink\" title=\"实例1：抽奖次数限制\"></a>实例1：抽奖次数限制</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 抽奖逻辑 和 次数限制  分离</span></div><div class=\"line\">\t<span class=\"keyword\">let</span> draw = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">count</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//具体逻辑</span></div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.info(<span class=\"string\">`剩余<span class=\"subst\">$&#123;count&#125;</span>次数`</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tdraw(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 计算当前的次数   之前使用全局变量保存当前次数，这样会非常不安全  </span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// generator</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">let</span> residue = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">count</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(count&gt;<span class=\"number\">0</span>)&#123; <span class=\"comment\">// 次数限制限制</span></div><div class=\"line\">\t\t\tcount -- ;</div><div class=\"line\">\t\t\t<span class=\"keyword\">yield</span> draw(count) ; <span class=\"comment\">//抽奖逻辑</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">let</span> star = residue (<span class=\"number\">5</span>) ;</div><div class=\"line\">\t<span class=\"keyword\">let</span> btn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>) ;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tbtn.id = <span class=\"string\">'start'</span> ;</div><div class=\"line\">\tbtn.textContent = <span class=\"string\">\"抽奖\"</span> ;</div><div class=\"line\">\t<span class=\"built_in\">document</span>.body.appendChild(btn) ;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'start'</span>).addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\tstar.next() ;</div><div class=\"line\">\t&#125;,<span class=\"literal\">false</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>结果：</strong></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/1e0566ee-6bb8-4d67-9e1c-cb73b82ebfa3\" alt=\"Alt text | center\"></p>\n<h4 id=\"实例2：长轮询的generator实现\"><a href=\"#实例2：长轮询的generator实现\" class=\"headerlink\" title=\"实例2：长轮询的generator实现\"></a>实例2：长轮询的generator实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 实例2   长轮询 ： 服务端数据 定期变化，前端 需要定时去取。之前 通过定时器不断的取  现在使用 generator</span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">let</span> ajax = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t\t\tresolve(&#123;<span class=\"attr\">code</span>:<span class=\"number\">0</span>&#125;)</div><div class=\"line\">\t\t\t&#125;,<span class=\"number\">200</span>) ;</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 长轮询</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">let</span> pull = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> generator = ajax() ;</div><div class=\"line\">\t\t<span class=\"keyword\">let</span> step = generator.next() ;</div><div class=\"line\">\t\tstep.value.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(d) ;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(d.code !=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'wait'</span>) ;</div><div class=\"line\">\t\t\t\t\tpull() ;</div><div class=\"line\">\t\t\t\t&#125;,<span class=\"number\">1000</span>)</div><div class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(d) ;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpull() ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Iterator 和 for...of 循环","date":"2016-08-23T03:01:54.000Z","_content":"\n\n>什么是Iterator接口\n\n用于数组 对象  map set 等数据集合的**统一**读取操作，不同的数据结构，通过for...of这种形式，达到读取的目标，但是背后的iterator接口是不一样的。\n\n>**MDN解释**:\n>当需要迭代一个对象的时候（比如在 ``for...of`` 循环的开始时），它的 ``@@iterator`` 方法就会被调用一次（0 个参数），同时返回的迭代器将被用来获取被迭代出来的值。\n\n``for of ``  循环：不断调用iterator接口。\n\n\n<!-- more -->\n\n##### 示例1：  iterator数组的读取\n\n```javascript\n{\n\tlet arr = ['hello','world'];\n\tlet map = arr[Symbol.iterator]();\n\tconsole.log(map.next());\n\tconsole.log(map.next());\n\tconsole.log(map.next());\n}\n```\n\n\n上述代码中：\n\n1. 返回结果：\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/b1a5c863-d3d1-4605-9119-afba59b66cf9)\n\n**说明**：结果**返回一个对象**，包含 ``value``  和 ``done`` 两个参数，如果 ``done==false``  说明 循环还有下一步状态，如果没有了，即不再有value ；\n\n>给一个复杂数据结构部署 ``iterator`` 接口,使其可以支持for....of 循环\n>另外：还有一种方式：使用generator生成器 详见笔记:  ***Generator生成器***\n\n\n```javascript\n// object 没有部署  iterator 接口，没有iterator 接口，现在要obj 部署iterator 可以用for of 循环  --------自定义iterator接口部署\n{\n  let obj={\n    start:[1,3,2],\n    end:[7,9,8],\n    [Symbol.iterator](){\n      let self=this;\n      console.log(this)\n      let index=0;\n\n      let arr=self.start.concat(self.end);\n      console.log(arr)\n\n      let len=arr.length;\n      console.log(len) ;\n\n      return {\n        next(){\n          if(index<len){\n          \tconsole.log(\"index\"+index)\n          \tconsole.log(arr[index++])\n            return {\n              value:arr[index++],// 必须保证index +1 ，进行下一步\n              done:false\n            }\n          }else{\n            return {\n              value:arr[index++],\n              done:true\n            }\n          }\n        }\n      }\n    }\n\n  }\n  for(let key of obj){\n  \tconsole.log('***********************')\n    console.log(key);\n  }\n}\n```\n\n\n\n<b>运行结果：</b>\n\n![Alt text | center ](https://app.yinxiang.com/shard/s72/res/422356a2-06b9-43f1-98d0-e1216c0b33a9)\n","source":"_posts/Iterator-和-for-of-循环.md","raw":"---\ntitle: Iterator 和 for...of 循环\ndate: 2016-08-23 11:01:54\ntags:\n- es6\ncategories:\n- EcmaJs6\n---\n\n\n>什么是Iterator接口\n\n用于数组 对象  map set 等数据集合的**统一**读取操作，不同的数据结构，通过for...of这种形式，达到读取的目标，但是背后的iterator接口是不一样的。\n\n>**MDN解释**:\n>当需要迭代一个对象的时候（比如在 ``for...of`` 循环的开始时），它的 ``@@iterator`` 方法就会被调用一次（0 个参数），同时返回的迭代器将被用来获取被迭代出来的值。\n\n``for of ``  循环：不断调用iterator接口。\n\n\n<!-- more -->\n\n##### 示例1：  iterator数组的读取\n\n```javascript\n{\n\tlet arr = ['hello','world'];\n\tlet map = arr[Symbol.iterator]();\n\tconsole.log(map.next());\n\tconsole.log(map.next());\n\tconsole.log(map.next());\n}\n```\n\n\n上述代码中：\n\n1. 返回结果：\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/b1a5c863-d3d1-4605-9119-afba59b66cf9)\n\n**说明**：结果**返回一个对象**，包含 ``value``  和 ``done`` 两个参数，如果 ``done==false``  说明 循环还有下一步状态，如果没有了，即不再有value ；\n\n>给一个复杂数据结构部署 ``iterator`` 接口,使其可以支持for....of 循环\n>另外：还有一种方式：使用generator生成器 详见笔记:  ***Generator生成器***\n\n\n```javascript\n// object 没有部署  iterator 接口，没有iterator 接口，现在要obj 部署iterator 可以用for of 循环  --------自定义iterator接口部署\n{\n  let obj={\n    start:[1,3,2],\n    end:[7,9,8],\n    [Symbol.iterator](){\n      let self=this;\n      console.log(this)\n      let index=0;\n\n      let arr=self.start.concat(self.end);\n      console.log(arr)\n\n      let len=arr.length;\n      console.log(len) ;\n\n      return {\n        next(){\n          if(index<len){\n          \tconsole.log(\"index\"+index)\n          \tconsole.log(arr[index++])\n            return {\n              value:arr[index++],// 必须保证index +1 ，进行下一步\n              done:false\n            }\n          }else{\n            return {\n              value:arr[index++],\n              done:true\n            }\n          }\n        }\n      }\n    }\n\n  }\n  for(let key of obj){\n  \tconsole.log('***********************')\n    console.log(key);\n  }\n}\n```\n\n\n\n<b>运行结果：</b>\n\n![Alt text | center ](https://app.yinxiang.com/shard/s72/res/422356a2-06b9-43f1-98d0-e1216c0b33a9)\n","slug":"Iterator-和-for-of-循环","published":1,"updated":"2018-03-08T02:47:21.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc71000frexm8adzmj17","content":"<blockquote>\n<p>什么是Iterator接口</p>\n</blockquote>\n<p>用于数组 对象  map set 等数据集合的<strong>统一</strong>读取操作，不同的数据结构，通过for…of这种形式，达到读取的目标，但是背后的iterator接口是不一样的。</p>\n<blockquote>\n<p><strong>MDN解释</strong>:<br>当需要迭代一个对象的时候（比如在 <code>for...of</code> 循环的开始时），它的 <code>@@iterator</code> 方法就会被调用一次（0 个参数），同时返回的迭代器将被用来获取被迭代出来的值。</p>\n</blockquote>\n<p><code>for of</code>  循环：不断调用iterator接口。</p>\n<a id=\"more\"></a>\n<h5 id=\"示例1：-iterator数组的读取\"><a href=\"#示例1：-iterator数组的读取\" class=\"headerlink\" title=\"示例1：  iterator数组的读取\"></a>示例1：  iterator数组的读取</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">let</span> arr = [<span class=\"string\">'hello'</span>,<span class=\"string\">'world'</span>];</div><div class=\"line\">\t<span class=\"keyword\">let</span> map = arr[<span class=\"built_in\">Symbol</span>.iterator]();</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(map.next());</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(map.next());</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(map.next());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码中：</p>\n<ol>\n<li>返回结果：</li>\n</ol>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/b1a5c863-d3d1-4605-9119-afba59b66cf9\" alt=\"Alt text\"></p>\n<p><strong>说明</strong>：结果<strong>返回一个对象</strong>，包含 <code>value</code>  和 <code>done</code> 两个参数，如果 <code>done==false</code>  说明 循环还有下一步状态，如果没有了，即不再有value ；</p>\n<blockquote>\n<p>给一个复杂数据结构部署 <code>iterator</code> 接口,使其可以支持for….of 循环<br>另外：还有一种方式：使用generator生成器 详见笔记:  <strong><em>Generator生成器</em></strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// object 没有部署  iterator 接口，没有iterator 接口，现在要obj 部署iterator 可以用for of 循环  --------自定义iterator接口部署</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> obj=&#123;</div><div class=\"line\">    <span class=\"attr\">start</span>:[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>],</div><div class=\"line\">    <span class=\"attr\">end</span>:[<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>],</div><div class=\"line\">    [<span class=\"built_in\">Symbol</span>.iterator]()&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> self=<span class=\"keyword\">this</span>;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</div><div class=\"line\">      <span class=\"keyword\">let</span> index=<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">let</span> arr=self.start.concat(self.end);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(arr)</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">let</span> len=arr.length;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(len) ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        next()&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span>(index&lt;len)&#123;</div><div class=\"line\">          \t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"index\"</span>+index)</div><div class=\"line\">          \t<span class=\"built_in\">console</span>.log(arr[index++])</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">              <span class=\"attr\">value</span>:arr[index++],<span class=\"comment\">// 必须保证index +1 ，进行下一步</span></div><div class=\"line\">              done:<span class=\"literal\">false</span></div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">              <span class=\"attr\">value</span>:arr[index++],</div><div class=\"line\">              <span class=\"attr\">done</span>:<span class=\"literal\">true</span></div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> obj)&#123;</div><div class=\"line\">  \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'***********************'</span>)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(key);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><b>运行结果：</b></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/422356a2-06b9-43f1-98d0-e1216c0b33a9\" alt=\"Alt text | center \"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>什么是Iterator接口</p>\n</blockquote>\n<p>用于数组 对象  map set 等数据集合的<strong>统一</strong>读取操作，不同的数据结构，通过for…of这种形式，达到读取的目标，但是背后的iterator接口是不一样的。</p>\n<blockquote>\n<p><strong>MDN解释</strong>:<br>当需要迭代一个对象的时候（比如在 <code>for...of</code> 循环的开始时），它的 <code>@@iterator</code> 方法就会被调用一次（0 个参数），同时返回的迭代器将被用来获取被迭代出来的值。</p>\n</blockquote>\n<p><code>for of</code>  循环：不断调用iterator接口。</p>","more":"<h5 id=\"示例1：-iterator数组的读取\"><a href=\"#示例1：-iterator数组的读取\" class=\"headerlink\" title=\"示例1：  iterator数组的读取\"></a>示例1：  iterator数组的读取</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">let</span> arr = [<span class=\"string\">'hello'</span>,<span class=\"string\">'world'</span>];</div><div class=\"line\">\t<span class=\"keyword\">let</span> map = arr[<span class=\"built_in\">Symbol</span>.iterator]();</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(map.next());</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(map.next());</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(map.next());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码中：</p>\n<ol>\n<li>返回结果：</li>\n</ol>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/b1a5c863-d3d1-4605-9119-afba59b66cf9\" alt=\"Alt text\"></p>\n<p><strong>说明</strong>：结果<strong>返回一个对象</strong>，包含 <code>value</code>  和 <code>done</code> 两个参数，如果 <code>done==false</code>  说明 循环还有下一步状态，如果没有了，即不再有value ；</p>\n<blockquote>\n<p>给一个复杂数据结构部署 <code>iterator</code> 接口,使其可以支持for….of 循环<br>另外：还有一种方式：使用generator生成器 详见笔记:  <strong><em>Generator生成器</em></strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// object 没有部署  iterator 接口，没有iterator 接口，现在要obj 部署iterator 可以用for of 循环  --------自定义iterator接口部署</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> obj=&#123;</div><div class=\"line\">    <span class=\"attr\">start</span>:[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>],</div><div class=\"line\">    <span class=\"attr\">end</span>:[<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>],</div><div class=\"line\">    [<span class=\"built_in\">Symbol</span>.iterator]()&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> self=<span class=\"keyword\">this</span>;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</div><div class=\"line\">      <span class=\"keyword\">let</span> index=<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">let</span> arr=self.start.concat(self.end);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(arr)</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">let</span> len=arr.length;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(len) ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        next()&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span>(index&lt;len)&#123;</div><div class=\"line\">          \t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"index\"</span>+index)</div><div class=\"line\">          \t<span class=\"built_in\">console</span>.log(arr[index++])</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">              <span class=\"attr\">value</span>:arr[index++],<span class=\"comment\">// 必须保证index +1 ，进行下一步</span></div><div class=\"line\">              done:<span class=\"literal\">false</span></div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">              <span class=\"attr\">value</span>:arr[index++],</div><div class=\"line\">              <span class=\"attr\">done</span>:<span class=\"literal\">true</span></div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> obj)&#123;</div><div class=\"line\">  \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'***********************'</span>)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(key);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><b>运行结果：</b></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/422356a2-06b9-43f1-98d0-e1216c0b33a9\" alt=\"Alt text | center \"></p>"},{"title":"JS日期格式化转换方法","date":"2017-05-06T06:54:44.000Z","_content":"\n>##### 将日期转换为指定的格式：比如转换成 年月日时分秒 这种格式：yyyy-MM-dd hh:mm:ss 或者 yyyy-MM-dd\n```javascript\n\n\nDate.prototype.format = function(fmt) {\n     var o = {\n        \"M+\" : this.getMonth()+1,                 //月份\n        \"d+\" : this.getDate(),                    //日\n        \"h+\" : this.getHours(),                   //小时\n        \"m+\" : this.getMinutes(),                 //分\n        \"s+\" : this.getSeconds(),                 //秒\n        \"q+\" : Math.floor((this.getMonth()+3)/3), //季度\n        \"S\"  : this.getMilliseconds()             //毫秒\n    };\n    if(/(y+)/.test(fmt)) {\n            fmt=fmt.replace(RegExp.$1, (this.getFullYear()+\"\").substr(4 - RegExp.$1.length));\n    }\n     for(var k in o) {\n        if(new RegExp(\"(\"+ k +\")\").test(fmt)){\n             fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));\n         }\n     }\n    return fmt;\n}    \n\n\n\n//调用\n\nvar time1 = new Date().format(\"yyyy-MM-dd hh:mm:ss\");\nconsole.log(time1);\n\n//或\n\nvar time2 = new Date().format(\"yyyy-MM-dd\");\nconsole.log(time2);\n```\n\n<!-- more -->\n>##### 将指定的日期转换为\"年月日\"的格式，代码如下：\n\n```javascript\n   var oldTime = (new Date(\"2012/12/25 20:11:11\")).getTime();\n   var curTime = new Date(oldTime).format(\"yyyy-MM-dd\");\n   console.log(curTime);\n```\n\n\n>##### 将 \"时间戳\" 转换为 \"年月日\" 的格式.\n\n```javascript\n    var da = 1402233166999;\n    da = new Date(da);\n    var year = da.getFullYear()+'年';\n    var month = da.getMonth()+1+'月';\n    var date = da.getDate()+'日';\n    console.log([year,month,date].join('-'));\n\n```\n","source":"_posts/JS日期格式化转换方法.md","raw":"---\ntitle: JS日期格式化转换方法\ndate: 2017-05-06 14:54:44\ntags:\n- js\ncategories:\n- Javascript\n\n---\n\n>##### 将日期转换为指定的格式：比如转换成 年月日时分秒 这种格式：yyyy-MM-dd hh:mm:ss 或者 yyyy-MM-dd\n```javascript\n\n\nDate.prototype.format = function(fmt) {\n     var o = {\n        \"M+\" : this.getMonth()+1,                 //月份\n        \"d+\" : this.getDate(),                    //日\n        \"h+\" : this.getHours(),                   //小时\n        \"m+\" : this.getMinutes(),                 //分\n        \"s+\" : this.getSeconds(),                 //秒\n        \"q+\" : Math.floor((this.getMonth()+3)/3), //季度\n        \"S\"  : this.getMilliseconds()             //毫秒\n    };\n    if(/(y+)/.test(fmt)) {\n            fmt=fmt.replace(RegExp.$1, (this.getFullYear()+\"\").substr(4 - RegExp.$1.length));\n    }\n     for(var k in o) {\n        if(new RegExp(\"(\"+ k +\")\").test(fmt)){\n             fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));\n         }\n     }\n    return fmt;\n}    \n\n\n\n//调用\n\nvar time1 = new Date().format(\"yyyy-MM-dd hh:mm:ss\");\nconsole.log(time1);\n\n//或\n\nvar time2 = new Date().format(\"yyyy-MM-dd\");\nconsole.log(time2);\n```\n\n<!-- more -->\n>##### 将指定的日期转换为\"年月日\"的格式，代码如下：\n\n```javascript\n   var oldTime = (new Date(\"2012/12/25 20:11:11\")).getTime();\n   var curTime = new Date(oldTime).format(\"yyyy-MM-dd\");\n   console.log(curTime);\n```\n\n\n>##### 将 \"时间戳\" 转换为 \"年月日\" 的格式.\n\n```javascript\n    var da = 1402233166999;\n    da = new Date(da);\n    var year = da.getFullYear()+'年';\n    var month = da.getMonth()+1+'月';\n    var date = da.getDate()+'日';\n    console.log([year,month,date].join('-'));\n\n```\n","slug":"JS日期格式化转换方法","published":1,"updated":"2018-03-08T02:52:04.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc73000grexmye4mztxj","content":"<blockquote>\n<h5 id=\"将日期转换为指定的格式：比如转换成-年月日时分秒-这种格式：yyyy-MM-dd-hh-mm-ss-或者-yyyy-MM-dd\"><a href=\"#将日期转换为指定的格式：比如转换成-年月日时分秒-这种格式：yyyy-MM-dd-hh-mm-ss-或者-yyyy-MM-dd\" class=\"headerlink\" title=\"将日期转换为指定的格式：比如转换成 年月日时分秒 这种格式：yyyy-MM-dd hh:mm:ss 或者 yyyy-MM-dd\"></a>将日期转换为指定的格式：比如转换成 年月日时分秒 这种格式：yyyy-MM-dd hh:mm:ss 或者 yyyy-MM-dd</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fmt</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">        <span class=\"string\">\"M+\"</span> : <span class=\"keyword\">this</span>.getMonth()+<span class=\"number\">1</span>,                 <span class=\"comment\">//月份</span></div><div class=\"line\">        <span class=\"string\">\"d+\"</span> : <span class=\"keyword\">this</span>.getDate(),                    <span class=\"comment\">//日</span></div><div class=\"line\">        <span class=\"string\">\"h+\"</span> : <span class=\"keyword\">this</span>.getHours(),                   <span class=\"comment\">//小时</span></div><div class=\"line\">        <span class=\"string\">\"m+\"</span> : <span class=\"keyword\">this</span>.getMinutes(),                 <span class=\"comment\">//分</span></div><div class=\"line\">        <span class=\"string\">\"s+\"</span> : <span class=\"keyword\">this</span>.getSeconds(),                 <span class=\"comment\">//秒</span></div><div class=\"line\">        <span class=\"string\">\"q+\"</span> : <span class=\"built_in\">Math</span>.floor((<span class=\"keyword\">this</span>.getMonth()+<span class=\"number\">3</span>)/<span class=\"number\">3</span>), <span class=\"comment\">//季度</span></div><div class=\"line\">        <span class=\"string\">\"S\"</span>  : <span class=\"keyword\">this</span>.getMilliseconds()             <span class=\"comment\">//毫秒</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"regexp\">/(y+)/</span>.test(fmt)) &#123;</div><div class=\"line\">            fmt=fmt.replace(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>, (<span class=\"keyword\">this</span>.getFullYear()+<span class=\"string\">\"\"</span>).substr(<span class=\"number\">4</span> - <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>length));</div><div class=\"line\">    &#125;</div><div class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(\"</span>+ k +<span class=\"string\">\")\"</span>).test(fmt))&#123;</div><div class=\"line\">             fmt = fmt.replace(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>, (<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>length==<span class=\"number\">1</span>) ? (o[k]) : ((<span class=\"string\">\"00\"</span>+ o[k]).substr((<span class=\"string\">\"\"</span>+ o[k]).length)));</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> fmt;</div><div class=\"line\">&#125;    </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> time1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().format(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//或</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> time2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().format(<span class=\"string\">\"yyyy-MM-dd\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time2);</div></pre></td></tr></table></figure>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<h5 id=\"将指定的日期转换为”年月日”的格式，代码如下：\"><a href=\"#将指定的日期转换为”年月日”的格式，代码如下：\" class=\"headerlink\" title=\"将指定的日期转换为”年月日”的格式，代码如下：\"></a>将指定的日期转换为”年月日”的格式，代码如下：</h5></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oldTime = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"2012/12/25 20:11:11\"</span>)).getTime();</div><div class=\"line\"><span class=\"keyword\">var</span> curTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(oldTime).format(<span class=\"string\">\"yyyy-MM-dd\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(curTime);</div></pre></td></tr></table></figure>\n<blockquote>\n<h5 id=\"将-“时间戳”-转换为-“年月日”-的格式\"><a href=\"#将-“时间戳”-转换为-“年月日”-的格式\" class=\"headerlink\" title=\"将 “时间戳” 转换为 “年月日” 的格式.\"></a>将 “时间戳” 转换为 “年月日” 的格式.</h5></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> da = <span class=\"number\">1402233166999</span>;</div><div class=\"line\">da = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(da);</div><div class=\"line\"><span class=\"keyword\">var</span> year = da.getFullYear()+<span class=\"string\">'年'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> month = da.getMonth()+<span class=\"number\">1</span>+<span class=\"string\">'月'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> date = da.getDate()+<span class=\"string\">'日'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log([year,month,date].join(<span class=\"string\">'-'</span>));</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<h5 id=\"将日期转换为指定的格式：比如转换成-年月日时分秒-这种格式：yyyy-MM-dd-hh-mm-ss-或者-yyyy-MM-dd\"><a href=\"#将日期转换为指定的格式：比如转换成-年月日时分秒-这种格式：yyyy-MM-dd-hh-mm-ss-或者-yyyy-MM-dd\" class=\"headerlink\" title=\"将日期转换为指定的格式：比如转换成 年月日时分秒 这种格式：yyyy-MM-dd hh:mm:ss 或者 yyyy-MM-dd\"></a>将日期转换为指定的格式：比如转换成 年月日时分秒 这种格式：yyyy-MM-dd hh:mm:ss 或者 yyyy-MM-dd</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fmt</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">        <span class=\"string\">\"M+\"</span> : <span class=\"keyword\">this</span>.getMonth()+<span class=\"number\">1</span>,                 <span class=\"comment\">//月份</span></div><div class=\"line\">        <span class=\"string\">\"d+\"</span> : <span class=\"keyword\">this</span>.getDate(),                    <span class=\"comment\">//日</span></div><div class=\"line\">        <span class=\"string\">\"h+\"</span> : <span class=\"keyword\">this</span>.getHours(),                   <span class=\"comment\">//小时</span></div><div class=\"line\">        <span class=\"string\">\"m+\"</span> : <span class=\"keyword\">this</span>.getMinutes(),                 <span class=\"comment\">//分</span></div><div class=\"line\">        <span class=\"string\">\"s+\"</span> : <span class=\"keyword\">this</span>.getSeconds(),                 <span class=\"comment\">//秒</span></div><div class=\"line\">        <span class=\"string\">\"q+\"</span> : <span class=\"built_in\">Math</span>.floor((<span class=\"keyword\">this</span>.getMonth()+<span class=\"number\">3</span>)/<span class=\"number\">3</span>), <span class=\"comment\">//季度</span></div><div class=\"line\">        <span class=\"string\">\"S\"</span>  : <span class=\"keyword\">this</span>.getMilliseconds()             <span class=\"comment\">//毫秒</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"regexp\">/(y+)/</span>.test(fmt)) &#123;</div><div class=\"line\">            fmt=fmt.replace(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>, (<span class=\"keyword\">this</span>.getFullYear()+<span class=\"string\">\"\"</span>).substr(<span class=\"number\">4</span> - <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>length));</div><div class=\"line\">    &#125;</div><div class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(\"</span>+ k +<span class=\"string\">\")\"</span>).test(fmt))&#123;</div><div class=\"line\">             fmt = fmt.replace(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>, (<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>length==<span class=\"number\">1</span>) ? (o[k]) : ((<span class=\"string\">\"00\"</span>+ o[k]).substr((<span class=\"string\">\"\"</span>+ o[k]).length)));</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> fmt;</div><div class=\"line\">&#125;    </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> time1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().format(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//或</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> time2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().format(<span class=\"string\">\"yyyy-MM-dd\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time2);</div></pre></td></tr></table></figure>\n</blockquote>","more":"<blockquote>\n<h5 id=\"将指定的日期转换为”年月日”的格式，代码如下：\"><a href=\"#将指定的日期转换为”年月日”的格式，代码如下：\" class=\"headerlink\" title=\"将指定的日期转换为”年月日”的格式，代码如下：\"></a>将指定的日期转换为”年月日”的格式，代码如下：</h5></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oldTime = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"2012/12/25 20:11:11\"</span>)).getTime();</div><div class=\"line\"><span class=\"keyword\">var</span> curTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(oldTime).format(<span class=\"string\">\"yyyy-MM-dd\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(curTime);</div></pre></td></tr></table></figure>\n<blockquote>\n<h5 id=\"将-“时间戳”-转换为-“年月日”-的格式\"><a href=\"#将-“时间戳”-转换为-“年月日”-的格式\" class=\"headerlink\" title=\"将 “时间戳” 转换为 “年月日” 的格式.\"></a>将 “时间戳” 转换为 “年月日” 的格式.</h5></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> da = <span class=\"number\">1402233166999</span>;</div><div class=\"line\">da = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(da);</div><div class=\"line\"><span class=\"keyword\">var</span> year = da.getFullYear()+<span class=\"string\">'年'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> month = da.getMonth()+<span class=\"number\">1</span>+<span class=\"string\">'月'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> date = da.getDate()+<span class=\"string\">'日'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log([year,month,date].join(<span class=\"string\">'-'</span>));</div></pre></td></tr></table></figure>"},{"title":"Object.assign","date":"2016-08-18T03:01:54.000Z","_content":"Es5中实现\n\n```javascript\n\t//对象assign 方法\nvar createAssigner = function(keysFunc,defaults){\n  return function(obj){\n    var length = arguments.lenth;\n    if(defaults) obj = Object(obj);\n    if(length<2||obj==null) return obj ;\n    for(var index=1;index.length;index++){\n      var source = arguments[index],keys = keysFunc(source),l = keys.length;\n      for(var i = 0;i<l;i++){\n        var key = keys[i];\n        if(!defaults || obj[key] == void 0)\n          obj[key] = source[key];\n      }\n    }\n    return obj;\n  }\n}\n\nvar allkeys = function(obj){\n  var keys = [];\n  for(var key in obj) keys.push(key);\n  return keys ;\n}\n\nvar extend = createAssigner(allkeys);\nextend({t:1},{k:2})\n\n```\n\n<!-- more -->\n\n\nEs6中实现\n\n```javascript\nObject.assign({t:1},{t:2}) ;\n```\n","source":"_posts/Object.assign.md","raw":"---\ntitle: Object.assign\ndate: 2016-08-18 11:01:54\ntags:\n- es6\ncategories:\n- EcmaJs6\n---\nEs5中实现\n\n```javascript\n\t//对象assign 方法\nvar createAssigner = function(keysFunc,defaults){\n  return function(obj){\n    var length = arguments.lenth;\n    if(defaults) obj = Object(obj);\n    if(length<2||obj==null) return obj ;\n    for(var index=1;index.length;index++){\n      var source = arguments[index],keys = keysFunc(source),l = keys.length;\n      for(var i = 0;i<l;i++){\n        var key = keys[i];\n        if(!defaults || obj[key] == void 0)\n          obj[key] = source[key];\n      }\n    }\n    return obj;\n  }\n}\n\nvar allkeys = function(obj){\n  var keys = [];\n  for(var key in obj) keys.push(key);\n  return keys ;\n}\n\nvar extend = createAssigner(allkeys);\nextend({t:1},{k:2})\n\n```\n\n<!-- more -->\n\n\nEs6中实现\n\n```javascript\nObject.assign({t:1},{t:2}) ;\n```\n","slug":"Object.assign","published":1,"updated":"2018-03-08T02:47:07.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc74000krexmhvoeao41","content":"<p>Es5中实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"comment\">//对象assign 方法</span></div><div class=\"line\"><span class=\"keyword\">var</span> createAssigner = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">keysFunc,defaults</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"built_in\">arguments</span>.lenth;</div><div class=\"line\">    <span class=\"keyword\">if</span>(defaults) obj = <span class=\"built_in\">Object</span>(obj);</div><div class=\"line\">    <span class=\"keyword\">if</span>(length&lt;<span class=\"number\">2</span>||obj==<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> obj ;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index=<span class=\"number\">1</span>;index.length;index++)&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[index],keys = keysFunc(source),l = keys.length;</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;l;i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> key = keys[i];</div><div class=\"line\">        <span class=\"keyword\">if</span>(!defaults || obj[key] == <span class=\"keyword\">void</span> <span class=\"number\">0</span>)</div><div class=\"line\">          obj[key] = source[key];</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> allkeys = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> keys = [];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) keys.push(key);</div><div class=\"line\">  <span class=\"keyword\">return</span> keys ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> extend = createAssigner(allkeys);</div><div class=\"line\">extend(&#123;<span class=\"attr\">t</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">k</span>:<span class=\"number\">2</span>&#125;)</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>Es6中实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123;<span class=\"attr\">t</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">t</span>:<span class=\"number\">2</span>&#125;) ;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Es5中实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"comment\">//对象assign 方法</span></div><div class=\"line\"><span class=\"keyword\">var</span> createAssigner = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">keysFunc,defaults</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"built_in\">arguments</span>.lenth;</div><div class=\"line\">    <span class=\"keyword\">if</span>(defaults) obj = <span class=\"built_in\">Object</span>(obj);</div><div class=\"line\">    <span class=\"keyword\">if</span>(length&lt;<span class=\"number\">2</span>||obj==<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> obj ;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index=<span class=\"number\">1</span>;index.length;index++)&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[index],keys = keysFunc(source),l = keys.length;</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;l;i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> key = keys[i];</div><div class=\"line\">        <span class=\"keyword\">if</span>(!defaults || obj[key] == <span class=\"keyword\">void</span> <span class=\"number\">0</span>)</div><div class=\"line\">          obj[key] = source[key];</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> allkeys = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> keys = [];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) keys.push(key);</div><div class=\"line\">  <span class=\"keyword\">return</span> keys ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> extend = createAssigner(allkeys);</div><div class=\"line\">extend(&#123;<span class=\"attr\">t</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">k</span>:<span class=\"number\">2</span>&#125;)</div></pre></td></tr></table></figure>","more":"<p>Es6中实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123;<span class=\"attr\">t</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">t</span>:<span class=\"number\">2</span>&#125;) ;</div></pre></td></tr></table></figure>"},{"title":"Promise 异步编程的解决方案","date":"2016-08-09T03:02:38.000Z","_content":"\n\npromise概念：异步编程解决方案\n\n**举例**：函数A执行步骤——》执行完执行 B\n\n 解决上述问题有两种方式：\n\n- 回调方式\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/575b47df-aace-4872-84dd-ef70325114c9)\n\n- 事件触发的方式\n\n\n<!-- more -->\n\n>使用Promise\n\n```javascript\n{\n\t// ES5  回调解决异步   模拟ajax  \n  // 基本定义\n  let ajax=function(callback){\n    console.log('执行');\n    setTimeout(function () {\n      callback&&callback.call()\n    }, 1000);\n  };\n  ajax(function(){\n    console.log('timeout1');\n  })\n}\n\n{\n  let ajax=function(){\n    console.log('执行2');\n    return new Promise(function(resolve,reject){\n      // resolve:执行下一步操作   reject:终止操作\n      setTimeout(function () {\n        resolve()\n      }, 1000);\n    })\n  };\n\n  ajax().then(function(){\n    console.log('promise','timeout2');\n  })\n  // 执行步骤 ：\n  //    1.运行Ajax方法\n  //    2. 运行完之后返回一个Promise 实例，promise实例有resolve，reject方法\n}\n\n// 多个任务  \n\n{\n  let ajax=function(){\n    console.log('执行3');\n    return new Promise(function(resolve,reject){\n      setTimeout(function () {\n        resolve()\n      }, 1000);\n    })\n  };\n\n  ajax()\n    .then(function(){\n    return new Promise(function(resolve,reject){\n      setTimeout(function () {\n        resolve()\n      }, 2000);\n    });\n  })\n    .then(function(){\n    console.log('timeout3');\n  })\n}\n\n// 多个任务捕获\n{\n  let ajax=function(num){\n    console.log('执行4');\n    return new Promise(function(resolve,reject){\n      if(num>5){\n        resolve();\n      }else{\n        throw new Error('出错了')\n      }\n    })\n  }\n\n  ajax(6).then(function(){\n    console.log('log',6);\n  }).catch(function(err){\n    console.log('catch',err);\n  });\n\n  ajax(3).then(function(){\n    console.log('log',3);\n  }).catch(function(err){\n    console.log('catch',err);\n  });\n}\n\n\n{\n  // 所有图片加载完 再添加到页面\n  function loadImg(src){\n    // 此promise实例做图片加载的动作\n    return new Promise((resolve,reject)=>{\n      let img = document.createElement('img');\n      img.src = src ;\n      img.onload =function(){\n        resolve(img);\n      }\n      img.onerror=function(err){\n        reject(err);\n      }\n    })\n  }\n\n  function showImgs(imgs){\n    imgs.forEach(function(img){\n      document.body.appendChild(img);\n    })\n  }\n\n\n  // Promise.all表示把多个promise实例当做一个来用。当所有promise实例状态发生改变，新的promise实例才会发生变化\n\n  Promise.all([\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/task_alarm/QMkieAh3Jj.png'),\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/pAPrTzNMMF.jpg'),\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/5kZ7fCeabd.jpg'),\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/2QwsHcpWZG.jpg')\n  ]).then(showImgs)\n}\n\n\n{\n  // 场景：三张不同的图片，位于三个不同的位置，页面需要加载一张图片，不知道三张图片哪个返回快，不关心，但是有三个来源，加载一个就可以，先到先得，哪个回来哪个显示\n\n  // 有一个加载完就显示的到页面\n  function loadImg(src){\n    // 此promise实例做图片加载的动作\n    return new Promise((resolve,reject)=>{\n      let img = document.createElement('img');\n      img.src = src ;\n      img.onload =function(){\n        resolve(img);\n      }\n      img.onerror=function(err){\n        reject(err);\n      }\n    })\n  }\n\n\n  function showImgs(img){\n    let p = document.createElement('p');\n    p.appendChild(img);\n    document.body.appendChild(p);\n  }\n\n\n\n  // Promise.race  只要数组中有一个状态改变，就会触发新的promise实例。其他就不改变了\n\n   Promise.race([\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/task_alarm/QMkieAh3Jj.png'),\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/pAPrTzNMMF.jpg'),\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/5kZ7fCeabd.jpg'),\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/2QwsHcpWZG.jpg')\n  ]).then(showImgs)\n\n\n}\n```\n","source":"_posts/Promise-异步编程的解决方案.md","raw":"---\ntitle: Promise 异步编程的解决方案\ndate: 2016-08-09 11:02:38\ntags:\n- es6\ncategories:\n- EcmaJs6\n---\n\n\npromise概念：异步编程解决方案\n\n**举例**：函数A执行步骤——》执行完执行 B\n\n 解决上述问题有两种方式：\n\n- 回调方式\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/575b47df-aace-4872-84dd-ef70325114c9)\n\n- 事件触发的方式\n\n\n<!-- more -->\n\n>使用Promise\n\n```javascript\n{\n\t// ES5  回调解决异步   模拟ajax  \n  // 基本定义\n  let ajax=function(callback){\n    console.log('执行');\n    setTimeout(function () {\n      callback&&callback.call()\n    }, 1000);\n  };\n  ajax(function(){\n    console.log('timeout1');\n  })\n}\n\n{\n  let ajax=function(){\n    console.log('执行2');\n    return new Promise(function(resolve,reject){\n      // resolve:执行下一步操作   reject:终止操作\n      setTimeout(function () {\n        resolve()\n      }, 1000);\n    })\n  };\n\n  ajax().then(function(){\n    console.log('promise','timeout2');\n  })\n  // 执行步骤 ：\n  //    1.运行Ajax方法\n  //    2. 运行完之后返回一个Promise 实例，promise实例有resolve，reject方法\n}\n\n// 多个任务  \n\n{\n  let ajax=function(){\n    console.log('执行3');\n    return new Promise(function(resolve,reject){\n      setTimeout(function () {\n        resolve()\n      }, 1000);\n    })\n  };\n\n  ajax()\n    .then(function(){\n    return new Promise(function(resolve,reject){\n      setTimeout(function () {\n        resolve()\n      }, 2000);\n    });\n  })\n    .then(function(){\n    console.log('timeout3');\n  })\n}\n\n// 多个任务捕获\n{\n  let ajax=function(num){\n    console.log('执行4');\n    return new Promise(function(resolve,reject){\n      if(num>5){\n        resolve();\n      }else{\n        throw new Error('出错了')\n      }\n    })\n  }\n\n  ajax(6).then(function(){\n    console.log('log',6);\n  }).catch(function(err){\n    console.log('catch',err);\n  });\n\n  ajax(3).then(function(){\n    console.log('log',3);\n  }).catch(function(err){\n    console.log('catch',err);\n  });\n}\n\n\n{\n  // 所有图片加载完 再添加到页面\n  function loadImg(src){\n    // 此promise实例做图片加载的动作\n    return new Promise((resolve,reject)=>{\n      let img = document.createElement('img');\n      img.src = src ;\n      img.onload =function(){\n        resolve(img);\n      }\n      img.onerror=function(err){\n        reject(err);\n      }\n    })\n  }\n\n  function showImgs(imgs){\n    imgs.forEach(function(img){\n      document.body.appendChild(img);\n    })\n  }\n\n\n  // Promise.all表示把多个promise实例当做一个来用。当所有promise实例状态发生改变，新的promise实例才会发生变化\n\n  Promise.all([\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/task_alarm/QMkieAh3Jj.png'),\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/pAPrTzNMMF.jpg'),\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/5kZ7fCeabd.jpg'),\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/2QwsHcpWZG.jpg')\n  ]).then(showImgs)\n}\n\n\n{\n  // 场景：三张不同的图片，位于三个不同的位置，页面需要加载一张图片，不知道三张图片哪个返回快，不关心，但是有三个来源，加载一个就可以，先到先得，哪个回来哪个显示\n\n  // 有一个加载完就显示的到页面\n  function loadImg(src){\n    // 此promise实例做图片加载的动作\n    return new Promise((resolve,reject)=>{\n      let img = document.createElement('img');\n      img.src = src ;\n      img.onload =function(){\n        resolve(img);\n      }\n      img.onerror=function(err){\n        reject(err);\n      }\n    })\n  }\n\n\n  function showImgs(img){\n    let p = document.createElement('p');\n    p.appendChild(img);\n    document.body.appendChild(p);\n  }\n\n\n\n  // Promise.race  只要数组中有一个状态改变，就会触发新的promise实例。其他就不改变了\n\n   Promise.race([\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/task_alarm/QMkieAh3Jj.png'),\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/pAPrTzNMMF.jpg'),\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/5kZ7fCeabd.jpg'),\n    loadImg('http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/2QwsHcpWZG.jpg')\n  ]).then(showImgs)\n\n\n}\n```\n","slug":"Promise-异步编程的解决方案","published":1,"updated":"2018-03-08T02:46:58.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc75000lrexmj3zcqhok","content":"<p>promise概念：异步编程解决方案</p>\n<p><strong>举例</strong>：函数A执行步骤——》执行完执行 B</p>\n<p> 解决上述问题有两种方式：</p>\n<ul>\n<li>回调方式</li>\n</ul>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/575b47df-aace-4872-84dd-ef70325114c9\" alt=\"Alt text\"></p>\n<ul>\n<li>事件触发的方式</li>\n</ul>\n<a id=\"more\"></a>\n<blockquote>\n<p>使用Promise</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">// ES5  回调解决异步   模拟ajax  </span></div><div class=\"line\">  <span class=\"comment\">// 基本定义</span></div><div class=\"line\">  <span class=\"keyword\">let</span> ajax=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行'</span>);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      callback&amp;&amp;callback.call()</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  ajax(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1'</span>);</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> ajax=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行2'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">// resolve:执行下一步操作   reject:终止操作</span></div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        resolve()</div><div class=\"line\">      &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  ajax().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>,<span class=\"string\">'timeout2'</span>);</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"comment\">// 执行步骤 ：</span></div><div class=\"line\">  <span class=\"comment\">//    1.运行Ajax方法</span></div><div class=\"line\">  <span class=\"comment\">//    2. 运行完之后返回一个Promise 实例，promise实例有resolve，reject方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个任务  </span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> ajax=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行3'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        resolve()</div><div class=\"line\">      &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  ajax()</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        resolve()</div><div class=\"line\">      &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout3'</span>);</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个任务捕获</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> ajax=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行4'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(num&gt;<span class=\"number\">5</span>)&#123;</div><div class=\"line\">        resolve();</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'出错了'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ajax(<span class=\"number\">6</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>,<span class=\"number\">6</span>);</div><div class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch'</span>,err);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  ajax(<span class=\"number\">3</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>,<span class=\"number\">3</span>);</div><div class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch'</span>,err);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// 所有图片加载完 再添加到页面</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImg</span>(<span class=\"params\">src</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 此promise实例做图片加载的动作</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</div><div class=\"line\">      img.src = src ;</div><div class=\"line\">      img.onload =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        resolve(img);</div><div class=\"line\">      &#125;</div><div class=\"line\">      img.onerror=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">        reject(err);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showImgs</span>(<span class=\"params\">imgs</span>)</span>&#123;</div><div class=\"line\">    imgs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">img</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">document</span>.body.appendChild(img);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Promise.all表示把多个promise实例当做一个来用。当所有promise实例状态发生改变，新的promise实例才会发生变化</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">Promise</span>.all([</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/task_alarm/QMkieAh3Jj.png'</span>),</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/pAPrTzNMMF.jpg'</span>),</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/5kZ7fCeabd.jpg'</span>),</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/2QwsHcpWZG.jpg'</span>)</div><div class=\"line\">  ]).then(showImgs)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// 场景：三张不同的图片，位于三个不同的位置，页面需要加载一张图片，不知道三张图片哪个返回快，不关心，但是有三个来源，加载一个就可以，先到先得，哪个回来哪个显示</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 有一个加载完就显示的到页面</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImg</span>(<span class=\"params\">src</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 此promise实例做图片加载的动作</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</div><div class=\"line\">      img.src = src ;</div><div class=\"line\">      img.onload =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        resolve(img);</div><div class=\"line\">      &#125;</div><div class=\"line\">      img.onerror=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">        reject(err);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showImgs</span>(<span class=\"params\">img</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</div><div class=\"line\">    p.appendChild(img);</div><div class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(p);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Promise.race  只要数组中有一个状态改变，就会触发新的promise实例。其他就不改变了</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"built_in\">Promise</span>.race([</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/task_alarm/QMkieAh3Jj.png'</span>),</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/pAPrTzNMMF.jpg'</span>),</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/5kZ7fCeabd.jpg'</span>),</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/2QwsHcpWZG.jpg'</span>)</div><div class=\"line\">  ]).then(showImgs)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>promise概念：异步编程解决方案</p>\n<p><strong>举例</strong>：函数A执行步骤——》执行完执行 B</p>\n<p> 解决上述问题有两种方式：</p>\n<ul>\n<li>回调方式</li>\n</ul>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/575b47df-aace-4872-84dd-ef70325114c9\" alt=\"Alt text\"></p>\n<ul>\n<li>事件触发的方式</li>\n</ul>","more":"<blockquote>\n<p>使用Promise</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">// ES5  回调解决异步   模拟ajax  </span></div><div class=\"line\">  <span class=\"comment\">// 基本定义</span></div><div class=\"line\">  <span class=\"keyword\">let</span> ajax=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行'</span>);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      callback&amp;&amp;callback.call()</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  ajax(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1'</span>);</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> ajax=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行2'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">// resolve:执行下一步操作   reject:终止操作</span></div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        resolve()</div><div class=\"line\">      &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  ajax().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>,<span class=\"string\">'timeout2'</span>);</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"comment\">// 执行步骤 ：</span></div><div class=\"line\">  <span class=\"comment\">//    1.运行Ajax方法</span></div><div class=\"line\">  <span class=\"comment\">//    2. 运行完之后返回一个Promise 实例，promise实例有resolve，reject方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个任务  </span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> ajax=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行3'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        resolve()</div><div class=\"line\">      &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  ajax()</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        resolve()</div><div class=\"line\">      &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout3'</span>);</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个任务捕获</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> ajax=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行4'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(num&gt;<span class=\"number\">5</span>)&#123;</div><div class=\"line\">        resolve();</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'出错了'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ajax(<span class=\"number\">6</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>,<span class=\"number\">6</span>);</div><div class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch'</span>,err);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  ajax(<span class=\"number\">3</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>,<span class=\"number\">3</span>);</div><div class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch'</span>,err);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// 所有图片加载完 再添加到页面</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImg</span>(<span class=\"params\">src</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 此promise实例做图片加载的动作</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</div><div class=\"line\">      img.src = src ;</div><div class=\"line\">      img.onload =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        resolve(img);</div><div class=\"line\">      &#125;</div><div class=\"line\">      img.onerror=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">        reject(err);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showImgs</span>(<span class=\"params\">imgs</span>)</span>&#123;</div><div class=\"line\">    imgs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">img</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">document</span>.body.appendChild(img);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Promise.all表示把多个promise实例当做一个来用。当所有promise实例状态发生改变，新的promise实例才会发生变化</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">Promise</span>.all([</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/task_alarm/QMkieAh3Jj.png'</span>),</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/pAPrTzNMMF.jpg'</span>),</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/5kZ7fCeabd.jpg'</span>),</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/2QwsHcpWZG.jpg'</span>)</div><div class=\"line\">  ]).then(showImgs)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// 场景：三张不同的图片，位于三个不同的位置，页面需要加载一张图片，不知道三张图片哪个返回快，不关心，但是有三个来源，加载一个就可以，先到先得，哪个回来哪个显示</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 有一个加载完就显示的到页面</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImg</span>(<span class=\"params\">src</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 此promise实例做图片加载的动作</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</div><div class=\"line\">      img.src = src ;</div><div class=\"line\">      img.onload =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        resolve(img);</div><div class=\"line\">      &#125;</div><div class=\"line\">      img.onerror=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">        reject(err);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showImgs</span>(<span class=\"params\">img</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</div><div class=\"line\">    p.appendChild(img);</div><div class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(p);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Promise.race  只要数组中有一个状态改变，就会触发新的promise实例。其他就不改变了</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"built_in\">Promise</span>.race([</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/task_alarm/QMkieAh3Jj.png'</span>),</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/pAPrTzNMMF.jpg'</span>),</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/5kZ7fCeabd.jpg'</span>),</div><div class=\"line\">    loadImg(<span class=\"string\">'http://shape-app.oss-cn-beijing.aliyuncs.com/activity_test/2QwsHcpWZG.jpg'</span>)</div><div class=\"line\">  ]).then(showImgs)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Symbol数据类型","date":"2016-10-21T03:01:11.000Z","_content":"\n\n> 什么是Symbol 数据类型？\n\n1.  **MDN** 的解释：\n\n\t\tSymbol()函数会返回symbol类型的值，每个从Symbol()返回的symbol值都是唯一的， 一个symbol值能作为对象属性的标识符； 这是该数据类型仅有的目的。\n\n 2.  个人理解：\n\n\t  Symbol类型是es6新增的一个数据类型,Es5的基本数据类型（undefined，null,Object,function,Number,string）Symbol值通过Symbol函数生成Symbol类型是保证每个属性的名字都是独一无二的，对于一个对象由对个模块构成的情况非常有用 。\n\n<!-- more -->\n>怎么使用?\n\n\n**值的输出：**\n```javascript\nvar a=Symbol(‘foo’)=>Symbol(foo) //与其他类型不能运算，可以转换成字符串\n```\n","source":"_posts/Symbol数据类型.md","raw":"---\ntitle: Symbol数据类型\ndate: 2016-10-21 11:01:11\ntags:\n- es6\ncategories:\n- EcmaJs6\n---\n\n\n> 什么是Symbol 数据类型？\n\n1.  **MDN** 的解释：\n\n\t\tSymbol()函数会返回symbol类型的值，每个从Symbol()返回的symbol值都是唯一的， 一个symbol值能作为对象属性的标识符； 这是该数据类型仅有的目的。\n\n 2.  个人理解：\n\n\t  Symbol类型是es6新增的一个数据类型,Es5的基本数据类型（undefined，null,Object,function,Number,string）Symbol值通过Symbol函数生成Symbol类型是保证每个属性的名字都是独一无二的，对于一个对象由对个模块构成的情况非常有用 。\n\n<!-- more -->\n>怎么使用?\n\n\n**值的输出：**\n```javascript\nvar a=Symbol(‘foo’)=>Symbol(foo) //与其他类型不能运算，可以转换成字符串\n```\n","slug":"Symbol数据类型","published":1,"updated":"2018-03-08T02:48:31.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc77000prexmpjv22hyg","content":"<blockquote>\n<p>什么是Symbol 数据类型？</p>\n</blockquote>\n<ol>\n<li><p><strong>MDN</strong> 的解释：</p>\n<pre><code>Symbol()函数会返回symbol类型的值，每个从Symbol()返回的symbol值都是唯一的， 一个symbol值能作为对象属性的标识符； 这是该数据类型仅有的目的。\n</code></pre><ol>\n<li><p>个人理解：</p>\n<p>Symbol类型是es6新增的一个数据类型,Es5的基本数据类型（undefined，null,Object,function,Number,string）Symbol值通过Symbol函数生成Symbol类型是保证每个属性的名字都是独一无二的，对于一个对象由对个模块构成的情况非常有用 。</p>\n</li>\n</ol>\n</li>\n</ol>\n<a id=\"more\"></a>\n<blockquote>\n<p>怎么使用?</p>\n</blockquote>\n<p><strong>值的输出：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"built_in\">Symbol</span>(‘foo’)=&gt;<span class=\"built_in\">Symbol</span>(foo) <span class=\"comment\">//与其他类型不能运算，可以转换成字符串</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>什么是Symbol 数据类型？</p>\n</blockquote>\n<ol>\n<li><p><strong>MDN</strong> 的解释：</p>\n<pre><code>Symbol()函数会返回symbol类型的值，每个从Symbol()返回的symbol值都是唯一的， 一个symbol值能作为对象属性的标识符； 这是该数据类型仅有的目的。\n</code></pre><ol>\n<li><p>个人理解：</p>\n<p>Symbol类型是es6新增的一个数据类型,Es5的基本数据类型（undefined，null,Object,function,Number,string）Symbol值通过Symbol函数生成Symbol类型是保证每个属性的名字都是独一无二的，对于一个对象由对个模块构成的情况非常有用 。</p>\n</li>\n</ol>\n</li>\n</ol>","more":"<blockquote>\n<p>怎么使用?</p>\n</blockquote>\n<p><strong>值的输出：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"built_in\">Symbol</span>(‘foo’)=&gt;<span class=\"built_in\">Symbol</span>(foo) <span class=\"comment\">//与其他类型不能运算，可以转换成字符串</span></div></pre></td></tr></table></figure></p>"},{"title":" javascript 事件","date":"2017-08-06T06:59:11.000Z","_content":"\n\n>#### 一、事件的种类\n\n\n\n#### 鼠标事件\n`click`  `dbclick`  `mouseup`  `mousedown` `mousemove` `mouseover` `mouseenter`  `mouseout` `mouseleave`\n#### 滚轮事件\n`wheel`\n#### 键盘事件\n`keydown`  `keypress`  `keyup`\n\n<!-- more -->\n#### 进度事件\n`abort` `error` `load` `loadstart`  `loadend`  `progress`  `timeout`   \n#### 拖拽事件\n`drag`  `dragstart`  `dragend`  `dragenter` `dragover` `dragleave`  `drop`\n#### 触摸事件\n`touchstart`  `touchend`  `toumove`  `touchcancel`\n#### 表单事件\n`input`  `select`  `change`  `reset` `submit`\n#### 文档事件\n`load` `error` `pageshow` `pagelive` `DOMContentLoaded` `readystatechange` `scroll` `resize` `copy` `cut` `paste` `focus` `focusin` `focusout`  `blur`  `hashchange` `popstate`\n\n\n\n\n\n\n>#### 二、事件传播的三个阶段\n\n##### 1.捕获阶段\n\n从 `window` 对象传导到目标阶段的过程\n\n##### 2.目标阶段\n\n当事件在目标节点出发的过程\n\n##### 3.冒泡阶段\n\n从目标阶段传导回`window`对象的过程\n\n#### 代码示意：\n\n\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n <meta charset=\"utf-8\">\n <title></title>\n</head>\n\n<body>\n\n <div>\n   <p>Click Me</p>\n </div>\n\n</body>\n<script type=\"text/javascript\">\n var phases = {\n   1: 'capture', //捕获阶段\n   2: 'target', //当前\n   3: 'bubble' //冒泡\n };\n\n var div = document.querySelector('div');\n var p = document.querySelector('p');\n\n div.addEventListener('click', callback, true); // 捕获\n p.addEventListener('click', callback, true); //target\n div.addEventListener('click', callback, false); // 冒泡\n p.addEventListener('click', callback, false);  // target\n\n function callback(event) {\n   console.log(event)\n   var tag = event.currentTarget.tagName;\n\n   var phase = phases[event.eventPhase];\n   console.log(\"Tag: '\" + tag + \"'. EventPhase: '\" + phase + \"'\");\n }\n</script>\n\n</html>\n```\n\n#### 图示：\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/8d53d1e2-c43a-408c-9e3f-a10bef9354ae)\n\n\n#### <span style=\"color:red\">注意：</span>\n\n##### 用户点击网页的时候，浏览器总是假定click事件的目标节点，就是点击位置的嵌套最深的那个节点（嵌套在`<div>`节点的`<p>`节点）。所以，`<p>`节点的捕获阶段和冒泡阶段，都会显示为target阶段。\n\n\n\n>#### 三、事件代理\n\n##### 由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。\n\n```html  \n <ul>\n   <li></li>\n   <li id=\"lis\">\n     <p onclick=\"pClick()\">click me</p>\n   </li>\n   <li></li>\n   <li></li>\n </ul>\n```\n\n```javascript\n var ul = document.querySelector('ul');\n var lis = document.querySelector('#lis');\n\n // lis 的监听函数\n\n lis.addEventListener('click', (event) => {\n   console.log('这个是li的第一个监听函数')\n   event.stopPropagation()  // 阻止当前事件向上冒泡  ，故 ul监听事件不执行\n   event.stopImmediatePropagation()  //  event.stopPropagation只能阻止当前监听事件不冒，但是阻止不了其他监听事件 ，所以使用    event.stopImmediatePropagation\n\n })\n lis.addEventListener('click', (event) => {\n   console.log('这个是li的第二个监听函数')\n })\n // p 元素的监听函数\n function pClick() {\n\n   console.log('这个是P元素的监听函数')\n }\n //   ul监听函数\n ul.addEventListener('click', (event) => {\n   console.log('ul的第一个监听函数')\n   // 事件代理 处理 子元素 p 的点击\n   // if (event.target.tagName.toLowerCase() == \"p\") {\n   //   // p节点触发\n   //   console.log('点击了P元素')\n   //\n   // }\n\n })\n\n\n ul.addEventListener('click', (event) => {\n   console.log('ul的第二个监听函数')\n })\n\n```\n\n\n#### `stopPropagation`  和  `stopImmediatePropagation` 区别 ：\n\n　　在事件处理程序中，每个事件处理程序中间都会有一个event对象，而这个event对象有两个方法，一个是stopPropagation方法，一个是stopImmediatePropagation方法，两个方法只差一个Immediate，这里就说说这两个方法的区别\n\n　　1、`stopImmediatePropagation`方法：\n\n　　　　stopImmediatePropagation方法作用在当前节点以及事件链上的所有后续节点上，目的是在执行完当前事件处理程序之后，停止当前节点以及所有后续节点的事件处理程序的运行\n\n　　2、`stopPropagation`方法\n\n　　　　stopPropagation方法作用在后续节点上，目的在执行完绑定到当前元素上的所有事件处理程序之后，停止执行所有后续节点的事件处理程序\n\n<hr>\n\n　从概念上讲，在调用完stopPropagation函数之后，就会立即停止对后续节点的访问，但是会执行完绑定到当前节点上的所有事件处理程序；而调用stopImmediatePropagation函数之后，除了所有后续节点，绑定到当前元素上的、当前事件处理程序之后的事件处理程序就不会再执行了\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n#### 版权说明：\n阮一峰大神 [javascript标准参考教程](http://javascript.ruanyifeng.com/dom/event.html#toc8)\n超载的笨鸟 [浅谈javascript中stopImmediatePropagation函数和stopPropagation函数的区别](http://www.cnblogs.com/dqsBK/p/6287907.html)\n","source":"_posts/javascript-事件.md","raw":"---\ntitle: ' javascript 事件'\ndate: 2017-08-06 14:59:11\ntags:\n- js\ncategories:\n- Javascript\n\n\n---\n\n\n>#### 一、事件的种类\n\n\n\n#### 鼠标事件\n`click`  `dbclick`  `mouseup`  `mousedown` `mousemove` `mouseover` `mouseenter`  `mouseout` `mouseleave`\n#### 滚轮事件\n`wheel`\n#### 键盘事件\n`keydown`  `keypress`  `keyup`\n\n<!-- more -->\n#### 进度事件\n`abort` `error` `load` `loadstart`  `loadend`  `progress`  `timeout`   \n#### 拖拽事件\n`drag`  `dragstart`  `dragend`  `dragenter` `dragover` `dragleave`  `drop`\n#### 触摸事件\n`touchstart`  `touchend`  `toumove`  `touchcancel`\n#### 表单事件\n`input`  `select`  `change`  `reset` `submit`\n#### 文档事件\n`load` `error` `pageshow` `pagelive` `DOMContentLoaded` `readystatechange` `scroll` `resize` `copy` `cut` `paste` `focus` `focusin` `focusout`  `blur`  `hashchange` `popstate`\n\n\n\n\n\n\n>#### 二、事件传播的三个阶段\n\n##### 1.捕获阶段\n\n从 `window` 对象传导到目标阶段的过程\n\n##### 2.目标阶段\n\n当事件在目标节点出发的过程\n\n##### 3.冒泡阶段\n\n从目标阶段传导回`window`对象的过程\n\n#### 代码示意：\n\n\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n <meta charset=\"utf-8\">\n <title></title>\n</head>\n\n<body>\n\n <div>\n   <p>Click Me</p>\n </div>\n\n</body>\n<script type=\"text/javascript\">\n var phases = {\n   1: 'capture', //捕获阶段\n   2: 'target', //当前\n   3: 'bubble' //冒泡\n };\n\n var div = document.querySelector('div');\n var p = document.querySelector('p');\n\n div.addEventListener('click', callback, true); // 捕获\n p.addEventListener('click', callback, true); //target\n div.addEventListener('click', callback, false); // 冒泡\n p.addEventListener('click', callback, false);  // target\n\n function callback(event) {\n   console.log(event)\n   var tag = event.currentTarget.tagName;\n\n   var phase = phases[event.eventPhase];\n   console.log(\"Tag: '\" + tag + \"'. EventPhase: '\" + phase + \"'\");\n }\n</script>\n\n</html>\n```\n\n#### 图示：\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/8d53d1e2-c43a-408c-9e3f-a10bef9354ae)\n\n\n#### <span style=\"color:red\">注意：</span>\n\n##### 用户点击网页的时候，浏览器总是假定click事件的目标节点，就是点击位置的嵌套最深的那个节点（嵌套在`<div>`节点的`<p>`节点）。所以，`<p>`节点的捕获阶段和冒泡阶段，都会显示为target阶段。\n\n\n\n>#### 三、事件代理\n\n##### 由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。\n\n```html  \n <ul>\n   <li></li>\n   <li id=\"lis\">\n     <p onclick=\"pClick()\">click me</p>\n   </li>\n   <li></li>\n   <li></li>\n </ul>\n```\n\n```javascript\n var ul = document.querySelector('ul');\n var lis = document.querySelector('#lis');\n\n // lis 的监听函数\n\n lis.addEventListener('click', (event) => {\n   console.log('这个是li的第一个监听函数')\n   event.stopPropagation()  // 阻止当前事件向上冒泡  ，故 ul监听事件不执行\n   event.stopImmediatePropagation()  //  event.stopPropagation只能阻止当前监听事件不冒，但是阻止不了其他监听事件 ，所以使用    event.stopImmediatePropagation\n\n })\n lis.addEventListener('click', (event) => {\n   console.log('这个是li的第二个监听函数')\n })\n // p 元素的监听函数\n function pClick() {\n\n   console.log('这个是P元素的监听函数')\n }\n //   ul监听函数\n ul.addEventListener('click', (event) => {\n   console.log('ul的第一个监听函数')\n   // 事件代理 处理 子元素 p 的点击\n   // if (event.target.tagName.toLowerCase() == \"p\") {\n   //   // p节点触发\n   //   console.log('点击了P元素')\n   //\n   // }\n\n })\n\n\n ul.addEventListener('click', (event) => {\n   console.log('ul的第二个监听函数')\n })\n\n```\n\n\n#### `stopPropagation`  和  `stopImmediatePropagation` 区别 ：\n\n　　在事件处理程序中，每个事件处理程序中间都会有一个event对象，而这个event对象有两个方法，一个是stopPropagation方法，一个是stopImmediatePropagation方法，两个方法只差一个Immediate，这里就说说这两个方法的区别\n\n　　1、`stopImmediatePropagation`方法：\n\n　　　　stopImmediatePropagation方法作用在当前节点以及事件链上的所有后续节点上，目的是在执行完当前事件处理程序之后，停止当前节点以及所有后续节点的事件处理程序的运行\n\n　　2、`stopPropagation`方法\n\n　　　　stopPropagation方法作用在后续节点上，目的在执行完绑定到当前元素上的所有事件处理程序之后，停止执行所有后续节点的事件处理程序\n\n<hr>\n\n　从概念上讲，在调用完stopPropagation函数之后，就会立即停止对后续节点的访问，但是会执行完绑定到当前节点上的所有事件处理程序；而调用stopImmediatePropagation函数之后，除了所有后续节点，绑定到当前元素上的、当前事件处理程序之后的事件处理程序就不会再执行了\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n#### 版权说明：\n阮一峰大神 [javascript标准参考教程](http://javascript.ruanyifeng.com/dom/event.html#toc8)\n超载的笨鸟 [浅谈javascript中stopImmediatePropagation函数和stopPropagation函数的区别](http://www.cnblogs.com/dqsBK/p/6287907.html)\n","slug":"javascript-事件","published":1,"updated":"2018-03-08T02:50:05.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc78000rrexm8fuwnz75","content":"<blockquote>\n<h4 id=\"一、事件的种类\"><a href=\"#一、事件的种类\" class=\"headerlink\" title=\"一、事件的种类\"></a>一、事件的种类</h4></blockquote>\n<h4 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h4><p><code>click</code>  <code>dbclick</code>  <code>mouseup</code>  <code>mousedown</code> <code>mousemove</code> <code>mouseover</code> <code>mouseenter</code>  <code>mouseout</code> <code>mouseleave</code></p>\n<h4 id=\"滚轮事件\"><a href=\"#滚轮事件\" class=\"headerlink\" title=\"滚轮事件\"></a>滚轮事件</h4><p><code>wheel</code></p>\n<h4 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h4><p><code>keydown</code>  <code>keypress</code>  <code>keyup</code></p>\n<a id=\"more\"></a>\n<h4 id=\"进度事件\"><a href=\"#进度事件\" class=\"headerlink\" title=\"进度事件\"></a>进度事件</h4><p><code>abort</code> <code>error</code> <code>load</code> <code>loadstart</code>  <code>loadend</code>  <code>progress</code>  <code>timeout</code>   </p>\n<h4 id=\"拖拽事件\"><a href=\"#拖拽事件\" class=\"headerlink\" title=\"拖拽事件\"></a>拖拽事件</h4><p><code>drag</code>  <code>dragstart</code>  <code>dragend</code>  <code>dragenter</code> <code>dragover</code> <code>dragleave</code>  <code>drop</code></p>\n<h4 id=\"触摸事件\"><a href=\"#触摸事件\" class=\"headerlink\" title=\"触摸事件\"></a>触摸事件</h4><p><code>touchstart</code>  <code>touchend</code>  <code>toumove</code>  <code>touchcancel</code></p>\n<h4 id=\"表单事件\"><a href=\"#表单事件\" class=\"headerlink\" title=\"表单事件\"></a>表单事件</h4><p><code>input</code>  <code>select</code>  <code>change</code>  <code>reset</code> <code>submit</code></p>\n<h4 id=\"文档事件\"><a href=\"#文档事件\" class=\"headerlink\" title=\"文档事件\"></a>文档事件</h4><p><code>load</code> <code>error</code> <code>pageshow</code> <code>pagelive</code> <code>DOMContentLoaded</code> <code>readystatechange</code> <code>scroll</code> <code>resize</code> <code>copy</code> <code>cut</code> <code>paste</code> <code>focus</code> <code>focusin</code> <code>focusout</code>  <code>blur</code>  <code>hashchange</code> <code>popstate</code></p>\n<blockquote>\n<h4 id=\"二、事件传播的三个阶段\"><a href=\"#二、事件传播的三个阶段\" class=\"headerlink\" title=\"二、事件传播的三个阶段\"></a>二、事件传播的三个阶段</h4></blockquote>\n<h5 id=\"1-捕获阶段\"><a href=\"#1-捕获阶段\" class=\"headerlink\" title=\"1.捕获阶段\"></a>1.捕获阶段</h5><p>从 <code>window</code> 对象传导到目标阶段的过程</p>\n<h5 id=\"2-目标阶段\"><a href=\"#2-目标阶段\" class=\"headerlink\" title=\"2.目标阶段\"></a>2.目标阶段</h5><p>当事件在目标节点出发的过程</p>\n<h5 id=\"3-冒泡阶段\"><a href=\"#3-冒泡阶段\" class=\"headerlink\" title=\"3.冒泡阶段\"></a>3.冒泡阶段</h5><p>从目标阶段传导回<code>window</code>对象的过程</p>\n<h4 id=\"代码示意：\"><a href=\"#代码示意：\" class=\"headerlink\" title=\"代码示意：\"></a>代码示意：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"> <span class=\"keyword\">var</span> phases = &#123;</div><div class=\"line\">   <span class=\"number\">1</span>: <span class=\"string\">'capture'</span>, <span class=\"comment\">//捕获阶段</span></div><div class=\"line\">   <span class=\"number\">2</span>: <span class=\"string\">'target'</span>, <span class=\"comment\">//当前</span></div><div class=\"line\">   <span class=\"number\">3</span>: <span class=\"string\">'bubble'</span> <span class=\"comment\">//冒泡</span></div><div class=\"line\"> &#125;;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'div'</span>);</div><div class=\"line\"> <span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>);</div><div class=\"line\"></div><div class=\"line\"> div.addEventListener(<span class=\"string\">'click'</span>, callback, <span class=\"literal\">true</span>); <span class=\"comment\">// 捕获</span></div><div class=\"line\"> p.addEventListener(<span class=\"string\">'click'</span>, callback, <span class=\"literal\">true</span>); <span class=\"comment\">//target</span></div><div class=\"line\"> div.addEventListener(<span class=\"string\">'click'</span>, callback, <span class=\"literal\">false</span>); <span class=\"comment\">// 冒泡</span></div><div class=\"line\"> p.addEventListener(<span class=\"string\">'click'</span>, callback, <span class=\"literal\">false</span>);  <span class=\"comment\">// target</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(event)</div><div class=\"line\">   <span class=\"keyword\">var</span> tag = event.currentTarget.tagName;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">var</span> phase = phases[event.eventPhase];</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Tag: '\"</span> + tag + <span class=\"string\">\"'. EventPhase: '\"</span> + phase + <span class=\"string\">\"'\"</span>);</div><div class=\"line\"> &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"图示：\"><a href=\"#图示：\" class=\"headerlink\" title=\"图示：\"></a>图示：</h4><p><img src=\"https://app.yinxiang.com/shard/s72/res/8d53d1e2-c43a-408c-9e3f-a10bef9354ae\" alt=\"Alt text\"></p>\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a><span style=\"color:red\">注意：</span></h4><h5 id=\"用户点击网页的时候，浏览器总是假定click事件的目标节点，就是点击位置的嵌套最深的那个节点（嵌套在-lt-div-gt-节点的-lt-p-gt-节点）。所以，-lt-p-gt-节点的捕获阶段和冒泡阶段，都会显示为target阶段。\"><a href=\"#用户点击网页的时候，浏览器总是假定click事件的目标节点，就是点击位置的嵌套最深的那个节点（嵌套在-lt-div-gt-节点的-lt-p-gt-节点）。所以，-lt-p-gt-节点的捕获阶段和冒泡阶段，都会显示为target阶段。\" class=\"headerlink\" title=\"用户点击网页的时候，浏览器总是假定click事件的目标节点，就是点击位置的嵌套最深的那个节点（嵌套在&lt;div&gt;节点的&lt;p&gt;节点）。所以，&lt;p&gt;节点的捕获阶段和冒泡阶段，都会显示为target阶段。\"></a>用户点击网页的时候，浏览器总是假定click事件的目标节点，就是点击位置的嵌套最深的那个节点（嵌套在<code>&lt;div&gt;</code>节点的<code>&lt;p&gt;</code>节点）。所以，<code>&lt;p&gt;</code>节点的捕获阶段和冒泡阶段，都会显示为target阶段。</h5><blockquote>\n<h4 id=\"三、事件代理\"><a href=\"#三、事件代理\" class=\"headerlink\" title=\"三、事件代理\"></a>三、事件代理</h4></blockquote>\n<h5 id=\"由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。\"><a href=\"#由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。\" class=\"headerlink\" title=\"由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。\"></a>由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"lis\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"pClick()\"</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'ul'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> lis = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#lis'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// lis 的监听函数</span></div><div class=\"line\"></div><div class=\"line\">lis.addEventListener(<span class=\"string\">'click'</span>, (event) =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这个是li的第一个监听函数'</span>)</div><div class=\"line\">  event.stopPropagation()  <span class=\"comment\">// 阻止当前事件向上冒泡  ，故 ul监听事件不执行</span></div><div class=\"line\">  event.stopImmediatePropagation()  <span class=\"comment\">//  event.stopPropagation只能阻止当前监听事件不冒，但是阻止不了其他监听事件 ，所以使用    event.stopImmediatePropagation</span></div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\">lis.addEventListener(<span class=\"string\">'click'</span>, (event) =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这个是li的第二个监听函数'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// p 元素的监听函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pClick</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这个是P元素的监听函数'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//   ul监听函数</span></div><div class=\"line\">ul.addEventListener(<span class=\"string\">'click'</span>, (event) =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'ul的第一个监听函数'</span>)</div><div class=\"line\">  <span class=\"comment\">// 事件代理 处理 子元素 p 的点击</span></div><div class=\"line\">  <span class=\"comment\">// if (event.target.tagName.toLowerCase() == \"p\") &#123;</span></div><div class=\"line\">  <span class=\"comment\">//   // p节点触发</span></div><div class=\"line\">  <span class=\"comment\">//   console.log('点击了P元素')</span></div><div class=\"line\">  <span class=\"comment\">//</span></div><div class=\"line\">  <span class=\"comment\">// &#125;</span></div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">ul.addEventListener(<span class=\"string\">'click'</span>, (event) =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'ul的第二个监听函数'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"stopPropagation-和-stopImmediatePropagation-区别-：\"><a href=\"#stopPropagation-和-stopImmediatePropagation-区别-：\" class=\"headerlink\" title=\"stopPropagation  和  stopImmediatePropagation 区别 ：\"></a><code>stopPropagation</code>  和  <code>stopImmediatePropagation</code> 区别 ：</h4><p>　　在事件处理程序中，每个事件处理程序中间都会有一个event对象，而这个event对象有两个方法，一个是stopPropagation方法，一个是stopImmediatePropagation方法，两个方法只差一个Immediate，这里就说说这两个方法的区别</p>\n<p>　　1、<code>stopImmediatePropagation</code>方法：</p>\n<p>　　　　stopImmediatePropagation方法作用在当前节点以及事件链上的所有后续节点上，目的是在执行完当前事件处理程序之后，停止当前节点以及所有后续节点的事件处理程序的运行</p>\n<p>　　2、<code>stopPropagation</code>方法</p>\n<p>　　　　stopPropagation方法作用在后续节点上，目的在执行完绑定到当前元素上的所有事件处理程序之后，停止执行所有后续节点的事件处理程序</p>\n<hr>\n\n<p>　从概念上讲，在调用完stopPropagation函数之后，就会立即停止对后续节点的访问，但是会执行完绑定到当前节点上的所有事件处理程序；而调用stopImmediatePropagation函数之后，除了所有后续节点，绑定到当前元素上的、当前事件处理程序之后的事件处理程序就不会再执行了</p>\n<p><hr></p>\n<h4 id=\"版权说明：\"><a href=\"#版权说明：\" class=\"headerlink\" title=\"版权说明：\"></a>版权说明：</h4><p>阮一峰大神 <a href=\"http://javascript.ruanyifeng.com/dom/event.html#toc8\" target=\"_blank\" rel=\"noopener\">javascript标准参考教程</a><br>超载的笨鸟 <a href=\"http://www.cnblogs.com/dqsBK/p/6287907.html\" target=\"_blank\" rel=\"noopener\">浅谈javascript中stopImmediatePropagation函数和stopPropagation函数的区别</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<h4 id=\"一、事件的种类\"><a href=\"#一、事件的种类\" class=\"headerlink\" title=\"一、事件的种类\"></a>一、事件的种类</h4></blockquote>\n<h4 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h4><p><code>click</code>  <code>dbclick</code>  <code>mouseup</code>  <code>mousedown</code> <code>mousemove</code> <code>mouseover</code> <code>mouseenter</code>  <code>mouseout</code> <code>mouseleave</code></p>\n<h4 id=\"滚轮事件\"><a href=\"#滚轮事件\" class=\"headerlink\" title=\"滚轮事件\"></a>滚轮事件</h4><p><code>wheel</code></p>\n<h4 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h4><p><code>keydown</code>  <code>keypress</code>  <code>keyup</code></p>","more":"<h4 id=\"进度事件\"><a href=\"#进度事件\" class=\"headerlink\" title=\"进度事件\"></a>进度事件</h4><p><code>abort</code> <code>error</code> <code>load</code> <code>loadstart</code>  <code>loadend</code>  <code>progress</code>  <code>timeout</code>   </p>\n<h4 id=\"拖拽事件\"><a href=\"#拖拽事件\" class=\"headerlink\" title=\"拖拽事件\"></a>拖拽事件</h4><p><code>drag</code>  <code>dragstart</code>  <code>dragend</code>  <code>dragenter</code> <code>dragover</code> <code>dragleave</code>  <code>drop</code></p>\n<h4 id=\"触摸事件\"><a href=\"#触摸事件\" class=\"headerlink\" title=\"触摸事件\"></a>触摸事件</h4><p><code>touchstart</code>  <code>touchend</code>  <code>toumove</code>  <code>touchcancel</code></p>\n<h4 id=\"表单事件\"><a href=\"#表单事件\" class=\"headerlink\" title=\"表单事件\"></a>表单事件</h4><p><code>input</code>  <code>select</code>  <code>change</code>  <code>reset</code> <code>submit</code></p>\n<h4 id=\"文档事件\"><a href=\"#文档事件\" class=\"headerlink\" title=\"文档事件\"></a>文档事件</h4><p><code>load</code> <code>error</code> <code>pageshow</code> <code>pagelive</code> <code>DOMContentLoaded</code> <code>readystatechange</code> <code>scroll</code> <code>resize</code> <code>copy</code> <code>cut</code> <code>paste</code> <code>focus</code> <code>focusin</code> <code>focusout</code>  <code>blur</code>  <code>hashchange</code> <code>popstate</code></p>\n<blockquote>\n<h4 id=\"二、事件传播的三个阶段\"><a href=\"#二、事件传播的三个阶段\" class=\"headerlink\" title=\"二、事件传播的三个阶段\"></a>二、事件传播的三个阶段</h4></blockquote>\n<h5 id=\"1-捕获阶段\"><a href=\"#1-捕获阶段\" class=\"headerlink\" title=\"1.捕获阶段\"></a>1.捕获阶段</h5><p>从 <code>window</code> 对象传导到目标阶段的过程</p>\n<h5 id=\"2-目标阶段\"><a href=\"#2-目标阶段\" class=\"headerlink\" title=\"2.目标阶段\"></a>2.目标阶段</h5><p>当事件在目标节点出发的过程</p>\n<h5 id=\"3-冒泡阶段\"><a href=\"#3-冒泡阶段\" class=\"headerlink\" title=\"3.冒泡阶段\"></a>3.冒泡阶段</h5><p>从目标阶段传导回<code>window</code>对象的过程</p>\n<h4 id=\"代码示意：\"><a href=\"#代码示意：\" class=\"headerlink\" title=\"代码示意：\"></a>代码示意：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"> <span class=\"keyword\">var</span> phases = &#123;</div><div class=\"line\">   <span class=\"number\">1</span>: <span class=\"string\">'capture'</span>, <span class=\"comment\">//捕获阶段</span></div><div class=\"line\">   <span class=\"number\">2</span>: <span class=\"string\">'target'</span>, <span class=\"comment\">//当前</span></div><div class=\"line\">   <span class=\"number\">3</span>: <span class=\"string\">'bubble'</span> <span class=\"comment\">//冒泡</span></div><div class=\"line\"> &#125;;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'div'</span>);</div><div class=\"line\"> <span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>);</div><div class=\"line\"></div><div class=\"line\"> div.addEventListener(<span class=\"string\">'click'</span>, callback, <span class=\"literal\">true</span>); <span class=\"comment\">// 捕获</span></div><div class=\"line\"> p.addEventListener(<span class=\"string\">'click'</span>, callback, <span class=\"literal\">true</span>); <span class=\"comment\">//target</span></div><div class=\"line\"> div.addEventListener(<span class=\"string\">'click'</span>, callback, <span class=\"literal\">false</span>); <span class=\"comment\">// 冒泡</span></div><div class=\"line\"> p.addEventListener(<span class=\"string\">'click'</span>, callback, <span class=\"literal\">false</span>);  <span class=\"comment\">// target</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(event)</div><div class=\"line\">   <span class=\"keyword\">var</span> tag = event.currentTarget.tagName;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">var</span> phase = phases[event.eventPhase];</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Tag: '\"</span> + tag + <span class=\"string\">\"'. EventPhase: '\"</span> + phase + <span class=\"string\">\"'\"</span>);</div><div class=\"line\"> &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"图示：\"><a href=\"#图示：\" class=\"headerlink\" title=\"图示：\"></a>图示：</h4><p><img src=\"https://app.yinxiang.com/shard/s72/res/8d53d1e2-c43a-408c-9e3f-a10bef9354ae\" alt=\"Alt text\"></p>\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a><span style=\"color:red\">注意：</span></h4><h5 id=\"用户点击网页的时候，浏览器总是假定click事件的目标节点，就是点击位置的嵌套最深的那个节点（嵌套在-lt-div-gt-节点的-lt-p-gt-节点）。所以，-lt-p-gt-节点的捕获阶段和冒泡阶段，都会显示为target阶段。\"><a href=\"#用户点击网页的时候，浏览器总是假定click事件的目标节点，就是点击位置的嵌套最深的那个节点（嵌套在-lt-div-gt-节点的-lt-p-gt-节点）。所以，-lt-p-gt-节点的捕获阶段和冒泡阶段，都会显示为target阶段。\" class=\"headerlink\" title=\"用户点击网页的时候，浏览器总是假定click事件的目标节点，就是点击位置的嵌套最深的那个节点（嵌套在&lt;div&gt;节点的&lt;p&gt;节点）。所以，&lt;p&gt;节点的捕获阶段和冒泡阶段，都会显示为target阶段。\"></a>用户点击网页的时候，浏览器总是假定click事件的目标节点，就是点击位置的嵌套最深的那个节点（嵌套在<code>&lt;div&gt;</code>节点的<code>&lt;p&gt;</code>节点）。所以，<code>&lt;p&gt;</code>节点的捕获阶段和冒泡阶段，都会显示为target阶段。</h5><blockquote>\n<h4 id=\"三、事件代理\"><a href=\"#三、事件代理\" class=\"headerlink\" title=\"三、事件代理\"></a>三、事件代理</h4></blockquote>\n<h5 id=\"由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。\"><a href=\"#由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。\" class=\"headerlink\" title=\"由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。\"></a>由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"lis\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"pClick()\"</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'ul'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> lis = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#lis'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// lis 的监听函数</span></div><div class=\"line\"></div><div class=\"line\">lis.addEventListener(<span class=\"string\">'click'</span>, (event) =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这个是li的第一个监听函数'</span>)</div><div class=\"line\">  event.stopPropagation()  <span class=\"comment\">// 阻止当前事件向上冒泡  ，故 ul监听事件不执行</span></div><div class=\"line\">  event.stopImmediatePropagation()  <span class=\"comment\">//  event.stopPropagation只能阻止当前监听事件不冒，但是阻止不了其他监听事件 ，所以使用    event.stopImmediatePropagation</span></div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\">lis.addEventListener(<span class=\"string\">'click'</span>, (event) =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这个是li的第二个监听函数'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// p 元素的监听函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pClick</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这个是P元素的监听函数'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//   ul监听函数</span></div><div class=\"line\">ul.addEventListener(<span class=\"string\">'click'</span>, (event) =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'ul的第一个监听函数'</span>)</div><div class=\"line\">  <span class=\"comment\">// 事件代理 处理 子元素 p 的点击</span></div><div class=\"line\">  <span class=\"comment\">// if (event.target.tagName.toLowerCase() == \"p\") &#123;</span></div><div class=\"line\">  <span class=\"comment\">//   // p节点触发</span></div><div class=\"line\">  <span class=\"comment\">//   console.log('点击了P元素')</span></div><div class=\"line\">  <span class=\"comment\">//</span></div><div class=\"line\">  <span class=\"comment\">// &#125;</span></div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">ul.addEventListener(<span class=\"string\">'click'</span>, (event) =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'ul的第二个监听函数'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"stopPropagation-和-stopImmediatePropagation-区别-：\"><a href=\"#stopPropagation-和-stopImmediatePropagation-区别-：\" class=\"headerlink\" title=\"stopPropagation  和  stopImmediatePropagation 区别 ：\"></a><code>stopPropagation</code>  和  <code>stopImmediatePropagation</code> 区别 ：</h4><p>　　在事件处理程序中，每个事件处理程序中间都会有一个event对象，而这个event对象有两个方法，一个是stopPropagation方法，一个是stopImmediatePropagation方法，两个方法只差一个Immediate，这里就说说这两个方法的区别</p>\n<p>　　1、<code>stopImmediatePropagation</code>方法：</p>\n<p>　　　　stopImmediatePropagation方法作用在当前节点以及事件链上的所有后续节点上，目的是在执行完当前事件处理程序之后，停止当前节点以及所有后续节点的事件处理程序的运行</p>\n<p>　　2、<code>stopPropagation</code>方法</p>\n<p>　　　　stopPropagation方法作用在后续节点上，目的在执行完绑定到当前元素上的所有事件处理程序之后，停止执行所有后续节点的事件处理程序</p>\n<hr>\n\n<p>　从概念上讲，在调用完stopPropagation函数之后，就会立即停止对后续节点的访问，但是会执行完绑定到当前节点上的所有事件处理程序；而调用stopImmediatePropagation函数之后，除了所有后续节点，绑定到当前元素上的、当前事件处理程序之后的事件处理程序就不会再执行了</p>\n<p><hr></p>\n<h4 id=\"版权说明：\"><a href=\"#版权说明：\" class=\"headerlink\" title=\"版权说明：\"></a>版权说明：</h4><p>阮一峰大神 <a href=\"http://javascript.ruanyifeng.com/dom/event.html#toc8\" target=\"_blank\" rel=\"noopener\">javascript标准参考教程</a><br>超载的笨鸟 <a href=\"http://www.cnblogs.com/dqsBK/p/6287907.html\" target=\"_blank\" rel=\"noopener\">浅谈javascript中stopImmediatePropagation函数和stopPropagation函数的区别</a></p>"},{"title":"angular中的工具方法总结","date":"2017-03-02T11:37:43.000Z","keywords":"zhangyu,javascript,angular.forEach","_content":"\n##### 工具方法：\n***\n1. `angular.bind(obj1,obj)` ---改变this指向\n\t参数方法: `obj1`: 改变后this指向的对象  `obj`: 被改变的对象  \n\n\t```javascript\n\tfunction show (){\n\t\talert(this);\n\t}\n\tshow();\n\tangular.bind(document,show)();  //改变this指向  \n\t```\n<!-- more -->\n2. `angular.extend(a,b)` --- 继承方法\n\t参数方法：`a`:继承者  `b`:被继承\n\t````javascript\n\tvar a = {\n\t \tname:'hello'\n\t }\n\t var b = {\n\t \tage:'20'\n\t }\n\t var c = angular.extend(b,a) ;  //将a 给了 b\n\t console.log(c); // {name:'hello',age:'20'}\n\t````\n\n3. `angular.copy(a,b)` --- 拷贝方法\n\t参数方法：将a的所有值赋给了b，并且取代覆盖了b\n\t````javascript\n\t//结构代码同上\n\t var c = angular.copy(a,b);  \n\t console.log(c); // {name:'hello'}\n\t console.log(a); // {name:'hello'}\n\t console.log(b); // {name:'hello'}\n\t````\n4. `angular.isArray(需要判断的元素)` --是否为数组\n\n5. `angular.isDate()` --是否为日期对象\n\n6. `angular.isDefined()` --元素是否被定义\n\n7. `angular.isUnDefined()`  --元素是否未被定义\n\n8. `angular.isFunction()` --判断是否为function\n\n9. `angular.isNumber()`\n\n10. `angular.isObject()`\n\n11. `angular.isString()`\n\n12. `angular.isElement(元素)`\n\n13. `angular.version` -- 输出当前使用的angular版本\n\n14. `angular.forEach(obj,fn,result)`\n\t参数说明：`obj`:被便利的数组或者对象   `fn(value,i)`:遍历后的回调函数  `result`:想要返回的结果\n\n\t```javascript\n\tvar a = {\n\t\tname:'zhang',\n\t\tsex:'boy'\n\t}\n\tvar result = [] ;\n\n\tangular.forEach(a,function(value,i){\n\t\tconsole.log('value:'+value+'\\n'+'i:'+i);\n\t\tconsole.log(this) ; //this指的是结果数组\n\t\tthis.push(value);\n\t},result)\n\n\tconsole.log(result); // [zhang,boy];\n\t```\n\n15. `angular.fromJson/toJson` -- 对字符串格式的json 进行解析  和对json进行字符串转换，类似于原生JSON.parse()  JSON.stringify()\n\n\t```javascript\n\t//angular.fromJson()\n\tvar str = '{\"name\":\"hello\",\"age\":\"18\"}' ;\n\tvar json = angular.fromJson(str);\n\tconsole.log(json); // {name:hello,age:18}\n\t//angular.toJson()\n\tvar json = {\"name\":\"hello\",\"age\":\"18\"};\n\tvar str = angular.toJson(json,true);  //true:表示按照格式打印\n\tconsole.log(str) // \"{\"name\":\"hello\",\"age\":\"18\"}\"\n\t```\n\n16. `angular.lowercase()/uppercase()`  -- 大小写转换\n\n17. `angular.element()` -- angular 中封装的jq方法  具体方法参考[angular文档](https://docs.angularjs.org/api/ng/function/angular.element)\n\t```javascript\n\tvar oDiv = document.getElementById('div');\n\tangular.element(oDiv).css('backgroud','red')\n\t```\n\t```html\n\t<div id='div'></div>\n\t```\n\n18. `angular.bootstrap` --angular 动态初始化angular 相同于 指令`ng-app`\n\t好处:可以在想要初始化的时候去执行初始化,针对多个angular初始化会同时初始化\n\t```javascript\n\tangular.bootstrap(document,['myapp','myapp1'])\n\t```\n\n19. `angular.injector` -- 在angular内部使用，注册器\n","source":"_posts/angular-gongjufangfa.md","raw":"---\ntitle: angular中的工具方法总结\ndate: 2017-03-02 19:37:43\nkeywords: zhangyu,javascript,angular.forEach\ntags:\n- angular\ncategories:\n- Angular\n---\n\n##### 工具方法：\n***\n1. `angular.bind(obj1,obj)` ---改变this指向\n\t参数方法: `obj1`: 改变后this指向的对象  `obj`: 被改变的对象  \n\n\t```javascript\n\tfunction show (){\n\t\talert(this);\n\t}\n\tshow();\n\tangular.bind(document,show)();  //改变this指向  \n\t```\n<!-- more -->\n2. `angular.extend(a,b)` --- 继承方法\n\t参数方法：`a`:继承者  `b`:被继承\n\t````javascript\n\tvar a = {\n\t \tname:'hello'\n\t }\n\t var b = {\n\t \tage:'20'\n\t }\n\t var c = angular.extend(b,a) ;  //将a 给了 b\n\t console.log(c); // {name:'hello',age:'20'}\n\t````\n\n3. `angular.copy(a,b)` --- 拷贝方法\n\t参数方法：将a的所有值赋给了b，并且取代覆盖了b\n\t````javascript\n\t//结构代码同上\n\t var c = angular.copy(a,b);  \n\t console.log(c); // {name:'hello'}\n\t console.log(a); // {name:'hello'}\n\t console.log(b); // {name:'hello'}\n\t````\n4. `angular.isArray(需要判断的元素)` --是否为数组\n\n5. `angular.isDate()` --是否为日期对象\n\n6. `angular.isDefined()` --元素是否被定义\n\n7. `angular.isUnDefined()`  --元素是否未被定义\n\n8. `angular.isFunction()` --判断是否为function\n\n9. `angular.isNumber()`\n\n10. `angular.isObject()`\n\n11. `angular.isString()`\n\n12. `angular.isElement(元素)`\n\n13. `angular.version` -- 输出当前使用的angular版本\n\n14. `angular.forEach(obj,fn,result)`\n\t参数说明：`obj`:被便利的数组或者对象   `fn(value,i)`:遍历后的回调函数  `result`:想要返回的结果\n\n\t```javascript\n\tvar a = {\n\t\tname:'zhang',\n\t\tsex:'boy'\n\t}\n\tvar result = [] ;\n\n\tangular.forEach(a,function(value,i){\n\t\tconsole.log('value:'+value+'\\n'+'i:'+i);\n\t\tconsole.log(this) ; //this指的是结果数组\n\t\tthis.push(value);\n\t},result)\n\n\tconsole.log(result); // [zhang,boy];\n\t```\n\n15. `angular.fromJson/toJson` -- 对字符串格式的json 进行解析  和对json进行字符串转换，类似于原生JSON.parse()  JSON.stringify()\n\n\t```javascript\n\t//angular.fromJson()\n\tvar str = '{\"name\":\"hello\",\"age\":\"18\"}' ;\n\tvar json = angular.fromJson(str);\n\tconsole.log(json); // {name:hello,age:18}\n\t//angular.toJson()\n\tvar json = {\"name\":\"hello\",\"age\":\"18\"};\n\tvar str = angular.toJson(json,true);  //true:表示按照格式打印\n\tconsole.log(str) // \"{\"name\":\"hello\",\"age\":\"18\"}\"\n\t```\n\n16. `angular.lowercase()/uppercase()`  -- 大小写转换\n\n17. `angular.element()` -- angular 中封装的jq方法  具体方法参考[angular文档](https://docs.angularjs.org/api/ng/function/angular.element)\n\t```javascript\n\tvar oDiv = document.getElementById('div');\n\tangular.element(oDiv).css('backgroud','red')\n\t```\n\t```html\n\t<div id='div'></div>\n\t```\n\n18. `angular.bootstrap` --angular 动态初始化angular 相同于 指令`ng-app`\n\t好处:可以在想要初始化的时候去执行初始化,针对多个angular初始化会同时初始化\n\t```javascript\n\tangular.bootstrap(document,['myapp','myapp1'])\n\t```\n\n19. `angular.injector` -- 在angular内部使用，注册器\n","slug":"angular-gongjufangfa","published":1,"updated":"2018-03-08T02:38:09.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc7a000wrexm7cae5aqx","content":"<h5 id=\"工具方法：\"><a href=\"#工具方法：\" class=\"headerlink\" title=\"工具方法：\"></a>工具方法：</h5><hr>\n<ol>\n<li><p><code>angular.bind(obj1,obj)</code> —改变this指向<br> 参数方法: <code>obj1</code>: 改变后this指向的对象  <code>obj</code>: 被改变的对象  </p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">show();</div><div class=\"line\">angular.bind(<span class=\"built_in\">document</span>,show)();  <span class=\"comment\">//改变this指向</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li><p><code>angular.extend(a,b)</code> — 继承方法<br> 参数方法：<code>a</code>:继承者  <code>b</code>:被继承</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\"> \t<span class=\"attr\">name</span>:<span class=\"string\">'hello'</span></div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">var</span> b = &#123;</div><div class=\"line\"> \t<span class=\"attr\">age</span>:<span class=\"string\">'20'</span></div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">var</span> c = angular.extend(b,a) ;  <span class=\"comment\">//将a 给了 b</span></div><div class=\"line\"> <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// &#123;name:'hello',age:'20'&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>angular.copy(a,b)</code> — 拷贝方法<br> 参数方法：将a的所有值赋给了b，并且取代覆盖了b</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//结构代码同上</span></div><div class=\"line\"> <span class=\"keyword\">var</span> c = angular.copy(a,b);  </div><div class=\"line\"> <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// &#123;name:'hello'&#125;</span></div><div class=\"line\"> <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// &#123;name:'hello'&#125;</span></div><div class=\"line\"> <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// &#123;name:'hello'&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>angular.isArray(需要判断的元素)</code> –是否为数组</p>\n</li>\n<li><p><code>angular.isDate()</code> –是否为日期对象</p>\n</li>\n<li><p><code>angular.isDefined()</code> –元素是否被定义</p>\n</li>\n<li><p><code>angular.isUnDefined()</code>  –元素是否未被定义</p>\n</li>\n<li><p><code>angular.isFunction()</code> –判断是否为function</p>\n</li>\n<li><p><code>angular.isNumber()</code></p>\n</li>\n<li><p><code>angular.isObject()</code></p>\n</li>\n<li><p><code>angular.isString()</code></p>\n</li>\n<li><p><code>angular.isElement(元素)</code></p>\n</li>\n<li><p><code>angular.version</code> – 输出当前使用的angular版本</p>\n</li>\n<li><p><code>angular.forEach(obj,fn,result)</code><br>参数说明：<code>obj</code>:被便利的数组或者对象   <code>fn(value,i)</code>:遍历后的回调函数  <code>result</code>:想要返回的结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">'zhang'</span>,</div><div class=\"line\">\t<span class=\"attr\">sex</span>:<span class=\"string\">'boy'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> result = [] ;</div><div class=\"line\"></div><div class=\"line\">angular.forEach(a,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,i</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'value:'</span>+value+<span class=\"string\">'\\n'</span>+<span class=\"string\">'i:'</span>+i);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>) ; <span class=\"comment\">//this指的是结果数组</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.push(value);</div><div class=\"line\">&#125;,result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [zhang,boy];</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>angular.fromJson/toJson</code> – 对字符串格式的json 进行解析  和对json进行字符串转换，类似于原生JSON.parse()  JSON.stringify()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//angular.fromJson()</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'&#123;\"name\":\"hello\",\"age\":\"18\"&#125;'</span> ;</div><div class=\"line\"><span class=\"keyword\">var</span> json = angular.fromJson(str);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(json); <span class=\"comment\">// &#123;name:hello,age:18&#125;</span></div><div class=\"line\"><span class=\"comment\">//angular.toJson()</span></div><div class=\"line\"><span class=\"keyword\">var</span> json = &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"age\"</span>:<span class=\"string\">\"18\"</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> str = angular.toJson(json,<span class=\"literal\">true</span>);  <span class=\"comment\">//true:表示按照格式打印</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(str) <span class=\"comment\">// \"&#123;\"name\":\"hello\",\"age\":\"18\"&#125;\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>angular.lowercase()/uppercase()</code>  – 大小写转换</p>\n</li>\n<li><p><code>angular.element()</code> – angular 中封装的jq方法  具体方法参考<a href=\"https://docs.angularjs.org/api/ng/function/angular.element\" target=\"_blank\" rel=\"noopener\">angular文档</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>);</div><div class=\"line\">angular.element(oDiv).css(<span class=\"string\">'backgroud'</span>,<span class=\"string\">'red'</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'div'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>angular.bootstrap</code> –angular 动态初始化angular 相同于 指令<code>ng-app</code><br>好处:可以在想要初始化的时候去执行初始化,针对多个angular初始化会同时初始化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.bootstrap(<span class=\"built_in\">document</span>,[<span class=\"string\">'myapp'</span>,<span class=\"string\">'myapp1'</span>])</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>angular.injector</code> – 在angular内部使用，注册器</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h5 id=\"工具方法：\"><a href=\"#工具方法：\" class=\"headerlink\" title=\"工具方法：\"></a>工具方法：</h5><hr>\n<ol>\n<li><p><code>angular.bind(obj1,obj)</code> —改变this指向<br> 参数方法: <code>obj1</code>: 改变后this指向的对象  <code>obj</code>: 被改变的对象  </p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">show();</div><div class=\"line\">angular.bind(<span class=\"built_in\">document</span>,show)();  <span class=\"comment\">//改变this指向</span></div></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol>\n<li><p><code>angular.extend(a,b)</code> — 继承方法<br> 参数方法：<code>a</code>:继承者  <code>b</code>:被继承</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\"> \t<span class=\"attr\">name</span>:<span class=\"string\">'hello'</span></div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">var</span> b = &#123;</div><div class=\"line\"> \t<span class=\"attr\">age</span>:<span class=\"string\">'20'</span></div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">var</span> c = angular.extend(b,a) ;  <span class=\"comment\">//将a 给了 b</span></div><div class=\"line\"> <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// &#123;name:'hello',age:'20'&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>angular.copy(a,b)</code> — 拷贝方法<br> 参数方法：将a的所有值赋给了b，并且取代覆盖了b</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//结构代码同上</span></div><div class=\"line\"> <span class=\"keyword\">var</span> c = angular.copy(a,b);  </div><div class=\"line\"> <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// &#123;name:'hello'&#125;</span></div><div class=\"line\"> <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// &#123;name:'hello'&#125;</span></div><div class=\"line\"> <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// &#123;name:'hello'&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>angular.isArray(需要判断的元素)</code> –是否为数组</p>\n</li>\n<li><p><code>angular.isDate()</code> –是否为日期对象</p>\n</li>\n<li><p><code>angular.isDefined()</code> –元素是否被定义</p>\n</li>\n<li><p><code>angular.isUnDefined()</code>  –元素是否未被定义</p>\n</li>\n<li><p><code>angular.isFunction()</code> –判断是否为function</p>\n</li>\n<li><p><code>angular.isNumber()</code></p>\n</li>\n<li><p><code>angular.isObject()</code></p>\n</li>\n<li><p><code>angular.isString()</code></p>\n</li>\n<li><p><code>angular.isElement(元素)</code></p>\n</li>\n<li><p><code>angular.version</code> – 输出当前使用的angular版本</p>\n</li>\n<li><p><code>angular.forEach(obj,fn,result)</code><br>参数说明：<code>obj</code>:被便利的数组或者对象   <code>fn(value,i)</code>:遍历后的回调函数  <code>result</code>:想要返回的结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">'zhang'</span>,</div><div class=\"line\">\t<span class=\"attr\">sex</span>:<span class=\"string\">'boy'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> result = [] ;</div><div class=\"line\"></div><div class=\"line\">angular.forEach(a,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,i</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'value:'</span>+value+<span class=\"string\">'\\n'</span>+<span class=\"string\">'i:'</span>+i);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>) ; <span class=\"comment\">//this指的是结果数组</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.push(value);</div><div class=\"line\">&#125;,result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [zhang,boy];</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>angular.fromJson/toJson</code> – 对字符串格式的json 进行解析  和对json进行字符串转换，类似于原生JSON.parse()  JSON.stringify()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//angular.fromJson()</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'&#123;\"name\":\"hello\",\"age\":\"18\"&#125;'</span> ;</div><div class=\"line\"><span class=\"keyword\">var</span> json = angular.fromJson(str);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(json); <span class=\"comment\">// &#123;name:hello,age:18&#125;</span></div><div class=\"line\"><span class=\"comment\">//angular.toJson()</span></div><div class=\"line\"><span class=\"keyword\">var</span> json = &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"age\"</span>:<span class=\"string\">\"18\"</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> str = angular.toJson(json,<span class=\"literal\">true</span>);  <span class=\"comment\">//true:表示按照格式打印</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(str) <span class=\"comment\">// \"&#123;\"name\":\"hello\",\"age\":\"18\"&#125;\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>angular.lowercase()/uppercase()</code>  – 大小写转换</p>\n</li>\n<li><p><code>angular.element()</code> – angular 中封装的jq方法  具体方法参考<a href=\"https://docs.angularjs.org/api/ng/function/angular.element\" target=\"_blank\" rel=\"noopener\">angular文档</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>);</div><div class=\"line\">angular.element(oDiv).css(<span class=\"string\">'backgroud'</span>,<span class=\"string\">'red'</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'div'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>angular.bootstrap</code> –angular 动态初始化angular 相同于 指令<code>ng-app</code><br>好处:可以在想要初始化的时候去执行初始化,针对多个angular初始化会同时初始化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.bootstrap(<span class=\"built_in\">document</span>,[<span class=\"string\">'myapp'</span>,<span class=\"string\">'myapp1'</span>])</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>angular.injector</code> – 在angular内部使用，注册器</p>\n</li>\n</ol>"},{"title":"vue  导航","date":"2017-05-23T02:57:18.000Z","_content":"\n>学习工具\n![Alt text](https://app.yinxiang.com/shard/s72/res/61f82848-a4be-4740-bef7-325f4d827e76)\n\n>三个特点\n\n- 响应式-双响数据绑定\n- 单文件组件\n-\n<!-- more -->\n\n>脚手架安装\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/d827d45b-e1b4-485e-8267-c0d68e138443)\n\n1. 当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。**当这些数据改变时，视图会进行重渲染。**\n\n```javascript\n// 我们的数据对象\nvar data = { a: 1 }\n// 该对象被加入到一个 Vue 实例中\nvar vm = new Vue({\n  data: data\n})\n// 他们引用相同的对象！\nvm.a === data.a // => true\n// 设置属性也会影响到原始数据\nvm.a = 2\ndata.a // => 2\n// ... 反之亦然\ndata.a = 3\nvm.a // => 3\n```\n\n> 生命周期：每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如需要设置数据监听、编译模板、挂载实例到 DOM、在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，给予用户机会在一些特定的场景下添加他们自己的代码。\n\n比如 created 钩子可以用来在一个实例被创建之后执行代码：\n\n```javascript\nnew Vue({\n  data: {\n    a: 1\n  },\n  created: function () {\n    // `this` 指向 vm 实例\n    console.log('a is: ' + this.a)\n  }\n})\n// => \"a is: 1\"\n```\n*** 也有一些其它的钩子，在实例生命周期的不同场景下调用，如 mounted、updated、destroyed。钩子的 this 指向调用它的 Vue 实例。***\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/60a600bf-fb6b-4b92-9641-094df5ba02e1)\n","source":"_posts/vue-导航.md","raw":"---\ntitle: vue  导航\ndate: 2017-05-23 10:57:18\ntags:\n- vuejs\ncategories:\n- VUE\n---\n\n>学习工具\n![Alt text](https://app.yinxiang.com/shard/s72/res/61f82848-a4be-4740-bef7-325f4d827e76)\n\n>三个特点\n\n- 响应式-双响数据绑定\n- 单文件组件\n-\n<!-- more -->\n\n>脚手架安装\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/d827d45b-e1b4-485e-8267-c0d68e138443)\n\n1. 当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。**当这些数据改变时，视图会进行重渲染。**\n\n```javascript\n// 我们的数据对象\nvar data = { a: 1 }\n// 该对象被加入到一个 Vue 实例中\nvar vm = new Vue({\n  data: data\n})\n// 他们引用相同的对象！\nvm.a === data.a // => true\n// 设置属性也会影响到原始数据\nvm.a = 2\ndata.a // => 2\n// ... 反之亦然\ndata.a = 3\nvm.a // => 3\n```\n\n> 生命周期：每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如需要设置数据监听、编译模板、挂载实例到 DOM、在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，给予用户机会在一些特定的场景下添加他们自己的代码。\n\n比如 created 钩子可以用来在一个实例被创建之后执行代码：\n\n```javascript\nnew Vue({\n  data: {\n    a: 1\n  },\n  created: function () {\n    // `this` 指向 vm 实例\n    console.log('a is: ' + this.a)\n  }\n})\n// => \"a is: 1\"\n```\n*** 也有一些其它的钩子，在实例生命周期的不同场景下调用，如 mounted、updated、destroyed。钩子的 this 指向调用它的 Vue 实例。***\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/60a600bf-fb6b-4b92-9641-094df5ba02e1)\n","slug":"vue-导航","published":1,"updated":"2018-03-08T02:50:49.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc7b000zrexm8um35xac","content":"<blockquote>\n<p>学习工具<br><img src=\"https://app.yinxiang.com/shard/s72/res/61f82848-a4be-4740-bef7-325f4d827e76\" alt=\"Alt text\"></p>\n<p>三个特点</p>\n</blockquote>\n<ul>\n<li>响应式-双响数据绑定</li>\n<li>单文件组件<br>-<a id=\"more\"></a>\n</li>\n</ul>\n<blockquote>\n<p>脚手架安装</p>\n</blockquote>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/d827d45b-e1b4-485e-8267-c0d68e138443\" alt=\"Alt text\"></p>\n<ol>\n<li>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。<strong>当这些数据改变时，视图会进行重渲染。</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 我们的数据对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"comment\">// 该对象被加入到一个 Vue 实例中</span></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: data</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 他们引用相同的对象！</span></div><div class=\"line\">vm.a === data.a <span class=\"comment\">// =&gt; true</span></div><div class=\"line\"><span class=\"comment\">// 设置属性也会影响到原始数据</span></div><div class=\"line\">vm.a = <span class=\"number\">2</span></div><div class=\"line\">data.a <span class=\"comment\">// =&gt; 2</span></div><div class=\"line\"><span class=\"comment\">// ... 反之亦然</span></div><div class=\"line\">data.a = <span class=\"number\">3</span></div><div class=\"line\">vm.a <span class=\"comment\">// =&gt; 3</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>生命周期：每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如需要设置数据监听、编译模板、挂载实例到 DOM、在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，给予用户机会在一些特定的场景下添加他们自己的代码。</p>\n</blockquote>\n<p>比如 created 钩子可以用来在一个实例被创建之后执行代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// `this` 指向 vm 实例</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a is: '</span> + <span class=\"keyword\">this</span>.a)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// =&gt; \"a is: 1\"</span></div></pre></td></tr></table></figure>\n<p><strong><em> 也有一些其它的钩子，在实例生命周期的不同场景下调用，如 mounted、updated、destroyed。钩子的 this 指向调用它的 Vue 实例。</em></strong></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/60a600bf-fb6b-4b92-9641-094df5ba02e1\" alt=\"Alt text\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>学习工具<br><img src=\"https://app.yinxiang.com/shard/s72/res/61f82848-a4be-4740-bef7-325f4d827e76\" alt=\"Alt text\"></p>\n<p>三个特点</p>\n</blockquote>\n<ul>\n<li>响应式-双响数据绑定</li>\n<li>单文件组件<br>-","more":"</li>\n</ul>\n<blockquote>\n<p>脚手架安装</p>\n</blockquote>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/d827d45b-e1b4-485e-8267-c0d68e138443\" alt=\"Alt text\"></p>\n<ol>\n<li>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。<strong>当这些数据改变时，视图会进行重渲染。</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 我们的数据对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"comment\">// 该对象被加入到一个 Vue 实例中</span></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: data</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 他们引用相同的对象！</span></div><div class=\"line\">vm.a === data.a <span class=\"comment\">// =&gt; true</span></div><div class=\"line\"><span class=\"comment\">// 设置属性也会影响到原始数据</span></div><div class=\"line\">vm.a = <span class=\"number\">2</span></div><div class=\"line\">data.a <span class=\"comment\">// =&gt; 2</span></div><div class=\"line\"><span class=\"comment\">// ... 反之亦然</span></div><div class=\"line\">data.a = <span class=\"number\">3</span></div><div class=\"line\">vm.a <span class=\"comment\">// =&gt; 3</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>生命周期：每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如需要设置数据监听、编译模板、挂载实例到 DOM、在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，给予用户机会在一些特定的场景下添加他们自己的代码。</p>\n</blockquote>\n<p>比如 created 钩子可以用来在一个实例被创建之后执行代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// `this` 指向 vm 实例</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a is: '</span> + <span class=\"keyword\">this</span>.a)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// =&gt; \"a is: 1\"</span></div></pre></td></tr></table></figure>\n<p><strong><em> 也有一些其它的钩子，在实例生命周期的不同场景下调用，如 mounted、updated、destroyed。钩子的 this 指向调用它的 Vue 实例。</em></strong></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/60a600bf-fb6b-4b92-9641-094df5ba02e1\" alt=\"Alt text\"></p>"},{"title":"移动端web页面调试方法","date":"2017-05-07T13:54:56.000Z","_content":"<h1 style=\"color:green;width: 100%;text-align: center \">移动端web调试方法</h1>\n### *前言\n\n\n<!-- more -->\n> <div style=\"color:#D00750\">移动端调试不同于桌面端调试，在桌面时代，chrome的调试器已经无比强大。但是在手机上调试web页面就没有这么原始的方式了。\n  本文就如何调试移动端web页面，借鉴了一些博文和目前市面上好用的工具，针对移动端web页面以及APP内嵌webview页面如何调试做了一个试用和整理。\n  先谈谈需求。\n  最理想的方式是什么？</div>\n\n#### 一.ios设备下\n1. H5页面\n2. webview页面\n\n#### 二.安卓设备\n1. H5页面\n2. webview页面\n\n\n 最理想的状态就是在上述四种情况下，H5页面在各种浏览器下都可以进行调试，且调试的方式跟PC chrome类似，包含js断点调试。webview页面在微信以及公司的APP产品内可以进行类似PC chrome类似的调试方式，包含js断点调试。\n\n\n--------------------------------\n--------------------------------\n### <span style=\"color:red\">IOS 设备</span>\n> 1、 ios safari + mac safari + iphone真机\n#### 调试safari浏览器的H5页面\n启用功能：\n\n手机端：设置 → Safari → 高级 → Web 检查器 → 开。\n\nmac端：Safari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单。\n\n然后就可以在电脑端调试iphone上的safari浏览器上的样式。在调试器及资源里可以对js打断点。操作方式跟chrome的调试器一样。不同的是我们是在手机上对页面进行操作，触发断点环境会更真实。\n\n若在js中埋入一些console，在IOS真机上执行一些操作，mac端safari上调试器能打印，这能极大的方便复杂手势的一些操作。\n\n#### 优点：包含js断点功能，调试方式跟桌面端chrome几乎一样\n#### 缺点：只能在手机上的safari浏览器上操作，不能覆盖其他手机环境，另外也不支持webview的调试。\n> 2、 万金油 weinre + 真机\n#### 调试任意浏览器的H5页面以及webview页面\n\n使用场景：有些时候样式在桌面chrome模拟是好的，但是在部分webview或者真机上就有问题。\n\n#### . 第一步：npm install -g weinre\n#### . 第二步：weinre –boundHost xx ip\n#### . 类似于weinre –boundHost 172.16.28.162\n#### . 第三步：此时weinre会返回一个可用的地址\n\n````javscript\n\n2015-12-14T03:58:50.349Z weinre: starting server at http://10.1.2.77:8080\n\n````\n也可以指定端口号\n#### `weinre --httpPort 8081 --boundHost 172.16.28.162`\n#### . 第四步：可以访问之前weinre分配过来的地址，进入后在页面最上部分可以看到 `Access Points` 下的 `debug client user interface http://10.1.2.77:8080/client/#anonymous`\n\n\n![效果](http://cdn1.showjoy.com/images/9a/9a259c3bbf5d438399842c11d53054c9.png)\n\n这是之后要点击的链接 ，我们先往当前网页下方看。可以看到 `Target Script`栏目\n\n\n\n![效果](http://cdn1.showjoy.com/images/ad/add8ce371e0e4f52898fe4f652427f50.png)\n\n我们需要将`Example`的`script`标签复制粘贴到需要调试的项目中去。\n#### . 第五步：开启本地静态服务器（XMAPP等），进入到需要调试的项目的页面，例如`http://10.1.2.77:8000/index.html`我是利用`nodejs`开的一个小型服务器。\n![XI](http://cdn1.showjoy.com/images/d5/d53d31ba1bcd41749446ae158e923ed8.png)\n#### . 第六步：此时可以回到第四步中的weine分配给你的地址，\n![SA](http://cdn1.showjoy.com/images/42/42eadf2d9af545629e14387a9c6c64bf.png)\n点击第一条`debug client user interface: http://10.1.2.77:8080/client/#anonymous`,进入预备调试页面。\n#### . 第七步：在预备调试页面我们可以看到\n![asd](http://cdn1.showjoy.com/images/ca/ca2a26ecf08d4eca807ea1ec2374eee9.png)\n`Targets`下有一条可以选择的调试页面，对应着刚刚在本地静态服务器中打开的页面。但是这个页面是PC的，现在我们通过手机（浏览器、APP、微信等）进入这个项目ip地址`http://10.1.2.77:8000/index.html`\n此时预备调试页面将会出现两条可调试地址\n![as](http://cdn1.showjoy.com/images/42/426b2c9ab5504cc18c77b1da504e7270.png)\n选择手机端进入后新增的地址。\n#### .第八步：点开链接后链接状态从蓝色变成绿色，然后再点击页面左上角的Element按钮。\n![a](http://cdn1.showjoy.com/images/ae/ae11cb7dc7034bc4981503af603c6300.png)\n现在就可以在pc端调试，手机端直接显示修改的变化啦。\n\n#### 优点：为何称weinre为万金油呢？因为只要在需要调试的项目的文件中引入weinre给出的<scrip 标签，再配合本地静态服务器的ip。可以在任何ios或安卓机型的包括浏览器和app的webview中去调试。\n\n#### 缺点： weinre不支持js的断点调试，这是一个缺憾，并且要在项目中引入额外的调试js标签。\n但是对于js断点，可以在js逻辑中埋入console，然后在手机端真实操作，再在pc端的调试器中查看打印信息这种方式来代替。\n\n> 3、MIHTool\n#### 调试chrome safari浏览器的H5页面\n注意关闭翻墙代理噢。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于weinre 开发的一款APP， 只针对ios手机。大概使用方式是在APP内打开需要调试的页面，相应的在pc端浏览器会出现调试器，方可进行调试。\n使用MIHTool的最大优点之一在于不需要显式的引入调试所需的脚本。在此基础上，作者还增加了一些方便的功能。\n\n#### 1. Performance API.\n#### 2. Polyfill管理器(模拟javascript与Native App互相调用,demo)\n#### 3. NPM Modules (在 web inspector console 里通过 require() 加载 npm 模块)\n\n具体可以看官网：<a href=\"http://www.mihtool.com/\">http://www.mihtool.com/</a>\n\n> 4、ios模拟器 + mac safari\n\n#### 调试safari浏览器的H5页面（可进行js断点调试）\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在没有真机的情况下，可以采用模拟机的方式去运行ios系统下的safari浏览器，然后在safari浏览器内输入想要调试的页面。当然模拟ios系统必须在Xcode这个开发软件下进行。一旦在Xcode里开启了模拟机，再进入模拟机里的safari，之后按照上边介绍过的真机 safari + mac safari介绍的方式进行操作便可。\n\n![a](http://cdn1.showjoy.com/images/ab/ab12718e529e4f03b1e17091e592b694.png)\n\n> 5、ios模拟器 + mac safari\n\n#### 调试公司APP内的webview页面（可进行js断点调试）\n\n参考 <a href=\"https://github.com/paulirish/iOS-WebView-App\">https://github.com/paulirish/iOS-WebView-App</a>，因为不懂IOS开发，也不知道是如何进行的，但大概是在iOS项目内写一些方法抛出一个地址，然后在mac上的safari开发模式内识别出这个地址，然后就可以调试的。默认情况下，mac safari只能识别usb连接的ios设备上的safari浏览器上的H5页面。（上面介绍过）\n\n\n===========================================\n===========================================\n\n### <span style=\"color:red\">Android 设备</span>\n\n> 1、Android chrome 真机 + pc chrome\n\n#### 调试移动端浏览器的H5页面（可进行js断点调试）\n\n在安卓4.4版本以下的安卓机子，手机上安装了chrome的情况下，并且打开需要调试的页面，可以打开usb开发者模式，在pc端chrome地址栏输入chrome://inspect便可找到相应的手机的相应打开wap页面。调试方法跟pc chrome几乎一致。\n\n在第一次使用的时候点击inspect会弹出空白的调试页面，这个时候需要翻墙，再点inspect才会出现正常的调试页面。\n\n#### 优点：可进行js断点调试。\n#### 缺点：浏览器限制。\n\n#### 调试公司APP内的webview页面（可进行js断点调试）\n\n在安卓4.4版本以上的安卓机子，手机通过usb连接mac电脑后，手机打开usb开发者模式后，在电脑chrome的chrome://inspect页面里会找到除了手机浏览器打开的页面，还会找到App内打开的webview的页面。\n\n![a](http://cdn1.showjoy.com/images/ce/ce98e4652b7f47c99612a3081e4e785f.png)\n\n点开`inspect`就是一个调试界面。\n\n进行webview页面的调试 需要在应用的代码内设置才能生效（根据<a href=\"https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md#%E8%B0%83%E8%AF%95-webviews\">https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md#%E8%B0%83%E8%AF%95-webviews</a>）\n\n\n> 2、Android 模拟机 + pc chrome\n\n&nbsp;&nbsp;&nbsp;&nbsp;安卓模拟机配置成功的情况下调试的方式跟上面1方法是一样的，在安卓4.4版本以上才能进行webview的调试。\n&nbsp;&nbsp;&nbsp;&nbsp;下面就介绍下大名鼎鼎的安卓模拟器genymotion.个人使用是免费的。\n\n1. 在其官网注册（必须）https://www.genymotion.com/\n2. 在其官网下载最新的软件，下载完将genymotion和genymotion shell都放到应用程序内。\n3. 下完这个之后还需要下载virtualBox，https://www.virtualbox.org/wiki/Downloads\n4. 之后就可以选择不同版本的模拟器了，网上的教程都是推荐下载安卓4.3版本，因为4.3版本有对应的补丁，装上后可以避免一些应用下载失败。但4.3版本不支持调试webview。我推荐下载 HTC one 4.4.4版本，本人试了很多版本，只有这个可以调试我司App内嵌的H5页面。\n\n![a](http://cdn1.showjoy.com/images/b3/b38d848454e34984a0436989c4847139.png)\n\n推荐一个专门讲解genymotion的资源。\n<a href=\"http://www.ziliao1.com/Article/Show/DCDFC03FE4902A1AC353C74695DAC2E9.html\">http://www.ziliao1.com/Article/Show/DCDFC03FE4902A1AC353C74695DAC2E9.html</a>\n以及模拟机版本下载失败的解决办法\n<a href=\"http://www.cnblogs.com/wliangde/p/3678649.html\">http://www.cnblogs.com/wliangde/p/3678649.html</a>\n\n> 3、万金油 weinre + pc chrome\n\n#### 调试任意浏览器的H5页面以及webview页面\n\n这个方法在之上iOS 部分已经讲解过了。weinre通吃安卓与ios，兼容性不要太高。\n\n> 4、微信调试\n\n#### 调试微信客户端的webview页面（支持js断点调试）\n\n目前微信已经出了官方的调试工具，照着做就好了。\n<a href=\"http://blog.qqbrowser.cc/\">http://blog.qqbrowser.cc/</a>\n\n> 5、UC浏览器 + 真机 + mac chrome\n\n#### 调试uc浏览器的H5页面（支持js断点）\n\n方法一是真机加上chrome浏览器，这个方法是真机加uc浏览器，\n<a href=\"http://www.uc.cn/business/developer/\">http://www.uc.cn/business/developer/</a>\n\n\n++++++++++++++++++++++++++++++++++\n++++++++++++++++++++++++++++++++++\n\n<span style=\"color:red\">总结</span>\n\n#### 上面罗列的多种方法，在本地开发的情况下基本都已经覆盖到了。但是如果线上页面出现bug了。该怎么办？最快的方法直接对线上页面进行调试。\n先介绍一下mac抓包工具`charles`\n\n<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=400497314&idx=1&sn=850fad741fdb635c2403bafb2f1e636f&scene=1&srcid=1119TqsnfhBHSKzA2BUja9mk&key=ac89cba618d2d97693fea624e810ff69a7385f5209ab2a26ec029ca8f618e760e87de444299655bad41c5d1a7dbbc76e&ascene=0&uin=Mjg1NTY1OTY2MA%3D%3D&devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.10.4+build(14E46\">charles 教程</a>\n\n\n1、截取http网络封包\n2、支持修改网络请求参数\n3、支持网络请求的截获并动态修改\n4、支持重发网络请求\n5、模拟网速网络\n\n刚刚给出的链接中有charles的全方位解读，我这里就简单介绍下http网络封包。\n\n在pc上charles可以很容易的创建一个代理，将设定的一部分网络请求全部转到charles代理上，并且可以将其中某个资源map到本地，从而实现使用本地代码调试线上代码的功能。\n\n但是我们现在是调试手机等移动端设备，但稍微做一些设置，就可以实现通过pc上的charles去代理移动端去请求资源。然后将需要的资源map到本地，进行修改和调试。\n\n这样设置过后的效果就是，在pc端修改代码，移动端线上的页面去请求本地修改后的代码并展示。\n\n讲完了charles,问题回到如何快速调试线上页面。\n\n#### 如果是H5页面\n遇上H5页面在PCchrome调试器上跟真实手机上的效果不一致时，可以使用万金油weinre，结合charles，就可以调试这种机型各种浏览器上的问题了。当然也可以使用上面提到的其他方法，都是适用的。\n\n#### 如果是webview\n同样不能少的是charles抓包，如果是安卓可以配合genymotion模拟器进行模拟。使用方法上文讲述过，再推荐一篇专门的文章：http://div.io/topic/1449。这篇文章讲到如何用charles监听genymotion。\n如果是ios，也可以采用这样的方式，即模拟器+charles+mac safari。使用方法在上文的ios章节讲述过。\n当然也是可以使用万金油weinre。weinre+charles调试App内的H5页面也是很方便的。跟上面两种方法比较，缺少的就是js断点调试功能。\n\n\n\n\n===========================================\n\n\n#### 声明:本文转载自<a href=\"http://lvdada.org/2015/12/20/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95/\">lvdada的博客</a>\n\n#### 完！\n\n#### 借鉴+原创文章，转载请注明出处！\n","source":"_posts/web-phone-Debug.md","raw":"---\ntitle: 移动端web页面调试方法\ndate: 2017-05-07 21:54:56\ntags:\n- js\n- web调试\ncategories:\n- web调试\n---\n<h1 style=\"color:green;width: 100%;text-align: center \">移动端web调试方法</h1>\n### *前言\n\n\n<!-- more -->\n> <div style=\"color:#D00750\">移动端调试不同于桌面端调试，在桌面时代，chrome的调试器已经无比强大。但是在手机上调试web页面就没有这么原始的方式了。\n  本文就如何调试移动端web页面，借鉴了一些博文和目前市面上好用的工具，针对移动端web页面以及APP内嵌webview页面如何调试做了一个试用和整理。\n  先谈谈需求。\n  最理想的方式是什么？</div>\n\n#### 一.ios设备下\n1. H5页面\n2. webview页面\n\n#### 二.安卓设备\n1. H5页面\n2. webview页面\n\n\n 最理想的状态就是在上述四种情况下，H5页面在各种浏览器下都可以进行调试，且调试的方式跟PC chrome类似，包含js断点调试。webview页面在微信以及公司的APP产品内可以进行类似PC chrome类似的调试方式，包含js断点调试。\n\n\n--------------------------------\n--------------------------------\n### <span style=\"color:red\">IOS 设备</span>\n> 1、 ios safari + mac safari + iphone真机\n#### 调试safari浏览器的H5页面\n启用功能：\n\n手机端：设置 → Safari → 高级 → Web 检查器 → 开。\n\nmac端：Safari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单。\n\n然后就可以在电脑端调试iphone上的safari浏览器上的样式。在调试器及资源里可以对js打断点。操作方式跟chrome的调试器一样。不同的是我们是在手机上对页面进行操作，触发断点环境会更真实。\n\n若在js中埋入一些console，在IOS真机上执行一些操作，mac端safari上调试器能打印，这能极大的方便复杂手势的一些操作。\n\n#### 优点：包含js断点功能，调试方式跟桌面端chrome几乎一样\n#### 缺点：只能在手机上的safari浏览器上操作，不能覆盖其他手机环境，另外也不支持webview的调试。\n> 2、 万金油 weinre + 真机\n#### 调试任意浏览器的H5页面以及webview页面\n\n使用场景：有些时候样式在桌面chrome模拟是好的，但是在部分webview或者真机上就有问题。\n\n#### . 第一步：npm install -g weinre\n#### . 第二步：weinre –boundHost xx ip\n#### . 类似于weinre –boundHost 172.16.28.162\n#### . 第三步：此时weinre会返回一个可用的地址\n\n````javscript\n\n2015-12-14T03:58:50.349Z weinre: starting server at http://10.1.2.77:8080\n\n````\n也可以指定端口号\n#### `weinre --httpPort 8081 --boundHost 172.16.28.162`\n#### . 第四步：可以访问之前weinre分配过来的地址，进入后在页面最上部分可以看到 `Access Points` 下的 `debug client user interface http://10.1.2.77:8080/client/#anonymous`\n\n\n![效果](http://cdn1.showjoy.com/images/9a/9a259c3bbf5d438399842c11d53054c9.png)\n\n这是之后要点击的链接 ，我们先往当前网页下方看。可以看到 `Target Script`栏目\n\n\n\n![效果](http://cdn1.showjoy.com/images/ad/add8ce371e0e4f52898fe4f652427f50.png)\n\n我们需要将`Example`的`script`标签复制粘贴到需要调试的项目中去。\n#### . 第五步：开启本地静态服务器（XMAPP等），进入到需要调试的项目的页面，例如`http://10.1.2.77:8000/index.html`我是利用`nodejs`开的一个小型服务器。\n![XI](http://cdn1.showjoy.com/images/d5/d53d31ba1bcd41749446ae158e923ed8.png)\n#### . 第六步：此时可以回到第四步中的weine分配给你的地址，\n![SA](http://cdn1.showjoy.com/images/42/42eadf2d9af545629e14387a9c6c64bf.png)\n点击第一条`debug client user interface: http://10.1.2.77:8080/client/#anonymous`,进入预备调试页面。\n#### . 第七步：在预备调试页面我们可以看到\n![asd](http://cdn1.showjoy.com/images/ca/ca2a26ecf08d4eca807ea1ec2374eee9.png)\n`Targets`下有一条可以选择的调试页面，对应着刚刚在本地静态服务器中打开的页面。但是这个页面是PC的，现在我们通过手机（浏览器、APP、微信等）进入这个项目ip地址`http://10.1.2.77:8000/index.html`\n此时预备调试页面将会出现两条可调试地址\n![as](http://cdn1.showjoy.com/images/42/426b2c9ab5504cc18c77b1da504e7270.png)\n选择手机端进入后新增的地址。\n#### .第八步：点开链接后链接状态从蓝色变成绿色，然后再点击页面左上角的Element按钮。\n![a](http://cdn1.showjoy.com/images/ae/ae11cb7dc7034bc4981503af603c6300.png)\n现在就可以在pc端调试，手机端直接显示修改的变化啦。\n\n#### 优点：为何称weinre为万金油呢？因为只要在需要调试的项目的文件中引入weinre给出的<scrip 标签，再配合本地静态服务器的ip。可以在任何ios或安卓机型的包括浏览器和app的webview中去调试。\n\n#### 缺点： weinre不支持js的断点调试，这是一个缺憾，并且要在项目中引入额外的调试js标签。\n但是对于js断点，可以在js逻辑中埋入console，然后在手机端真实操作，再在pc端的调试器中查看打印信息这种方式来代替。\n\n> 3、MIHTool\n#### 调试chrome safari浏览器的H5页面\n注意关闭翻墙代理噢。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于weinre 开发的一款APP， 只针对ios手机。大概使用方式是在APP内打开需要调试的页面，相应的在pc端浏览器会出现调试器，方可进行调试。\n使用MIHTool的最大优点之一在于不需要显式的引入调试所需的脚本。在此基础上，作者还增加了一些方便的功能。\n\n#### 1. Performance API.\n#### 2. Polyfill管理器(模拟javascript与Native App互相调用,demo)\n#### 3. NPM Modules (在 web inspector console 里通过 require() 加载 npm 模块)\n\n具体可以看官网：<a href=\"http://www.mihtool.com/\">http://www.mihtool.com/</a>\n\n> 4、ios模拟器 + mac safari\n\n#### 调试safari浏览器的H5页面（可进行js断点调试）\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在没有真机的情况下，可以采用模拟机的方式去运行ios系统下的safari浏览器，然后在safari浏览器内输入想要调试的页面。当然模拟ios系统必须在Xcode这个开发软件下进行。一旦在Xcode里开启了模拟机，再进入模拟机里的safari，之后按照上边介绍过的真机 safari + mac safari介绍的方式进行操作便可。\n\n![a](http://cdn1.showjoy.com/images/ab/ab12718e529e4f03b1e17091e592b694.png)\n\n> 5、ios模拟器 + mac safari\n\n#### 调试公司APP内的webview页面（可进行js断点调试）\n\n参考 <a href=\"https://github.com/paulirish/iOS-WebView-App\">https://github.com/paulirish/iOS-WebView-App</a>，因为不懂IOS开发，也不知道是如何进行的，但大概是在iOS项目内写一些方法抛出一个地址，然后在mac上的safari开发模式内识别出这个地址，然后就可以调试的。默认情况下，mac safari只能识别usb连接的ios设备上的safari浏览器上的H5页面。（上面介绍过）\n\n\n===========================================\n===========================================\n\n### <span style=\"color:red\">Android 设备</span>\n\n> 1、Android chrome 真机 + pc chrome\n\n#### 调试移动端浏览器的H5页面（可进行js断点调试）\n\n在安卓4.4版本以下的安卓机子，手机上安装了chrome的情况下，并且打开需要调试的页面，可以打开usb开发者模式，在pc端chrome地址栏输入chrome://inspect便可找到相应的手机的相应打开wap页面。调试方法跟pc chrome几乎一致。\n\n在第一次使用的时候点击inspect会弹出空白的调试页面，这个时候需要翻墙，再点inspect才会出现正常的调试页面。\n\n#### 优点：可进行js断点调试。\n#### 缺点：浏览器限制。\n\n#### 调试公司APP内的webview页面（可进行js断点调试）\n\n在安卓4.4版本以上的安卓机子，手机通过usb连接mac电脑后，手机打开usb开发者模式后，在电脑chrome的chrome://inspect页面里会找到除了手机浏览器打开的页面，还会找到App内打开的webview的页面。\n\n![a](http://cdn1.showjoy.com/images/ce/ce98e4652b7f47c99612a3081e4e785f.png)\n\n点开`inspect`就是一个调试界面。\n\n进行webview页面的调试 需要在应用的代码内设置才能生效（根据<a href=\"https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md#%E8%B0%83%E8%AF%95-webviews\">https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md#%E8%B0%83%E8%AF%95-webviews</a>）\n\n\n> 2、Android 模拟机 + pc chrome\n\n&nbsp;&nbsp;&nbsp;&nbsp;安卓模拟机配置成功的情况下调试的方式跟上面1方法是一样的，在安卓4.4版本以上才能进行webview的调试。\n&nbsp;&nbsp;&nbsp;&nbsp;下面就介绍下大名鼎鼎的安卓模拟器genymotion.个人使用是免费的。\n\n1. 在其官网注册（必须）https://www.genymotion.com/\n2. 在其官网下载最新的软件，下载完将genymotion和genymotion shell都放到应用程序内。\n3. 下完这个之后还需要下载virtualBox，https://www.virtualbox.org/wiki/Downloads\n4. 之后就可以选择不同版本的模拟器了，网上的教程都是推荐下载安卓4.3版本，因为4.3版本有对应的补丁，装上后可以避免一些应用下载失败。但4.3版本不支持调试webview。我推荐下载 HTC one 4.4.4版本，本人试了很多版本，只有这个可以调试我司App内嵌的H5页面。\n\n![a](http://cdn1.showjoy.com/images/b3/b38d848454e34984a0436989c4847139.png)\n\n推荐一个专门讲解genymotion的资源。\n<a href=\"http://www.ziliao1.com/Article/Show/DCDFC03FE4902A1AC353C74695DAC2E9.html\">http://www.ziliao1.com/Article/Show/DCDFC03FE4902A1AC353C74695DAC2E9.html</a>\n以及模拟机版本下载失败的解决办法\n<a href=\"http://www.cnblogs.com/wliangde/p/3678649.html\">http://www.cnblogs.com/wliangde/p/3678649.html</a>\n\n> 3、万金油 weinre + pc chrome\n\n#### 调试任意浏览器的H5页面以及webview页面\n\n这个方法在之上iOS 部分已经讲解过了。weinre通吃安卓与ios，兼容性不要太高。\n\n> 4、微信调试\n\n#### 调试微信客户端的webview页面（支持js断点调试）\n\n目前微信已经出了官方的调试工具，照着做就好了。\n<a href=\"http://blog.qqbrowser.cc/\">http://blog.qqbrowser.cc/</a>\n\n> 5、UC浏览器 + 真机 + mac chrome\n\n#### 调试uc浏览器的H5页面（支持js断点）\n\n方法一是真机加上chrome浏览器，这个方法是真机加uc浏览器，\n<a href=\"http://www.uc.cn/business/developer/\">http://www.uc.cn/business/developer/</a>\n\n\n++++++++++++++++++++++++++++++++++\n++++++++++++++++++++++++++++++++++\n\n<span style=\"color:red\">总结</span>\n\n#### 上面罗列的多种方法，在本地开发的情况下基本都已经覆盖到了。但是如果线上页面出现bug了。该怎么办？最快的方法直接对线上页面进行调试。\n先介绍一下mac抓包工具`charles`\n\n<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=400497314&idx=1&sn=850fad741fdb635c2403bafb2f1e636f&scene=1&srcid=1119TqsnfhBHSKzA2BUja9mk&key=ac89cba618d2d97693fea624e810ff69a7385f5209ab2a26ec029ca8f618e760e87de444299655bad41c5d1a7dbbc76e&ascene=0&uin=Mjg1NTY1OTY2MA%3D%3D&devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.10.4+build(14E46\">charles 教程</a>\n\n\n1、截取http网络封包\n2、支持修改网络请求参数\n3、支持网络请求的截获并动态修改\n4、支持重发网络请求\n5、模拟网速网络\n\n刚刚给出的链接中有charles的全方位解读，我这里就简单介绍下http网络封包。\n\n在pc上charles可以很容易的创建一个代理，将设定的一部分网络请求全部转到charles代理上，并且可以将其中某个资源map到本地，从而实现使用本地代码调试线上代码的功能。\n\n但是我们现在是调试手机等移动端设备，但稍微做一些设置，就可以实现通过pc上的charles去代理移动端去请求资源。然后将需要的资源map到本地，进行修改和调试。\n\n这样设置过后的效果就是，在pc端修改代码，移动端线上的页面去请求本地修改后的代码并展示。\n\n讲完了charles,问题回到如何快速调试线上页面。\n\n#### 如果是H5页面\n遇上H5页面在PCchrome调试器上跟真实手机上的效果不一致时，可以使用万金油weinre，结合charles，就可以调试这种机型各种浏览器上的问题了。当然也可以使用上面提到的其他方法，都是适用的。\n\n#### 如果是webview\n同样不能少的是charles抓包，如果是安卓可以配合genymotion模拟器进行模拟。使用方法上文讲述过，再推荐一篇专门的文章：http://div.io/topic/1449。这篇文章讲到如何用charles监听genymotion。\n如果是ios，也可以采用这样的方式，即模拟器+charles+mac safari。使用方法在上文的ios章节讲述过。\n当然也是可以使用万金油weinre。weinre+charles调试App内的H5页面也是很方便的。跟上面两种方法比较，缺少的就是js断点调试功能。\n\n\n\n\n===========================================\n\n\n#### 声明:本文转载自<a href=\"http://lvdada.org/2015/12/20/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95/\">lvdada的博客</a>\n\n#### 完！\n\n#### 借鉴+原创文章，转载请注明出处！\n","slug":"web-phone-Debug","published":1,"updated":"2018-03-08T02:54:08.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc7d0014rexmyt4r4u16","content":"<p></p><h1 style=\"color:green;width: 100%;text-align: center \">移动端web调试方法</h1><p></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"*前言\"></a>*前言</h3><a id=\"more\"></a>\n<blockquote>\n<div style=\"color:#D00750\">移动端调试不同于桌面端调试，在桌面时代，chrome的调试器已经无比强大。但是在手机上调试web页面就没有这么原始的方式了。<br>  本文就如何调试移动端web页面，借鉴了一些博文和目前市面上好用的工具，针对移动端web页面以及APP内嵌webview页面如何调试做了一个试用和整理。<br>  先谈谈需求。<br>  最理想的方式是什么？</div>\n\n</blockquote>\n<h4 id=\"一-ios设备下\"><a href=\"#一-ios设备下\" class=\"headerlink\" title=\"一.ios设备下\"></a>一.ios设备下</h4><ol>\n<li>H5页面</li>\n<li>webview页面</li>\n</ol>\n<h4 id=\"二-安卓设备\"><a href=\"#二-安卓设备\" class=\"headerlink\" title=\"二.安卓设备\"></a>二.安卓设备</h4><ol>\n<li>H5页面</li>\n<li>webview页面</li>\n</ol>\n<p> 最理想的状态就是在上述四种情况下，H5页面在各种浏览器下都可以进行调试，且调试的方式跟PC chrome类似，包含js断点调试。webview页面在微信以及公司的APP产品内可以进行类似PC chrome类似的调试方式，包含js断点调试。</p>\n<h2 id=\"——————————–\"><a href=\"#——————————–\" class=\"headerlink\" title=\"——————————–\"></a>——————————–</h2><h3 id=\"IOS-设备\"><a href=\"#IOS-设备\" class=\"headerlink\" title=\"IOS 设备\"></a><span style=\"color:red\">IOS 设备</span></h3><blockquote>\n<p>1、 ios safari + mac safari + iphone真机</p>\n<h4 id=\"调试safari浏览器的H5页面\"><a href=\"#调试safari浏览器的H5页面\" class=\"headerlink\" title=\"调试safari浏览器的H5页面\"></a>调试safari浏览器的H5页面</h4><p>启用功能：</p>\n</blockquote>\n<p>手机端：设置 → Safari → 高级 → Web 检查器 → 开。</p>\n<p>mac端：Safari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单。</p>\n<p>然后就可以在电脑端调试iphone上的safari浏览器上的样式。在调试器及资源里可以对js打断点。操作方式跟chrome的调试器一样。不同的是我们是在手机上对页面进行操作，触发断点环境会更真实。</p>\n<p>若在js中埋入一些console，在IOS真机上执行一些操作，mac端safari上调试器能打印，这能极大的方便复杂手势的一些操作。</p>\n<h4 id=\"优点：包含js断点功能，调试方式跟桌面端chrome几乎一样\"><a href=\"#优点：包含js断点功能，调试方式跟桌面端chrome几乎一样\" class=\"headerlink\" title=\"优点：包含js断点功能，调试方式跟桌面端chrome几乎一样\"></a>优点：包含js断点功能，调试方式跟桌面端chrome几乎一样</h4><h4 id=\"缺点：只能在手机上的safari浏览器上操作，不能覆盖其他手机环境，另外也不支持webview的调试。\"><a href=\"#缺点：只能在手机上的safari浏览器上操作，不能覆盖其他手机环境，另外也不支持webview的调试。\" class=\"headerlink\" title=\"缺点：只能在手机上的safari浏览器上操作，不能覆盖其他手机环境，另外也不支持webview的调试。\"></a>缺点：只能在手机上的safari浏览器上操作，不能覆盖其他手机环境，另外也不支持webview的调试。</h4><blockquote>\n<p>2、 万金油 weinre + 真机</p>\n<h4 id=\"调试任意浏览器的H5页面以及webview页面\"><a href=\"#调试任意浏览器的H5页面以及webview页面\" class=\"headerlink\" title=\"调试任意浏览器的H5页面以及webview页面\"></a>调试任意浏览器的H5页面以及webview页面</h4></blockquote>\n<p>使用场景：有些时候样式在桌面chrome模拟是好的，但是在部分webview或者真机上就有问题。</p>\n<h4 id=\"第一步：npm-install-g-weinre\"><a href=\"#第一步：npm-install-g-weinre\" class=\"headerlink\" title=\". 第一步：npm install -g weinre\"></a>. 第一步：npm install -g weinre</h4><h4 id=\"第二步：weinre-–boundHost-xx-ip\"><a href=\"#第二步：weinre-–boundHost-xx-ip\" class=\"headerlink\" title=\". 第二步：weinre –boundHost xx ip\"></a>. 第二步：weinre –boundHost xx ip</h4><h4 id=\"类似于weinre-–boundHost-172-16-28-162\"><a href=\"#类似于weinre-–boundHost-172-16-28-162\" class=\"headerlink\" title=\". 类似于weinre –boundHost 172.16.28.162\"></a>. 类似于weinre –boundHost 172.16.28.162</h4><h4 id=\"第三步：此时weinre会返回一个可用的地址\"><a href=\"#第三步：此时weinre会返回一个可用的地址\" class=\"headerlink\" title=\". 第三步：此时weinre会返回一个可用的地址\"></a>. 第三步：此时weinre会返回一个可用的地址</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">2015-12-14T03:58:50.349Z weinre: starting server at http://10.1.2.77:8080</div></pre></td></tr></table></figure>\n<p>也可以指定端口号</p>\n<h4 id=\"weinre-httpPort-8081-boundHost-172-16-28-162\"><a href=\"#weinre-httpPort-8081-boundHost-172-16-28-162\" class=\"headerlink\" title=\"weinre --httpPort 8081 --boundHost 172.16.28.162\"></a><code>weinre --httpPort 8081 --boundHost 172.16.28.162</code></h4><h4 id=\"第四步：可以访问之前weinre分配过来的地址，进入后在页面最上部分可以看到-Access-Points-下的-debug-client-user-interface-http-10-1-2-77-8080-client-anonymous\"><a href=\"#第四步：可以访问之前weinre分配过来的地址，进入后在页面最上部分可以看到-Access-Points-下的-debug-client-user-interface-http-10-1-2-77-8080-client-anonymous\" class=\"headerlink\" title=\". 第四步：可以访问之前weinre分配过来的地址，进入后在页面最上部分可以看到 Access Points 下的 debug client user interface http://10.1.2.77:8080/client/#anonymous\"></a>. 第四步：可以访问之前weinre分配过来的地址，进入后在页面最上部分可以看到 <code>Access Points</code> 下的 <code>debug client user interface http://10.1.2.77:8080/client/#anonymous</code></h4><p><img src=\"http://cdn1.showjoy.com/images/9a/9a259c3bbf5d438399842c11d53054c9.png\" alt=\"效果\"></p>\n<p>这是之后要点击的链接 ，我们先往当前网页下方看。可以看到 <code>Target Script</code>栏目</p>\n<p><img src=\"http://cdn1.showjoy.com/images/ad/add8ce371e0e4f52898fe4f652427f50.png\" alt=\"效果\"></p>\n<p>我们需要将<code>Example</code>的<code>script</code>标签复制粘贴到需要调试的项目中去。</p>\n<h4 id=\"第五步：开启本地静态服务器（XMAPP等），进入到需要调试的项目的页面，例如http-10-1-2-77-8000-index-html我是利用nodejs开的一个小型服务器。\"><a href=\"#第五步：开启本地静态服务器（XMAPP等），进入到需要调试的项目的页面，例如http-10-1-2-77-8000-index-html我是利用nodejs开的一个小型服务器。\" class=\"headerlink\" title=\". 第五步：开启本地静态服务器（XMAPP等），进入到需要调试的项目的页面，例如http://10.1.2.77:8000/index.html我是利用nodejs开的一个小型服务器。\"></a>. 第五步：开启本地静态服务器（XMAPP等），进入到需要调试的项目的页面，例如<code>http://10.1.2.77:8000/index.html</code>我是利用<code>nodejs</code>开的一个小型服务器。</h4><p><img src=\"http://cdn1.showjoy.com/images/d5/d53d31ba1bcd41749446ae158e923ed8.png\" alt=\"XI\"></p>\n<h4 id=\"第六步：此时可以回到第四步中的weine分配给你的地址，\"><a href=\"#第六步：此时可以回到第四步中的weine分配给你的地址，\" class=\"headerlink\" title=\". 第六步：此时可以回到第四步中的weine分配给你的地址，\"></a>. 第六步：此时可以回到第四步中的weine分配给你的地址，</h4><p><img src=\"http://cdn1.showjoy.com/images/42/42eadf2d9af545629e14387a9c6c64bf.png\" alt=\"SA\"><br>点击第一条<code>debug client user interface: http://10.1.2.77:8080/client/#anonymous</code>,进入预备调试页面。</p>\n<h4 id=\"第七步：在预备调试页面我们可以看到\"><a href=\"#第七步：在预备调试页面我们可以看到\" class=\"headerlink\" title=\". 第七步：在预备调试页面我们可以看到\"></a>. 第七步：在预备调试页面我们可以看到</h4><p><img src=\"http://cdn1.showjoy.com/images/ca/ca2a26ecf08d4eca807ea1ec2374eee9.png\" alt=\"asd\"><br><code>Targets</code>下有一条可以选择的调试页面，对应着刚刚在本地静态服务器中打开的页面。但是这个页面是PC的，现在我们通过手机（浏览器、APP、微信等）进入这个项目ip地址<code>http://10.1.2.77:8000/index.html</code><br>此时预备调试页面将会出现两条可调试地址<br><img src=\"http://cdn1.showjoy.com/images/42/426b2c9ab5504cc18c77b1da504e7270.png\" alt=\"as\"><br>选择手机端进入后新增的地址。</p>\n<h4 id=\"第八步：点开链接后链接状态从蓝色变成绿色，然后再点击页面左上角的Element按钮。\"><a href=\"#第八步：点开链接后链接状态从蓝色变成绿色，然后再点击页面左上角的Element按钮。\" class=\"headerlink\" title=\".第八步：点开链接后链接状态从蓝色变成绿色，然后再点击页面左上角的Element按钮。\"></a>.第八步：点开链接后链接状态从蓝色变成绿色，然后再点击页面左上角的Element按钮。</h4><p><img src=\"http://cdn1.showjoy.com/images/ae/ae11cb7dc7034bc4981503af603c6300.png\" alt=\"a\"><br>现在就可以在pc端调试，手机端直接显示修改的变化啦。</p>\n<h4 id=\"优点：为何称weinre为万金油呢？因为只要在需要调试的项目的文件中引入weinre给出的-lt-scrip-标签，再配合本地静态服务器的ip。可以在任何ios或安卓机型的包括浏览器和app的webview中去调试。\"><a href=\"#优点：为何称weinre为万金油呢？因为只要在需要调试的项目的文件中引入weinre给出的-lt-scrip-标签，再配合本地静态服务器的ip。可以在任何ios或安卓机型的包括浏览器和app的webview中去调试。\" class=\"headerlink\" title=\"优点：为何称weinre为万金油呢？因为只要在需要调试的项目的文件中引入weinre给出的&lt;scrip 标签，再配合本地静态服务器的ip。可以在任何ios或安卓机型的包括浏览器和app的webview中去调试。\"></a>优点：为何称weinre为万金油呢？因为只要在需要调试的项目的文件中引入weinre给出的&lt;scrip 标签，再配合本地静态服务器的ip。可以在任何ios或安卓机型的包括浏览器和app的webview中去调试。</h4><h4 id=\"缺点：-weinre不支持js的断点调试，这是一个缺憾，并且要在项目中引入额外的调试js标签。\"><a href=\"#缺点：-weinre不支持js的断点调试，这是一个缺憾，并且要在项目中引入额外的调试js标签。\" class=\"headerlink\" title=\"缺点： weinre不支持js的断点调试，这是一个缺憾，并且要在项目中引入额外的调试js标签。\"></a>缺点： weinre不支持js的断点调试，这是一个缺憾，并且要在项目中引入额外的调试js标签。</h4><p>但是对于js断点，可以在js逻辑中埋入console，然后在手机端真实操作，再在pc端的调试器中查看打印信息这种方式来代替。</p>\n<blockquote>\n<p>3、MIHTool</p>\n<h4 id=\"调试chrome-safari浏览器的H5页面\"><a href=\"#调试chrome-safari浏览器的H5页面\" class=\"headerlink\" title=\"调试chrome safari浏览器的H5页面\"></a>调试chrome safari浏览器的H5页面</h4><p>注意关闭翻墙代理噢。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于weinre 开发的一款APP， 只针对ios手机。大概使用方式是在APP内打开需要调试的页面，相应的在pc端浏览器会出现调试器，方可进行调试。<br>使用MIHTool的最大优点之一在于不需要显式的引入调试所需的脚本。在此基础上，作者还增加了一些方便的功能。</p>\n</blockquote>\n<h4 id=\"1-Performance-API\"><a href=\"#1-Performance-API\" class=\"headerlink\" title=\"1. Performance API.\"></a>1. Performance API.</h4><h4 id=\"2-Polyfill管理器-模拟javascript与Native-App互相调用-demo\"><a href=\"#2-Polyfill管理器-模拟javascript与Native-App互相调用-demo\" class=\"headerlink\" title=\"2. Polyfill管理器(模拟javascript与Native App互相调用,demo)\"></a>2. Polyfill管理器(模拟javascript与Native App互相调用,demo)</h4><h4 id=\"3-NPM-Modules-在-web-inspector-console-里通过-require-加载-npm-模块\"><a href=\"#3-NPM-Modules-在-web-inspector-console-里通过-require-加载-npm-模块\" class=\"headerlink\" title=\"3. NPM Modules (在 web inspector console 里通过 require() 加载 npm 模块)\"></a>3. NPM Modules (在 web inspector console 里通过 require() 加载 npm 模块)</h4><p>具体可以看官网：<a href=\"http://www.mihtool.com/\" target=\"_blank\" rel=\"noopener\">http://www.mihtool.com/</a></p>\n<blockquote>\n<p>4、ios模拟器 + mac safari</p>\n</blockquote>\n<h4 id=\"调试safari浏览器的H5页面（可进行js断点调试）\"><a href=\"#调试safari浏览器的H5页面（可进行js断点调试）\" class=\"headerlink\" title=\"调试safari浏览器的H5页面（可进行js断点调试）\"></a>调试safari浏览器的H5页面（可进行js断点调试）</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在没有真机的情况下，可以采用模拟机的方式去运行ios系统下的safari浏览器，然后在safari浏览器内输入想要调试的页面。当然模拟ios系统必须在Xcode这个开发软件下进行。一旦在Xcode里开启了模拟机，再进入模拟机里的safari，之后按照上边介绍过的真机 safari + mac safari介绍的方式进行操作便可。</p>\n<p><img src=\"http://cdn1.showjoy.com/images/ab/ab12718e529e4f03b1e17091e592b694.png\" alt=\"a\"></p>\n<blockquote>\n<p>5、ios模拟器 + mac safari</p>\n</blockquote>\n<h4 id=\"调试公司APP内的webview页面（可进行js断点调试）\"><a href=\"#调试公司APP内的webview页面（可进行js断点调试）\" class=\"headerlink\" title=\"调试公司APP内的webview页面（可进行js断点调试）\"></a>调试公司APP内的webview页面（可进行js断点调试）</h4><p>参考 <a href=\"https://github.com/paulirish/iOS-WebView-App\" target=\"_blank\" rel=\"noopener\">https://github.com/paulirish/iOS-WebView-App</a>，因为不懂IOS开发，也不知道是如何进行的，但大概是在iOS项目内写一些方法抛出一个地址，然后在mac上的safari开发模式内识别出这个地址，然后就可以调试的。默认情况下，mac safari只能识别usb连接的ios设备上的safari浏览器上的H5页面。（上面介绍过）</p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"===========================================\"></a>===========================================</h1><h3 id=\"Android-设备\"><a href=\"#Android-设备\" class=\"headerlink\" title=\"Android 设备\"></a><span style=\"color:red\">Android 设备</span></h3><blockquote>\n<p>1、Android chrome 真机 + pc chrome</p>\n</blockquote>\n<h4 id=\"调试移动端浏览器的H5页面（可进行js断点调试）\"><a href=\"#调试移动端浏览器的H5页面（可进行js断点调试）\" class=\"headerlink\" title=\"调试移动端浏览器的H5页面（可进行js断点调试）\"></a>调试移动端浏览器的H5页面（可进行js断点调试）</h4><p>在安卓4.4版本以下的安卓机子，手机上安装了chrome的情况下，并且打开需要调试的页面，可以打开usb开发者模式，在pc端chrome地址栏输入chrome://inspect便可找到相应的手机的相应打开wap页面。调试方法跟pc chrome几乎一致。</p>\n<p>在第一次使用的时候点击inspect会弹出空白的调试页面，这个时候需要翻墙，再点inspect才会出现正常的调试页面。</p>\n<h4 id=\"优点：可进行js断点调试。\"><a href=\"#优点：可进行js断点调试。\" class=\"headerlink\" title=\"优点：可进行js断点调试。\"></a>优点：可进行js断点调试。</h4><h4 id=\"缺点：浏览器限制。\"><a href=\"#缺点：浏览器限制。\" class=\"headerlink\" title=\"缺点：浏览器限制。\"></a>缺点：浏览器限制。</h4><h4 id=\"调试公司APP内的webview页面（可进行js断点调试）-1\"><a href=\"#调试公司APP内的webview页面（可进行js断点调试）-1\" class=\"headerlink\" title=\"调试公司APP内的webview页面（可进行js断点调试）\"></a>调试公司APP内的webview页面（可进行js断点调试）</h4><p>在安卓4.4版本以上的安卓机子，手机通过usb连接mac电脑后，手机打开usb开发者模式后，在电脑chrome的chrome://inspect页面里会找到除了手机浏览器打开的页面，还会找到App内打开的webview的页面。</p>\n<p><img src=\"http://cdn1.showjoy.com/images/ce/ce98e4652b7f47c99612a3081e4e785f.png\" alt=\"a\"></p>\n<p>点开<code>inspect</code>就是一个调试界面。</p>\n<p>进行webview页面的调试 需要在应用的代码内设置才能生效（根据<a href=\"https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md#%E8%B0%83%E8%AF%95-webviews\" target=\"_blank\" rel=\"noopener\">https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md#%E8%B0%83%E8%AF%95-webviews</a>）</p>\n<blockquote>\n<p>2、Android 模拟机 + pc chrome</p>\n</blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;安卓模拟机配置成功的情况下调试的方式跟上面1方法是一样的，在安卓4.4版本以上才能进行webview的调试。<br>&nbsp;&nbsp;&nbsp;&nbsp;下面就介绍下大名鼎鼎的安卓模拟器genymotion.个人使用是免费的。</p>\n<ol>\n<li>在其官网注册（必须）<a href=\"https://www.genymotion.com/\" target=\"_blank\" rel=\"noopener\">https://www.genymotion.com/</a></li>\n<li>在其官网下载最新的软件，下载完将genymotion和genymotion shell都放到应用程序内。</li>\n<li>下完这个之后还需要下载virtualBox，<a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\" rel=\"noopener\">https://www.virtualbox.org/wiki/Downloads</a></li>\n<li>之后就可以选择不同版本的模拟器了，网上的教程都是推荐下载安卓4.3版本，因为4.3版本有对应的补丁，装上后可以避免一些应用下载失败。但4.3版本不支持调试webview。我推荐下载 HTC one 4.4.4版本，本人试了很多版本，只有这个可以调试我司App内嵌的H5页面。</li>\n</ol>\n<p><img src=\"http://cdn1.showjoy.com/images/b3/b38d848454e34984a0436989c4847139.png\" alt=\"a\"></p>\n<p>推荐一个专门讲解genymotion的资源。<br><a href=\"http://www.ziliao1.com/Article/Show/DCDFC03FE4902A1AC353C74695DAC2E9.html\" target=\"_blank\" rel=\"noopener\">http://www.ziliao1.com/Article/Show/DCDFC03FE4902A1AC353C74695DAC2E9.html</a><br>以及模拟机版本下载失败的解决办法<br><a href=\"http://www.cnblogs.com/wliangde/p/3678649.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/wliangde/p/3678649.html</a></p>\n<blockquote>\n<p>3、万金油 weinre + pc chrome</p>\n</blockquote>\n<h4 id=\"调试任意浏览器的H5页面以及webview页面-1\"><a href=\"#调试任意浏览器的H5页面以及webview页面-1\" class=\"headerlink\" title=\"调试任意浏览器的H5页面以及webview页面\"></a>调试任意浏览器的H5页面以及webview页面</h4><p>这个方法在之上iOS 部分已经讲解过了。weinre通吃安卓与ios，兼容性不要太高。</p>\n<blockquote>\n<p>4、微信调试</p>\n</blockquote>\n<h4 id=\"调试微信客户端的webview页面（支持js断点调试）\"><a href=\"#调试微信客户端的webview页面（支持js断点调试）\" class=\"headerlink\" title=\"调试微信客户端的webview页面（支持js断点调试）\"></a>调试微信客户端的webview页面（支持js断点调试）</h4><p>目前微信已经出了官方的调试工具，照着做就好了。<br><a href=\"http://blog.qqbrowser.cc/\" target=\"_blank\" rel=\"noopener\">http://blog.qqbrowser.cc/</a></p>\n<blockquote>\n<p>5、UC浏览器 + 真机 + mac chrome</p>\n</blockquote>\n<h4 id=\"调试uc浏览器的H5页面（支持js断点）\"><a href=\"#调试uc浏览器的H5页面（支持js断点）\" class=\"headerlink\" title=\"调试uc浏览器的H5页面（支持js断点）\"></a>调试uc浏览器的H5页面（支持js断点）</h4><p>方法一是真机加上chrome浏览器，这个方法是真机加uc浏览器，<br><a href=\"http://www.uc.cn/business/developer/\" target=\"_blank\" rel=\"noopener\">http://www.uc.cn/business/developer/</a></p>\n<p>++++++++++++++++++++++++++++++++++<br>++++++++++++++++++++++++++++++++++</p>\n<p><span style=\"color:red\">总结</span></p>\n<h4 id=\"上面罗列的多种方法，在本地开发的情况下基本都已经覆盖到了。但是如果线上页面出现bug了。该怎么办？最快的方法直接对线上页面进行调试。\"><a href=\"#上面罗列的多种方法，在本地开发的情况下基本都已经覆盖到了。但是如果线上页面出现bug了。该怎么办？最快的方法直接对线上页面进行调试。\" class=\"headerlink\" title=\"上面罗列的多种方法，在本地开发的情况下基本都已经覆盖到了。但是如果线上页面出现bug了。该怎么办？最快的方法直接对线上页面进行调试。\"></a>上面罗列的多种方法，在本地开发的情况下基本都已经覆盖到了。但是如果线上页面出现bug了。该怎么办？最快的方法直接对线上页面进行调试。</h4><p>先介绍一下mac抓包工具<code>charles</code></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=400497314&idx=1&sn=850fad741fdb635c2403bafb2f1e636f&scene=1&srcid=1119TqsnfhBHSKzA2BUja9mk&key=ac89cba618d2d97693fea624e810ff69a7385f5209ab2a26ec029ca8f618e760e87de444299655bad41c5d1a7dbbc76e&ascene=0&uin=Mjg1NTY1OTY2MA%3D%3D&devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.10.4+build(14E46\" target=\"_blank\" rel=\"noopener\">charles 教程</a></p>\n<p>1、截取http网络封包<br>2、支持修改网络请求参数<br>3、支持网络请求的截获并动态修改<br>4、支持重发网络请求<br>5、模拟网速网络</p>\n<p>刚刚给出的链接中有charles的全方位解读，我这里就简单介绍下http网络封包。</p>\n<p>在pc上charles可以很容易的创建一个代理，将设定的一部分网络请求全部转到charles代理上，并且可以将其中某个资源map到本地，从而实现使用本地代码调试线上代码的功能。</p>\n<p>但是我们现在是调试手机等移动端设备，但稍微做一些设置，就可以实现通过pc上的charles去代理移动端去请求资源。然后将需要的资源map到本地，进行修改和调试。</p>\n<p>这样设置过后的效果就是，在pc端修改代码，移动端线上的页面去请求本地修改后的代码并展示。</p>\n<p>讲完了charles,问题回到如何快速调试线上页面。</p>\n<h4 id=\"如果是H5页面\"><a href=\"#如果是H5页面\" class=\"headerlink\" title=\"如果是H5页面\"></a>如果是H5页面</h4><p>遇上H5页面在PCchrome调试器上跟真实手机上的效果不一致时，可以使用万金油weinre，结合charles，就可以调试这种机型各种浏览器上的问题了。当然也可以使用上面提到的其他方法，都是适用的。</p>\n<h4 id=\"如果是webview\"><a href=\"#如果是webview\" class=\"headerlink\" title=\"如果是webview\"></a>如果是webview</h4><p>同样不能少的是charles抓包，如果是安卓可以配合genymotion模拟器进行模拟。使用方法上文讲述过，再推荐一篇专门的文章：<a href=\"http://div.io/topic/1449。这篇文章讲到如何用charles监听genymotion。\" target=\"_blank\" rel=\"noopener\">http://div.io/topic/1449。这篇文章讲到如何用charles监听genymotion。</a><br>如果是ios，也可以采用这样的方式，即模拟器+charles+mac safari。使用方法在上文的ios章节讲述过。<br>当然也是可以使用万金油weinre。weinre+charles调试App内的H5页面也是很方便的。跟上面两种方法比较，缺少的就是js断点调试功能。</p>\n<p>===========================================</p>\n<h4 id=\"声明-本文转载自lvdada的博客\"><a href=\"#声明-本文转载自lvdada的博客\" class=\"headerlink\" title=\"声明:本文转载自lvdada的博客\"></a>声明:本文转载自<a href=\"http://lvdada.org/2015/12/20/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95/\" target=\"_blank\" rel=\"noopener\">lvdada的博客</a></h4><h4 id=\"完！\"><a href=\"#完！\" class=\"headerlink\" title=\"完！\"></a>完！</h4><h4 id=\"借鉴-原创文章，转载请注明出处！\"><a href=\"#借鉴-原创文章，转载请注明出处！\" class=\"headerlink\" title=\"借鉴+原创文章，转载请注明出处！\"></a>借鉴+原创文章，转载请注明出处！</h4>","site":{"data":{}},"excerpt":"<p></p><h1 style=\"color:green;width: 100%;text-align: center \">移动端web调试方法</h1><p></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"*前言\"></a>*前言</h3>","more":"<blockquote>\n<div style=\"color:#D00750\">移动端调试不同于桌面端调试，在桌面时代，chrome的调试器已经无比强大。但是在手机上调试web页面就没有这么原始的方式了。<br>  本文就如何调试移动端web页面，借鉴了一些博文和目前市面上好用的工具，针对移动端web页面以及APP内嵌webview页面如何调试做了一个试用和整理。<br>  先谈谈需求。<br>  最理想的方式是什么？</div>\n\n</blockquote>\n<h4 id=\"一-ios设备下\"><a href=\"#一-ios设备下\" class=\"headerlink\" title=\"一.ios设备下\"></a>一.ios设备下</h4><ol>\n<li>H5页面</li>\n<li>webview页面</li>\n</ol>\n<h4 id=\"二-安卓设备\"><a href=\"#二-安卓设备\" class=\"headerlink\" title=\"二.安卓设备\"></a>二.安卓设备</h4><ol>\n<li>H5页面</li>\n<li>webview页面</li>\n</ol>\n<p> 最理想的状态就是在上述四种情况下，H5页面在各种浏览器下都可以进行调试，且调试的方式跟PC chrome类似，包含js断点调试。webview页面在微信以及公司的APP产品内可以进行类似PC chrome类似的调试方式，包含js断点调试。</p>\n<h2 id=\"——————————–\"><a href=\"#——————————–\" class=\"headerlink\" title=\"——————————–\"></a>——————————–</h2><h3 id=\"IOS-设备\"><a href=\"#IOS-设备\" class=\"headerlink\" title=\"IOS 设备\"></a><span style=\"color:red\">IOS 设备</span></h3><blockquote>\n<p>1、 ios safari + mac safari + iphone真机</p>\n<h4 id=\"调试safari浏览器的H5页面\"><a href=\"#调试safari浏览器的H5页面\" class=\"headerlink\" title=\"调试safari浏览器的H5页面\"></a>调试safari浏览器的H5页面</h4><p>启用功能：</p>\n</blockquote>\n<p>手机端：设置 → Safari → 高级 → Web 检查器 → 开。</p>\n<p>mac端：Safari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单。</p>\n<p>然后就可以在电脑端调试iphone上的safari浏览器上的样式。在调试器及资源里可以对js打断点。操作方式跟chrome的调试器一样。不同的是我们是在手机上对页面进行操作，触发断点环境会更真实。</p>\n<p>若在js中埋入一些console，在IOS真机上执行一些操作，mac端safari上调试器能打印，这能极大的方便复杂手势的一些操作。</p>\n<h4 id=\"优点：包含js断点功能，调试方式跟桌面端chrome几乎一样\"><a href=\"#优点：包含js断点功能，调试方式跟桌面端chrome几乎一样\" class=\"headerlink\" title=\"优点：包含js断点功能，调试方式跟桌面端chrome几乎一样\"></a>优点：包含js断点功能，调试方式跟桌面端chrome几乎一样</h4><h4 id=\"缺点：只能在手机上的safari浏览器上操作，不能覆盖其他手机环境，另外也不支持webview的调试。\"><a href=\"#缺点：只能在手机上的safari浏览器上操作，不能覆盖其他手机环境，另外也不支持webview的调试。\" class=\"headerlink\" title=\"缺点：只能在手机上的safari浏览器上操作，不能覆盖其他手机环境，另外也不支持webview的调试。\"></a>缺点：只能在手机上的safari浏览器上操作，不能覆盖其他手机环境，另外也不支持webview的调试。</h4><blockquote>\n<p>2、 万金油 weinre + 真机</p>\n<h4 id=\"调试任意浏览器的H5页面以及webview页面\"><a href=\"#调试任意浏览器的H5页面以及webview页面\" class=\"headerlink\" title=\"调试任意浏览器的H5页面以及webview页面\"></a>调试任意浏览器的H5页面以及webview页面</h4></blockquote>\n<p>使用场景：有些时候样式在桌面chrome模拟是好的，但是在部分webview或者真机上就有问题。</p>\n<h4 id=\"第一步：npm-install-g-weinre\"><a href=\"#第一步：npm-install-g-weinre\" class=\"headerlink\" title=\". 第一步：npm install -g weinre\"></a>. 第一步：npm install -g weinre</h4><h4 id=\"第二步：weinre-–boundHost-xx-ip\"><a href=\"#第二步：weinre-–boundHost-xx-ip\" class=\"headerlink\" title=\". 第二步：weinre –boundHost xx ip\"></a>. 第二步：weinre –boundHost xx ip</h4><h4 id=\"类似于weinre-–boundHost-172-16-28-162\"><a href=\"#类似于weinre-–boundHost-172-16-28-162\" class=\"headerlink\" title=\". 类似于weinre –boundHost 172.16.28.162\"></a>. 类似于weinre –boundHost 172.16.28.162</h4><h4 id=\"第三步：此时weinre会返回一个可用的地址\"><a href=\"#第三步：此时weinre会返回一个可用的地址\" class=\"headerlink\" title=\". 第三步：此时weinre会返回一个可用的地址\"></a>. 第三步：此时weinre会返回一个可用的地址</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">2015-12-14T03:58:50.349Z weinre: starting server at http://10.1.2.77:8080</div></pre></td></tr></table></figure>\n<p>也可以指定端口号</p>\n<h4 id=\"weinre-httpPort-8081-boundHost-172-16-28-162\"><a href=\"#weinre-httpPort-8081-boundHost-172-16-28-162\" class=\"headerlink\" title=\"weinre --httpPort 8081 --boundHost 172.16.28.162\"></a><code>weinre --httpPort 8081 --boundHost 172.16.28.162</code></h4><h4 id=\"第四步：可以访问之前weinre分配过来的地址，进入后在页面最上部分可以看到-Access-Points-下的-debug-client-user-interface-http-10-1-2-77-8080-client-anonymous\"><a href=\"#第四步：可以访问之前weinre分配过来的地址，进入后在页面最上部分可以看到-Access-Points-下的-debug-client-user-interface-http-10-1-2-77-8080-client-anonymous\" class=\"headerlink\" title=\". 第四步：可以访问之前weinre分配过来的地址，进入后在页面最上部分可以看到 Access Points 下的 debug client user interface http://10.1.2.77:8080/client/#anonymous\"></a>. 第四步：可以访问之前weinre分配过来的地址，进入后在页面最上部分可以看到 <code>Access Points</code> 下的 <code>debug client user interface http://10.1.2.77:8080/client/#anonymous</code></h4><p><img src=\"http://cdn1.showjoy.com/images/9a/9a259c3bbf5d438399842c11d53054c9.png\" alt=\"效果\"></p>\n<p>这是之后要点击的链接 ，我们先往当前网页下方看。可以看到 <code>Target Script</code>栏目</p>\n<p><img src=\"http://cdn1.showjoy.com/images/ad/add8ce371e0e4f52898fe4f652427f50.png\" alt=\"效果\"></p>\n<p>我们需要将<code>Example</code>的<code>script</code>标签复制粘贴到需要调试的项目中去。</p>\n<h4 id=\"第五步：开启本地静态服务器（XMAPP等），进入到需要调试的项目的页面，例如http-10-1-2-77-8000-index-html我是利用nodejs开的一个小型服务器。\"><a href=\"#第五步：开启本地静态服务器（XMAPP等），进入到需要调试的项目的页面，例如http-10-1-2-77-8000-index-html我是利用nodejs开的一个小型服务器。\" class=\"headerlink\" title=\". 第五步：开启本地静态服务器（XMAPP等），进入到需要调试的项目的页面，例如http://10.1.2.77:8000/index.html我是利用nodejs开的一个小型服务器。\"></a>. 第五步：开启本地静态服务器（XMAPP等），进入到需要调试的项目的页面，例如<code>http://10.1.2.77:8000/index.html</code>我是利用<code>nodejs</code>开的一个小型服务器。</h4><p><img src=\"http://cdn1.showjoy.com/images/d5/d53d31ba1bcd41749446ae158e923ed8.png\" alt=\"XI\"></p>\n<h4 id=\"第六步：此时可以回到第四步中的weine分配给你的地址，\"><a href=\"#第六步：此时可以回到第四步中的weine分配给你的地址，\" class=\"headerlink\" title=\". 第六步：此时可以回到第四步中的weine分配给你的地址，\"></a>. 第六步：此时可以回到第四步中的weine分配给你的地址，</h4><p><img src=\"http://cdn1.showjoy.com/images/42/42eadf2d9af545629e14387a9c6c64bf.png\" alt=\"SA\"><br>点击第一条<code>debug client user interface: http://10.1.2.77:8080/client/#anonymous</code>,进入预备调试页面。</p>\n<h4 id=\"第七步：在预备调试页面我们可以看到\"><a href=\"#第七步：在预备调试页面我们可以看到\" class=\"headerlink\" title=\". 第七步：在预备调试页面我们可以看到\"></a>. 第七步：在预备调试页面我们可以看到</h4><p><img src=\"http://cdn1.showjoy.com/images/ca/ca2a26ecf08d4eca807ea1ec2374eee9.png\" alt=\"asd\"><br><code>Targets</code>下有一条可以选择的调试页面，对应着刚刚在本地静态服务器中打开的页面。但是这个页面是PC的，现在我们通过手机（浏览器、APP、微信等）进入这个项目ip地址<code>http://10.1.2.77:8000/index.html</code><br>此时预备调试页面将会出现两条可调试地址<br><img src=\"http://cdn1.showjoy.com/images/42/426b2c9ab5504cc18c77b1da504e7270.png\" alt=\"as\"><br>选择手机端进入后新增的地址。</p>\n<h4 id=\"第八步：点开链接后链接状态从蓝色变成绿色，然后再点击页面左上角的Element按钮。\"><a href=\"#第八步：点开链接后链接状态从蓝色变成绿色，然后再点击页面左上角的Element按钮。\" class=\"headerlink\" title=\".第八步：点开链接后链接状态从蓝色变成绿色，然后再点击页面左上角的Element按钮。\"></a>.第八步：点开链接后链接状态从蓝色变成绿色，然后再点击页面左上角的Element按钮。</h4><p><img src=\"http://cdn1.showjoy.com/images/ae/ae11cb7dc7034bc4981503af603c6300.png\" alt=\"a\"><br>现在就可以在pc端调试，手机端直接显示修改的变化啦。</p>\n<h4 id=\"优点：为何称weinre为万金油呢？因为只要在需要调试的项目的文件中引入weinre给出的-lt-scrip-标签，再配合本地静态服务器的ip。可以在任何ios或安卓机型的包括浏览器和app的webview中去调试。\"><a href=\"#优点：为何称weinre为万金油呢？因为只要在需要调试的项目的文件中引入weinre给出的-lt-scrip-标签，再配合本地静态服务器的ip。可以在任何ios或安卓机型的包括浏览器和app的webview中去调试。\" class=\"headerlink\" title=\"优点：为何称weinre为万金油呢？因为只要在需要调试的项目的文件中引入weinre给出的&lt;scrip 标签，再配合本地静态服务器的ip。可以在任何ios或安卓机型的包括浏览器和app的webview中去调试。\"></a>优点：为何称weinre为万金油呢？因为只要在需要调试的项目的文件中引入weinre给出的&lt;scrip 标签，再配合本地静态服务器的ip。可以在任何ios或安卓机型的包括浏览器和app的webview中去调试。</h4><h4 id=\"缺点：-weinre不支持js的断点调试，这是一个缺憾，并且要在项目中引入额外的调试js标签。\"><a href=\"#缺点：-weinre不支持js的断点调试，这是一个缺憾，并且要在项目中引入额外的调试js标签。\" class=\"headerlink\" title=\"缺点： weinre不支持js的断点调试，这是一个缺憾，并且要在项目中引入额外的调试js标签。\"></a>缺点： weinre不支持js的断点调试，这是一个缺憾，并且要在项目中引入额外的调试js标签。</h4><p>但是对于js断点，可以在js逻辑中埋入console，然后在手机端真实操作，再在pc端的调试器中查看打印信息这种方式来代替。</p>\n<blockquote>\n<p>3、MIHTool</p>\n<h4 id=\"调试chrome-safari浏览器的H5页面\"><a href=\"#调试chrome-safari浏览器的H5页面\" class=\"headerlink\" title=\"调试chrome safari浏览器的H5页面\"></a>调试chrome safari浏览器的H5页面</h4><p>注意关闭翻墙代理噢。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于weinre 开发的一款APP， 只针对ios手机。大概使用方式是在APP内打开需要调试的页面，相应的在pc端浏览器会出现调试器，方可进行调试。<br>使用MIHTool的最大优点之一在于不需要显式的引入调试所需的脚本。在此基础上，作者还增加了一些方便的功能。</p>\n</blockquote>\n<h4 id=\"1-Performance-API\"><a href=\"#1-Performance-API\" class=\"headerlink\" title=\"1. Performance API.\"></a>1. Performance API.</h4><h4 id=\"2-Polyfill管理器-模拟javascript与Native-App互相调用-demo\"><a href=\"#2-Polyfill管理器-模拟javascript与Native-App互相调用-demo\" class=\"headerlink\" title=\"2. Polyfill管理器(模拟javascript与Native App互相调用,demo)\"></a>2. Polyfill管理器(模拟javascript与Native App互相调用,demo)</h4><h4 id=\"3-NPM-Modules-在-web-inspector-console-里通过-require-加载-npm-模块\"><a href=\"#3-NPM-Modules-在-web-inspector-console-里通过-require-加载-npm-模块\" class=\"headerlink\" title=\"3. NPM Modules (在 web inspector console 里通过 require() 加载 npm 模块)\"></a>3. NPM Modules (在 web inspector console 里通过 require() 加载 npm 模块)</h4><p>具体可以看官网：<a href=\"http://www.mihtool.com/\" target=\"_blank\" rel=\"noopener\">http://www.mihtool.com/</a></p>\n<blockquote>\n<p>4、ios模拟器 + mac safari</p>\n</blockquote>\n<h4 id=\"调试safari浏览器的H5页面（可进行js断点调试）\"><a href=\"#调试safari浏览器的H5页面（可进行js断点调试）\" class=\"headerlink\" title=\"调试safari浏览器的H5页面（可进行js断点调试）\"></a>调试safari浏览器的H5页面（可进行js断点调试）</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在没有真机的情况下，可以采用模拟机的方式去运行ios系统下的safari浏览器，然后在safari浏览器内输入想要调试的页面。当然模拟ios系统必须在Xcode这个开发软件下进行。一旦在Xcode里开启了模拟机，再进入模拟机里的safari，之后按照上边介绍过的真机 safari + mac safari介绍的方式进行操作便可。</p>\n<p><img src=\"http://cdn1.showjoy.com/images/ab/ab12718e529e4f03b1e17091e592b694.png\" alt=\"a\"></p>\n<blockquote>\n<p>5、ios模拟器 + mac safari</p>\n</blockquote>\n<h4 id=\"调试公司APP内的webview页面（可进行js断点调试）\"><a href=\"#调试公司APP内的webview页面（可进行js断点调试）\" class=\"headerlink\" title=\"调试公司APP内的webview页面（可进行js断点调试）\"></a>调试公司APP内的webview页面（可进行js断点调试）</h4><p>参考 <a href=\"https://github.com/paulirish/iOS-WebView-App\" target=\"_blank\" rel=\"noopener\">https://github.com/paulirish/iOS-WebView-App</a>，因为不懂IOS开发，也不知道是如何进行的，但大概是在iOS项目内写一些方法抛出一个地址，然后在mac上的safari开发模式内识别出这个地址，然后就可以调试的。默认情况下，mac safari只能识别usb连接的ios设备上的safari浏览器上的H5页面。（上面介绍过）</p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"===========================================\"></a>===========================================</h1><h3 id=\"Android-设备\"><a href=\"#Android-设备\" class=\"headerlink\" title=\"Android 设备\"></a><span style=\"color:red\">Android 设备</span></h3><blockquote>\n<p>1、Android chrome 真机 + pc chrome</p>\n</blockquote>\n<h4 id=\"调试移动端浏览器的H5页面（可进行js断点调试）\"><a href=\"#调试移动端浏览器的H5页面（可进行js断点调试）\" class=\"headerlink\" title=\"调试移动端浏览器的H5页面（可进行js断点调试）\"></a>调试移动端浏览器的H5页面（可进行js断点调试）</h4><p>在安卓4.4版本以下的安卓机子，手机上安装了chrome的情况下，并且打开需要调试的页面，可以打开usb开发者模式，在pc端chrome地址栏输入chrome://inspect便可找到相应的手机的相应打开wap页面。调试方法跟pc chrome几乎一致。</p>\n<p>在第一次使用的时候点击inspect会弹出空白的调试页面，这个时候需要翻墙，再点inspect才会出现正常的调试页面。</p>\n<h4 id=\"优点：可进行js断点调试。\"><a href=\"#优点：可进行js断点调试。\" class=\"headerlink\" title=\"优点：可进行js断点调试。\"></a>优点：可进行js断点调试。</h4><h4 id=\"缺点：浏览器限制。\"><a href=\"#缺点：浏览器限制。\" class=\"headerlink\" title=\"缺点：浏览器限制。\"></a>缺点：浏览器限制。</h4><h4 id=\"调试公司APP内的webview页面（可进行js断点调试）-1\"><a href=\"#调试公司APP内的webview页面（可进行js断点调试）-1\" class=\"headerlink\" title=\"调试公司APP内的webview页面（可进行js断点调试）\"></a>调试公司APP内的webview页面（可进行js断点调试）</h4><p>在安卓4.4版本以上的安卓机子，手机通过usb连接mac电脑后，手机打开usb开发者模式后，在电脑chrome的chrome://inspect页面里会找到除了手机浏览器打开的页面，还会找到App内打开的webview的页面。</p>\n<p><img src=\"http://cdn1.showjoy.com/images/ce/ce98e4652b7f47c99612a3081e4e785f.png\" alt=\"a\"></p>\n<p>点开<code>inspect</code>就是一个调试界面。</p>\n<p>进行webview页面的调试 需要在应用的代码内设置才能生效（根据<a href=\"https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md#%E8%B0%83%E8%AF%95-webviews\" target=\"_blank\" rel=\"noopener\">https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md#%E8%B0%83%E8%AF%95-webviews</a>）</p>\n<blockquote>\n<p>2、Android 模拟机 + pc chrome</p>\n</blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;安卓模拟机配置成功的情况下调试的方式跟上面1方法是一样的，在安卓4.4版本以上才能进行webview的调试。<br>&nbsp;&nbsp;&nbsp;&nbsp;下面就介绍下大名鼎鼎的安卓模拟器genymotion.个人使用是免费的。</p>\n<ol>\n<li>在其官网注册（必须）<a href=\"https://www.genymotion.com/\" target=\"_blank\" rel=\"noopener\">https://www.genymotion.com/</a></li>\n<li>在其官网下载最新的软件，下载完将genymotion和genymotion shell都放到应用程序内。</li>\n<li>下完这个之后还需要下载virtualBox，<a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\" rel=\"noopener\">https://www.virtualbox.org/wiki/Downloads</a></li>\n<li>之后就可以选择不同版本的模拟器了，网上的教程都是推荐下载安卓4.3版本，因为4.3版本有对应的补丁，装上后可以避免一些应用下载失败。但4.3版本不支持调试webview。我推荐下载 HTC one 4.4.4版本，本人试了很多版本，只有这个可以调试我司App内嵌的H5页面。</li>\n</ol>\n<p><img src=\"http://cdn1.showjoy.com/images/b3/b38d848454e34984a0436989c4847139.png\" alt=\"a\"></p>\n<p>推荐一个专门讲解genymotion的资源。<br><a href=\"http://www.ziliao1.com/Article/Show/DCDFC03FE4902A1AC353C74695DAC2E9.html\" target=\"_blank\" rel=\"noopener\">http://www.ziliao1.com/Article/Show/DCDFC03FE4902A1AC353C74695DAC2E9.html</a><br>以及模拟机版本下载失败的解决办法<br><a href=\"http://www.cnblogs.com/wliangde/p/3678649.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/wliangde/p/3678649.html</a></p>\n<blockquote>\n<p>3、万金油 weinre + pc chrome</p>\n</blockquote>\n<h4 id=\"调试任意浏览器的H5页面以及webview页面-1\"><a href=\"#调试任意浏览器的H5页面以及webview页面-1\" class=\"headerlink\" title=\"调试任意浏览器的H5页面以及webview页面\"></a>调试任意浏览器的H5页面以及webview页面</h4><p>这个方法在之上iOS 部分已经讲解过了。weinre通吃安卓与ios，兼容性不要太高。</p>\n<blockquote>\n<p>4、微信调试</p>\n</blockquote>\n<h4 id=\"调试微信客户端的webview页面（支持js断点调试）\"><a href=\"#调试微信客户端的webview页面（支持js断点调试）\" class=\"headerlink\" title=\"调试微信客户端的webview页面（支持js断点调试）\"></a>调试微信客户端的webview页面（支持js断点调试）</h4><p>目前微信已经出了官方的调试工具，照着做就好了。<br><a href=\"http://blog.qqbrowser.cc/\" target=\"_blank\" rel=\"noopener\">http://blog.qqbrowser.cc/</a></p>\n<blockquote>\n<p>5、UC浏览器 + 真机 + mac chrome</p>\n</blockquote>\n<h4 id=\"调试uc浏览器的H5页面（支持js断点）\"><a href=\"#调试uc浏览器的H5页面（支持js断点）\" class=\"headerlink\" title=\"调试uc浏览器的H5页面（支持js断点）\"></a>调试uc浏览器的H5页面（支持js断点）</h4><p>方法一是真机加上chrome浏览器，这个方法是真机加uc浏览器，<br><a href=\"http://www.uc.cn/business/developer/\" target=\"_blank\" rel=\"noopener\">http://www.uc.cn/business/developer/</a></p>\n<p>++++++++++++++++++++++++++++++++++<br>++++++++++++++++++++++++++++++++++</p>\n<p><span style=\"color:red\">总结</span></p>\n<h4 id=\"上面罗列的多种方法，在本地开发的情况下基本都已经覆盖到了。但是如果线上页面出现bug了。该怎么办？最快的方法直接对线上页面进行调试。\"><a href=\"#上面罗列的多种方法，在本地开发的情况下基本都已经覆盖到了。但是如果线上页面出现bug了。该怎么办？最快的方法直接对线上页面进行调试。\" class=\"headerlink\" title=\"上面罗列的多种方法，在本地开发的情况下基本都已经覆盖到了。但是如果线上页面出现bug了。该怎么办？最快的方法直接对线上页面进行调试。\"></a>上面罗列的多种方法，在本地开发的情况下基本都已经覆盖到了。但是如果线上页面出现bug了。该怎么办？最快的方法直接对线上页面进行调试。</h4><p>先介绍一下mac抓包工具<code>charles</code></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=400497314&idx=1&sn=850fad741fdb635c2403bafb2f1e636f&scene=1&srcid=1119TqsnfhBHSKzA2BUja9mk&key=ac89cba618d2d97693fea624e810ff69a7385f5209ab2a26ec029ca8f618e760e87de444299655bad41c5d1a7dbbc76e&ascene=0&uin=Mjg1NTY1OTY2MA%3D%3D&devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.10.4+build(14E46\" target=\"_blank\" rel=\"noopener\">charles 教程</a></p>\n<p>1、截取http网络封包<br>2、支持修改网络请求参数<br>3、支持网络请求的截获并动态修改<br>4、支持重发网络请求<br>5、模拟网速网络</p>\n<p>刚刚给出的链接中有charles的全方位解读，我这里就简单介绍下http网络封包。</p>\n<p>在pc上charles可以很容易的创建一个代理，将设定的一部分网络请求全部转到charles代理上，并且可以将其中某个资源map到本地，从而实现使用本地代码调试线上代码的功能。</p>\n<p>但是我们现在是调试手机等移动端设备，但稍微做一些设置，就可以实现通过pc上的charles去代理移动端去请求资源。然后将需要的资源map到本地，进行修改和调试。</p>\n<p>这样设置过后的效果就是，在pc端修改代码，移动端线上的页面去请求本地修改后的代码并展示。</p>\n<p>讲完了charles,问题回到如何快速调试线上页面。</p>\n<h4 id=\"如果是H5页面\"><a href=\"#如果是H5页面\" class=\"headerlink\" title=\"如果是H5页面\"></a>如果是H5页面</h4><p>遇上H5页面在PCchrome调试器上跟真实手机上的效果不一致时，可以使用万金油weinre，结合charles，就可以调试这种机型各种浏览器上的问题了。当然也可以使用上面提到的其他方法，都是适用的。</p>\n<h4 id=\"如果是webview\"><a href=\"#如果是webview\" class=\"headerlink\" title=\"如果是webview\"></a>如果是webview</h4><p>同样不能少的是charles抓包，如果是安卓可以配合genymotion模拟器进行模拟。使用方法上文讲述过，再推荐一篇专门的文章：<a href=\"http://div.io/topic/1449。这篇文章讲到如何用charles监听genymotion。\" target=\"_blank\" rel=\"noopener\">http://div.io/topic/1449。这篇文章讲到如何用charles监听genymotion。</a><br>如果是ios，也可以采用这样的方式，即模拟器+charles+mac safari。使用方法在上文的ios章节讲述过。<br>当然也是可以使用万金油weinre。weinre+charles调试App内的H5页面也是很方便的。跟上面两种方法比较，缺少的就是js断点调试功能。</p>\n<p>===========================================</p>\n<h4 id=\"声明-本文转载自lvdada的博客\"><a href=\"#声明-本文转载自lvdada的博客\" class=\"headerlink\" title=\"声明:本文转载自lvdada的博客\"></a>声明:本文转载自<a href=\"http://lvdada.org/2015/12/20/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95/\" target=\"_blank\" rel=\"noopener\">lvdada的博客</a></h4><h4 id=\"完！\"><a href=\"#完！\" class=\"headerlink\" title=\"完！\"></a>完！</h4><h4 id=\"借鉴-原创文章，转载请注明出处！\"><a href=\"#借鉴-原创文章，转载请注明出处！\" class=\"headerlink\" title=\"借鉴+原创文章，转载请注明出处！\"></a>借鉴+原创文章，转载请注明出处！</h4>"},{"title":"网页ICON 优化","date":"2016-01-22T02:49:33.000Z","_content":"> **Css Sprite**\n\n\n\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/d1f9917c-1bac-4b65-9d48-0d1155ef9a44)\n\n> **Icon Font **\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/669e5e00-8c8b-4e44-853e-aba7ef3fc499)\n\n\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/21a4616f-85ba-4514-8878-392a0b6cabc0)\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/961b8eda-7fb8-47eb-b667-957ababb813a)\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/aee97199-8074-47d2-8b9b-ef26c0bc0e97)\n\n\n<!-- more -->\n\n> icomoon.io字体引入\n```stylus\nfont-face\n  font-family: 'music-icon'\n  src: url('../fonts/music-icon.eot?2qevqt')\n  src: url('../fonts/music-icon.eot?2qevqt#iefix') format('embedded-opentype'),\n       url('../fonts/music-icon.ttf?2qevqt') format('truetype'),\n       url('../fonts/music-icon.woff?2qevqt') format('woff'),\n       url('../fonts/music-icon.svg?2qevqt#music-icon') format('svg')\n  font-weight: normal\n  font-style: normal\n  //匹配class中以icon-开头的  和   class中包含icon-的所有样式\n[class^=\"icon-\"], [class*=\" icon-\"]\n  /* use !important to prevent issues with browser extensions that change fonts */\n  font-family: 'music-icon' !important\n  speak: none\n  font-style: normal\n  font-weight: normal\n  font-variant: normal\n  text-transform: none\n  line-height: 1\n\n  /* Better Font Rendering =========== */\n  // 用于webkit引擎中设置字体的抗锯齿，光滑度属性\n  -webkit-font-smoothing: antialiased\n  // 用于mac os系统中 火狐浏览器 抗锯齿属性\n  -moz-osx-font-smoothing: grayscale\n```\n![Alt text](https://app.yinxiang.com/shard/s72/res/396d9f7d-b3a4-4353-957f-672458711e45)\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/88df8185-e4bf-4dd8-acdb-e042d6338295)\n\n\n>### 注意：由于使用icomoon 国外网站慢   so 可以使用 [阿里巴巴矢量图库](http://www.iconfont.cn/collections)\n","source":"_posts/webIcon.md","raw":"---\ntitle: 网页ICON 优化\ndate: 2016-01-22 10:49:33\ntags:\n- css\ncategories:\n- CSS\n\n---\n> **Css Sprite**\n\n\n\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/d1f9917c-1bac-4b65-9d48-0d1155ef9a44)\n\n> **Icon Font **\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/669e5e00-8c8b-4e44-853e-aba7ef3fc499)\n\n\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/21a4616f-85ba-4514-8878-392a0b6cabc0)\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/961b8eda-7fb8-47eb-b667-957ababb813a)\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/aee97199-8074-47d2-8b9b-ef26c0bc0e97)\n\n\n<!-- more -->\n\n> icomoon.io字体引入\n```stylus\nfont-face\n  font-family: 'music-icon'\n  src: url('../fonts/music-icon.eot?2qevqt')\n  src: url('../fonts/music-icon.eot?2qevqt#iefix') format('embedded-opentype'),\n       url('../fonts/music-icon.ttf?2qevqt') format('truetype'),\n       url('../fonts/music-icon.woff?2qevqt') format('woff'),\n       url('../fonts/music-icon.svg?2qevqt#music-icon') format('svg')\n  font-weight: normal\n  font-style: normal\n  //匹配class中以icon-开头的  和   class中包含icon-的所有样式\n[class^=\"icon-\"], [class*=\" icon-\"]\n  /* use !important to prevent issues with browser extensions that change fonts */\n  font-family: 'music-icon' !important\n  speak: none\n  font-style: normal\n  font-weight: normal\n  font-variant: normal\n  text-transform: none\n  line-height: 1\n\n  /* Better Font Rendering =========== */\n  // 用于webkit引擎中设置字体的抗锯齿，光滑度属性\n  -webkit-font-smoothing: antialiased\n  // 用于mac os系统中 火狐浏览器 抗锯齿属性\n  -moz-osx-font-smoothing: grayscale\n```\n![Alt text](https://app.yinxiang.com/shard/s72/res/396d9f7d-b3a4-4353-957f-672458711e45)\n\n![Alt text](https://app.yinxiang.com/shard/s72/res/88df8185-e4bf-4dd8-acdb-e042d6338295)\n\n\n>### 注意：由于使用icomoon 国外网站慢   so 可以使用 [阿里巴巴矢量图库](http://www.iconfont.cn/collections)\n","slug":"webIcon","published":1,"updated":"2018-03-08T02:53:31.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc7e0017rexm38bv5kxr","content":"<blockquote>\n<p><strong>Css Sprite</strong></p>\n</blockquote>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/d1f9917c-1bac-4b65-9d48-0d1155ef9a44\" alt=\"Alt text\"></p>\n<blockquote>\n<p><strong>Icon Font </strong></p>\n</blockquote>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/669e5e00-8c8b-4e44-853e-aba7ef3fc499\" alt=\"Alt text\"></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/21a4616f-85ba-4514-8878-392a0b6cabc0\" alt=\"Alt text\"></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/961b8eda-7fb8-47eb-b667-957ababb813a\" alt=\"Alt text\"></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/aee97199-8074-47d2-8b9b-ef26c0bc0e97\" alt=\"Alt text\"></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>icomoon.io字体引入<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">font</span>-face</div><div class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'music-icon'</span></div><div class=\"line\">  src: url(<span class=\"string\">'../fonts/music-icon.eot?2qevqt'</span>)</div><div class=\"line\">  src: url(<span class=\"string\">'../fonts/music-icon.eot?2qevqt#iefix'</span>) format(<span class=\"string\">'embedded-opentype'</span>),</div><div class=\"line\">       url(<span class=\"string\">'../fonts/music-icon.ttf?2qevqt'</span>) format(<span class=\"string\">'truetype'</span>),</div><div class=\"line\">       url(<span class=\"string\">'../fonts/music-icon.woff?2qevqt'</span>) format(<span class=\"string\">'woff'</span>),</div><div class=\"line\">       url(<span class=\"string\">'../fonts/music-icon.svg?2qevqt#music-icon'</span>) format(<span class=\"string\">'svg'</span>)</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: normal</div><div class=\"line\">  <span class=\"attribute\">font-style</span>: normal</div><div class=\"line\">  <span class=\"comment\">//匹配class中以icon-开头的  和   class中包含icon-的所有样式</span></div><div class=\"line\">[class^=<span class=\"string\">\"icon-\"</span>], [class*=<span class=\"string\">\" icon-\"</span>]</div><div class=\"line\">  <span class=\"comment\">/* use !important to prevent issues with browser extensions that change fonts */</span></div><div class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'music-icon'</span> !important</div><div class=\"line\">  speak: <span class=\"attribute\">none</span></div><div class=\"line\">  <span class=\"attribute\">font-style</span>: normal</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: normal</div><div class=\"line\">  <span class=\"attribute\">font-variant</span>: normal</div><div class=\"line\">  <span class=\"attribute\">text-transform</span>: none</div><div class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* Better Font Rendering =========== */</span></div><div class=\"line\">  <span class=\"comment\">// 用于webkit引擎中设置字体的抗锯齿，光滑度属性</span></div><div class=\"line\">  -webkit-<span class=\"attribute\">font</span>-smoothing: antialiased</div><div class=\"line\">  <span class=\"comment\">// 用于mac os系统中 火狐浏览器 抗锯齿属性</span></div><div class=\"line\">  -moz-osx-<span class=\"attribute\">font</span>-smoothing: grayscale</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/396d9f7d-b3a4-4353-957f-672458711e45\" alt=\"Alt text\"></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/88df8185-e4bf-4dd8-acdb-e042d6338295\" alt=\"Alt text\"></p>\n<blockquote>\n<h3 id=\"注意：由于使用icomoon-国外网站慢-so-可以使用-阿里巴巴矢量图库\"><a href=\"#注意：由于使用icomoon-国外网站慢-so-可以使用-阿里巴巴矢量图库\" class=\"headerlink\" title=\"注意：由于使用icomoon 国外网站慢   so 可以使用 阿里巴巴矢量图库\"></a>注意：由于使用icomoon 国外网站慢   so 可以使用 <a href=\"http://www.iconfont.cn/collections\" target=\"_blank\" rel=\"noopener\">阿里巴巴矢量图库</a></h3></blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p><strong>Css Sprite</strong></p>\n</blockquote>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/d1f9917c-1bac-4b65-9d48-0d1155ef9a44\" alt=\"Alt text\"></p>\n<blockquote>\n<p><strong>Icon Font </strong></p>\n</blockquote>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/669e5e00-8c8b-4e44-853e-aba7ef3fc499\" alt=\"Alt text\"></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/21a4616f-85ba-4514-8878-392a0b6cabc0\" alt=\"Alt text\"></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/961b8eda-7fb8-47eb-b667-957ababb813a\" alt=\"Alt text\"></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/aee97199-8074-47d2-8b9b-ef26c0bc0e97\" alt=\"Alt text\"></p>","more":"<blockquote>\n<p>icomoon.io字体引入<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">font</span>-face</div><div class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'music-icon'</span></div><div class=\"line\">  src: url(<span class=\"string\">'../fonts/music-icon.eot?2qevqt'</span>)</div><div class=\"line\">  src: url(<span class=\"string\">'../fonts/music-icon.eot?2qevqt#iefix'</span>) format(<span class=\"string\">'embedded-opentype'</span>),</div><div class=\"line\">       url(<span class=\"string\">'../fonts/music-icon.ttf?2qevqt'</span>) format(<span class=\"string\">'truetype'</span>),</div><div class=\"line\">       url(<span class=\"string\">'../fonts/music-icon.woff?2qevqt'</span>) format(<span class=\"string\">'woff'</span>),</div><div class=\"line\">       url(<span class=\"string\">'../fonts/music-icon.svg?2qevqt#music-icon'</span>) format(<span class=\"string\">'svg'</span>)</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: normal</div><div class=\"line\">  <span class=\"attribute\">font-style</span>: normal</div><div class=\"line\">  <span class=\"comment\">//匹配class中以icon-开头的  和   class中包含icon-的所有样式</span></div><div class=\"line\">[class^=<span class=\"string\">\"icon-\"</span>], [class*=<span class=\"string\">\" icon-\"</span>]</div><div class=\"line\">  <span class=\"comment\">/* use !important to prevent issues with browser extensions that change fonts */</span></div><div class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'music-icon'</span> !important</div><div class=\"line\">  speak: <span class=\"attribute\">none</span></div><div class=\"line\">  <span class=\"attribute\">font-style</span>: normal</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: normal</div><div class=\"line\">  <span class=\"attribute\">font-variant</span>: normal</div><div class=\"line\">  <span class=\"attribute\">text-transform</span>: none</div><div class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* Better Font Rendering =========== */</span></div><div class=\"line\">  <span class=\"comment\">// 用于webkit引擎中设置字体的抗锯齿，光滑度属性</span></div><div class=\"line\">  -webkit-<span class=\"attribute\">font</span>-smoothing: antialiased</div><div class=\"line\">  <span class=\"comment\">// 用于mac os系统中 火狐浏览器 抗锯齿属性</span></div><div class=\"line\">  -moz-osx-<span class=\"attribute\">font</span>-smoothing: grayscale</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/396d9f7d-b3a4-4353-957f-672458711e45\" alt=\"Alt text\"></p>\n<p><img src=\"https://app.yinxiang.com/shard/s72/res/88df8185-e4bf-4dd8-acdb-e042d6338295\" alt=\"Alt text\"></p>\n<blockquote>\n<h3 id=\"注意：由于使用icomoon-国外网站慢-so-可以使用-阿里巴巴矢量图库\"><a href=\"#注意：由于使用icomoon-国外网站慢-so-可以使用-阿里巴巴矢量图库\" class=\"headerlink\" title=\"注意：由于使用icomoon 国外网站慢   so 可以使用 阿里巴巴矢量图库\"></a>注意：由于使用icomoon 国外网站慢   so 可以使用 <a href=\"http://www.iconfont.cn/collections\" target=\"_blank\" rel=\"noopener\">阿里巴巴矢量图库</a></h3></blockquote>"},{"title":"js中的跨域处理","date":"2015-09-17T05:09:47.000Z","_content":"### 1. 什么是跨域？\n<img style=\"width: 50%;\" src=\"http://omy3ifpvu.bkt.clouddn.com/kuayu.png\">\n\n### 2. 跨域解决方案:\n#### ①代理方式：zhang yu  pingguo ceshi  asd\n","source":"_posts/‘js中的跨域处理’.md","raw":"---\ntitle: js中的跨域处理\ndate: 2015-09-17 13:09:47\ntags:\n- js\ncategories:\n- Javascript\n---\n### 1. 什么是跨域？\n<img style=\"width: 50%;\" src=\"http://omy3ifpvu.bkt.clouddn.com/kuayu.png\">\n\n### 2. 跨域解决方案:\n#### ①代理方式：zhang yu  pingguo ceshi  asd\n","slug":"‘js中的跨域处理’","published":1,"updated":"2018-03-08T02:35:09.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc7f001brexmthlc46hs","content":"<h3 id=\"1-什么是跨域？\"><a href=\"#1-什么是跨域？\" class=\"headerlink\" title=\"1. 什么是跨域？\"></a>1. 什么是跨域？</h3><p><img style=\"width: 50%;\" src=\"http://omy3ifpvu.bkt.clouddn.com/kuayu.png\"></p>\n<h3 id=\"2-跨域解决方案\"><a href=\"#2-跨域解决方案\" class=\"headerlink\" title=\"2. 跨域解决方案:\"></a>2. 跨域解决方案:</h3><h4 id=\"①代理方式：zhang-yu-pingguo-ceshi-asd\"><a href=\"#①代理方式：zhang-yu-pingguo-ceshi-asd\" class=\"headerlink\" title=\"①代理方式：zhang yu  pingguo ceshi  asd\"></a>①代理方式：zhang yu  pingguo ceshi  asd</h4>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-什么是跨域？\"><a href=\"#1-什么是跨域？\" class=\"headerlink\" title=\"1. 什么是跨域？\"></a>1. 什么是跨域？</h3><p><img style=\"width: 50%;\" src=\"http://omy3ifpvu.bkt.clouddn.com/kuayu.png\"></p>\n<h3 id=\"2-跨域解决方案\"><a href=\"#2-跨域解决方案\" class=\"headerlink\" title=\"2. 跨域解决方案:\"></a>2. 跨域解决方案:</h3><h4 id=\"①代理方式：zhang-yu-pingguo-ceshi-asd\"><a href=\"#①代理方式：zhang-yu-pingguo-ceshi-asd\" class=\"headerlink\" title=\"①代理方式：zhang yu  pingguo ceshi  asd\"></a>①代理方式：zhang yu  pingguo ceshi  asd</h4>"},{"title":"ecma6 学习总结","date":"2016-12-06T06:56:27.000Z","_content":"\n<h6 style=\"color:green\">变量声明--let</span>\n---\n<b>let特性</b>\n1. 不可以重复申明\n2. 没有预解析过程（即变量声明提前）\n3. 块级作用域 ：一个变量或者函数只有在该区域才起作用\n\t````javascript\n\t { //块级作用域\n\t\tlet a = 1;\n\t\tconsole.log(a)\n\t }\n\n\t //举个例子：for循环依次输出 0~10\n\t for(var i = 0 ;i<10;i++){\n\t  setTimeout(function(){\n\t  \tconsole.log(i);//解析：上述结果 输出10次i ，原因为每次for循环结束后 setTimeout还在走，所以输出的i还是全局的i，所以一直是10\n\t  },0)\n\t }\n\t //我们若想依次输出0~10 我们可以使用一个闭包函数， 在闭包函数中会形成一个作用域，将i以形参的形式传入，这样每次执行循环的时候，变量就会存在于闭包作用域中。\n\t for(var i = 0 ;i<10;i++){\n\t    (function(i){\n\t\t setTimeout(function (argument) {\n\t\t\t console.log(i);  // 0,1,2,3,4,5,6,7,8,9,10\n\t\t })\n\t    })(i)\n\t}\n\t//在ecma6 中 我们可以使用let 来实现 ,let 将循环变成一个块级作用域，第一次循环完成之后，i就是那个0\n\tfor(let i = 0;i<10;i++){\n\t\tsetTimeout(function (argument) {\n\t\t\tconsole.log(i);  // 0,1,2,3,4,5,6,7,8,9,10\n\t\t})\n\t}\n\t````\n\n\t<!-- more -->\n4. 暂存死区   相似于 预解析  \n\n<h6 style=\"color:green\">常量声明--const</span>\n---\n<b >const简介:</b>防止命名冲突  存一些东西用于对比  声明后不能被修改(变量值不可修改，若是一个对象是可以被修改的)\n\n```javascript\n\tconst a = 1 ;\n\tconsole.log(a) //1\n\t// const a = 2 ;\n\tconsole.log(a) //报错\n\n\tconst b = {name:1};\n\tconsole.log(a.name);\n\tab.name = 2 ;\n\tconsole.log(a) // {name:2}\n```\n\n<h6 style=\"color:green\">变量的<b>\"解构\"</b>赋值</span>\n---\n<b >解构赋值简介:</b> Es6 允许按照一定的模式，通过一定的格式将数组和对象中的值提取出来，赋给变量\n```javascript\n\"use strict\"\n//数组的解构赋值 ： 按照对应的顺序解构\nvar arr = [1,2,3] ;\nvar [a,b,c] = arr ;\nconsole.log(a,b,c)  // 1,2,3\nvar arr1  = [1,[2,3]] ;\nvar [d,[e,f]] =  arr ;\nconsole.log(d,e,f)  // 1,2,3\n//对象的解构赋值 ： 按照 对象的属性名称进行解构   和顺序无关 ,方便从对象里面拿到对应的值\nvar obj = {\n\tfoo:function(){},\n\to:{},\n\tarr:[],\n\tstr:'abc'\n}\nvar {foo,o,arr,str} = obj ;\nconsole.log(foo,o,arr,str) ; // function(){}  {}  []  abc    \n//值的交换\nvar x = 1 ;\nvar y = 2 ;\nvar [x,y] = [y,x];\nconsole.log(x,y) ; //2 1\n````\n\n<h6 style=\"color:green\">ES6字符串的扩展</span>\n---\n```javascript\n/*模板字符串*/\n var name = '狮父' ;\n var age = '18' ;\n//传统字符串拼接做法：\n var str = \"你的名字是：\"+name+\"你的年龄是\"+age ;\n console.log(str)  \n//使用模板字符串\n varstr = `你的名字是${name},你的年龄是${age}`  //注意：使用反引号 `do something` 来包含,{}中可以进行运算 和 对象.属性\n/*字符串复制str.repeat(num);*/\n var str = a ;\n console.log(a.repeat(10)) // aaaaaaaaaa\n/*字符串的查找 str.includes()*/\n var str = 'abc' ;\n console.log(str.includes('a'))  //true\n/*查找对应字符是否在首部或者尾部*/\n var str = \"shifu\" ;\n str.startsWith('shi') // true ;\n str.endsWith('u') ; //true ;\n```\n<h6 style=\"color:green\">ES6数值的扩展</span>\n---\n```javascript\n/*二进制和八进制表示法:ES6提供使用前缀Ob和Oo表示 二进制八进制*/\nvar a = 0b11 ; // 3\nvar a = 0o11 ; // 9\n/*Math 方法的扩展*/\n// 取掉小数点\nvar num = 1.234;\nconsole.log(Math.trunc(num)) // 1\n//判断一个数字是正数负数,正0还是0\nvar num1 = 0 ;\nconsole.log(Math.sign(0)) //0 ;\nconsole.log(Math.sign(-0)) //  -0 ;\n//勾股定理  返回所有平方和的平方根\nconsole.log(Math.hypot(3,4))  //5    \n```\n<h6 style=\"color:green\">ES6数组的扩展</span>\n---\n```javascript\n/*转数组*/\n\"use strict\"\nvar divs = document.getElementsByTagName('div')   //获取到类数组\n//es5做法\nvar ele = [].slice.call('div') ; // []\n//es6 做法\nvar eles =  Array.from(divs) ;   //[]\n//也可以字符串转数组\nvar str = 'abc' ;\nconsole.log(Array.from(str))   // ['a','b','c']\n//将参数转换成数组   es5中:var arr = new Array(5) ,arr.length == 5 ;\nvar arr  = Array.of(a,b,c,d,e) ;\nconsole.log(arr)  // [] ;\n/*数组查找元素*/\n//语法:arr.find()   arr.findIndex()\n//参数:1.回掉函数  2.回掉函数中的this指向\n//执行过程:遍历整个数组,遍历的过程中调用回调函数，如果回调函数的返回值为true，则返回当前正在遍历的元素，如果所有的元素都不符合条件则返回undefined\nvar arr = [1,2,3,4,5] ;\nvar n = arr.find(function(value,index,ar){\n\tconsole.log(value) ; // 遍历的当前值  1\n\tconsole.log(index) ; // 遍历值所处的位置索引 0\n\tconsole.log(ar) ; // 当前正在遍历的数组本身  [1,2,3,4,5]\n})\n\n\n```\n/*new*/\n","source":"_posts/学习总结.md","raw":"---\ntitle: 'ecma6 学习总结'\ndate: 2016-12-06 14:56:27\ntags:\n- es6\ncategories:\n- EcmaJs6\n---\n\n<h6 style=\"color:green\">变量声明--let</span>\n---\n<b>let特性</b>\n1. 不可以重复申明\n2. 没有预解析过程（即变量声明提前）\n3. 块级作用域 ：一个变量或者函数只有在该区域才起作用\n\t````javascript\n\t { //块级作用域\n\t\tlet a = 1;\n\t\tconsole.log(a)\n\t }\n\n\t //举个例子：for循环依次输出 0~10\n\t for(var i = 0 ;i<10;i++){\n\t  setTimeout(function(){\n\t  \tconsole.log(i);//解析：上述结果 输出10次i ，原因为每次for循环结束后 setTimeout还在走，所以输出的i还是全局的i，所以一直是10\n\t  },0)\n\t }\n\t //我们若想依次输出0~10 我们可以使用一个闭包函数， 在闭包函数中会形成一个作用域，将i以形参的形式传入，这样每次执行循环的时候，变量就会存在于闭包作用域中。\n\t for(var i = 0 ;i<10;i++){\n\t    (function(i){\n\t\t setTimeout(function (argument) {\n\t\t\t console.log(i);  // 0,1,2,3,4,5,6,7,8,9,10\n\t\t })\n\t    })(i)\n\t}\n\t//在ecma6 中 我们可以使用let 来实现 ,let 将循环变成一个块级作用域，第一次循环完成之后，i就是那个0\n\tfor(let i = 0;i<10;i++){\n\t\tsetTimeout(function (argument) {\n\t\t\tconsole.log(i);  // 0,1,2,3,4,5,6,7,8,9,10\n\t\t})\n\t}\n\t````\n\n\t<!-- more -->\n4. 暂存死区   相似于 预解析  \n\n<h6 style=\"color:green\">常量声明--const</span>\n---\n<b >const简介:</b>防止命名冲突  存一些东西用于对比  声明后不能被修改(变量值不可修改，若是一个对象是可以被修改的)\n\n```javascript\n\tconst a = 1 ;\n\tconsole.log(a) //1\n\t// const a = 2 ;\n\tconsole.log(a) //报错\n\n\tconst b = {name:1};\n\tconsole.log(a.name);\n\tab.name = 2 ;\n\tconsole.log(a) // {name:2}\n```\n\n<h6 style=\"color:green\">变量的<b>\"解构\"</b>赋值</span>\n---\n<b >解构赋值简介:</b> Es6 允许按照一定的模式，通过一定的格式将数组和对象中的值提取出来，赋给变量\n```javascript\n\"use strict\"\n//数组的解构赋值 ： 按照对应的顺序解构\nvar arr = [1,2,3] ;\nvar [a,b,c] = arr ;\nconsole.log(a,b,c)  // 1,2,3\nvar arr1  = [1,[2,3]] ;\nvar [d,[e,f]] =  arr ;\nconsole.log(d,e,f)  // 1,2,3\n//对象的解构赋值 ： 按照 对象的属性名称进行解构   和顺序无关 ,方便从对象里面拿到对应的值\nvar obj = {\n\tfoo:function(){},\n\to:{},\n\tarr:[],\n\tstr:'abc'\n}\nvar {foo,o,arr,str} = obj ;\nconsole.log(foo,o,arr,str) ; // function(){}  {}  []  abc    \n//值的交换\nvar x = 1 ;\nvar y = 2 ;\nvar [x,y] = [y,x];\nconsole.log(x,y) ; //2 1\n````\n\n<h6 style=\"color:green\">ES6字符串的扩展</span>\n---\n```javascript\n/*模板字符串*/\n var name = '狮父' ;\n var age = '18' ;\n//传统字符串拼接做法：\n var str = \"你的名字是：\"+name+\"你的年龄是\"+age ;\n console.log(str)  \n//使用模板字符串\n varstr = `你的名字是${name},你的年龄是${age}`  //注意：使用反引号 `do something` 来包含,{}中可以进行运算 和 对象.属性\n/*字符串复制str.repeat(num);*/\n var str = a ;\n console.log(a.repeat(10)) // aaaaaaaaaa\n/*字符串的查找 str.includes()*/\n var str = 'abc' ;\n console.log(str.includes('a'))  //true\n/*查找对应字符是否在首部或者尾部*/\n var str = \"shifu\" ;\n str.startsWith('shi') // true ;\n str.endsWith('u') ; //true ;\n```\n<h6 style=\"color:green\">ES6数值的扩展</span>\n---\n```javascript\n/*二进制和八进制表示法:ES6提供使用前缀Ob和Oo表示 二进制八进制*/\nvar a = 0b11 ; // 3\nvar a = 0o11 ; // 9\n/*Math 方法的扩展*/\n// 取掉小数点\nvar num = 1.234;\nconsole.log(Math.trunc(num)) // 1\n//判断一个数字是正数负数,正0还是0\nvar num1 = 0 ;\nconsole.log(Math.sign(0)) //0 ;\nconsole.log(Math.sign(-0)) //  -0 ;\n//勾股定理  返回所有平方和的平方根\nconsole.log(Math.hypot(3,4))  //5    \n```\n<h6 style=\"color:green\">ES6数组的扩展</span>\n---\n```javascript\n/*转数组*/\n\"use strict\"\nvar divs = document.getElementsByTagName('div')   //获取到类数组\n//es5做法\nvar ele = [].slice.call('div') ; // []\n//es6 做法\nvar eles =  Array.from(divs) ;   //[]\n//也可以字符串转数组\nvar str = 'abc' ;\nconsole.log(Array.from(str))   // ['a','b','c']\n//将参数转换成数组   es5中:var arr = new Array(5) ,arr.length == 5 ;\nvar arr  = Array.of(a,b,c,d,e) ;\nconsole.log(arr)  // [] ;\n/*数组查找元素*/\n//语法:arr.find()   arr.findIndex()\n//参数:1.回掉函数  2.回掉函数中的this指向\n//执行过程:遍历整个数组,遍历的过程中调用回调函数，如果回调函数的返回值为true，则返回当前正在遍历的元素，如果所有的元素都不符合条件则返回undefined\nvar arr = [1,2,3,4,5] ;\nvar n = arr.find(function(value,index,ar){\n\tconsole.log(value) ; // 遍历的当前值  1\n\tconsole.log(index) ; // 遍历值所处的位置索引 0\n\tconsole.log(ar) ; // 当前正在遍历的数组本身  [1,2,3,4,5]\n})\n\n\n```\n/*new*/\n","slug":"学习总结","published":1,"updated":"2018-03-08T02:37:33.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc7g001erexm8qjr4yu4","content":"<h2 id=\"变量声明–let\"><a href=\"#变量声明–let\" class=\"headerlink\" title=\"变量声明–let\"></a><h6 style=\"color:green\">变量声明–let</h6></h2><p><b>let特性</b></p>\n<ol>\n<li>不可以重复申明</li>\n<li>没有预解析过程（即变量声明提前）</li>\n<li><p>块级作用域 ：一个变量或者函数只有在该区域才起作用</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &#123; <span class=\"comment\">//块级作用域</span></div><div class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(a)</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//举个例子：for循环依次输出 0~10</span></div><div class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"built_in\">console</span>.log(i);<span class=\"comment\">//解析：上述结果 输出10次i ，原因为每次for循环结束后 setTimeout还在走，所以输出的i还是全局的i，所以一直是10</span></div><div class=\"line\">  &#125;,<span class=\"number\">0</span>)</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">//我们若想依次输出0~10 我们可以使用一个闭包函数， 在闭包函数中会形成一个作用域，将i以形参的形式传入，这样每次执行循环的时候，变量就会存在于闭包作用域中。</span></div><div class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</div><div class=\"line\">\t setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">argument</span>) </span>&#123;</div><div class=\"line\">\t\t <span class=\"built_in\">console</span>.log(i);  <span class=\"comment\">// 0,1,2,3,4,5,6,7,8,9,10</span></div><div class=\"line\">\t &#125;)</div><div class=\"line\">    &#125;)(i)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//在ecma6 中 我们可以使用let 来实现 ,let 将循环变成一个块级作用域，第一次循环完成之后，i就是那个0</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">argument</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(i);  <span class=\"comment\">// 0,1,2,3,4,5,6,7,8,9,10</span></div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n <a id=\"more\"></a></li>\n<li>暂存死区   相似于 预解析  </li>\n</ol>\n<h2 id=\"常量声明–const\"><a href=\"#常量声明–const\" class=\"headerlink\" title=\"常量声明–const\"></a><h6 style=\"color:green\">常量声明–const</h6></h2><p><b>const简介:</b>防止命名冲突  存一些东西用于对比  声明后不能被修改(变量值不可修改，若是一个对象是可以被修改的)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span> ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"comment\">// const a = 2 ;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//报错</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> b = &#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.name);</div><div class=\"line\">ab.name = <span class=\"number\">2</span> ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// &#123;name:2&#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"变量的“解构”赋值\"><a href=\"#变量的“解构”赋值\" class=\"headerlink\" title=\"变量的“解构”赋值\"></a><h6 style=\"color:green\">变量的<b>“解构”</b>赋值</h6></h2><p><b>解构赋值简介:</b> Es6 允许按照一定的模式，通过一定的格式将数组和对象中的值提取出来，赋给变量<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span></div><div class=\"line\"><span class=\"comment\">//数组的解构赋值 ： 按照对应的顺序解构</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] ;</div><div class=\"line\"><span class=\"keyword\">var</span> [a,b,c] = arr ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a,b,c)  <span class=\"comment\">// 1,2,3</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1  = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>,<span class=\"number\">3</span>]] ;</div><div class=\"line\"><span class=\"keyword\">var</span> [d,[e,f]] =  arr ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(d,e,f)  <span class=\"comment\">// 1,2,3</span></div><div class=\"line\"><span class=\"comment\">//对象的解构赋值 ： 按照 对象的属性名称进行解构   和顺序无关 ,方便从对象里面拿到对应的值</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">\t<span class=\"attr\">foo</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">\t<span class=\"attr\">o</span>:&#123;&#125;,</div><div class=\"line\">\t<span class=\"attr\">arr</span>:[],</div><div class=\"line\">\t<span class=\"attr\">str</span>:<span class=\"string\">'abc'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> &#123;foo,o,arr,str&#125; = obj ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo,o,arr,str) ; <span class=\"comment\">// function()&#123;&#125;  &#123;&#125;  []  abc    </span></div><div class=\"line\"><span class=\"comment\">//值的交换</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span> ;</div><div class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">2</span> ;</div><div class=\"line\"><span class=\"keyword\">var</span> [x,y] = [y,x];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x,y) ; <span class=\"comment\">//2 1</span></div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"ES6字符串的扩展\"><a href=\"#ES6字符串的扩展\" class=\"headerlink\" title=\"ES6字符串的扩展\"></a><h6 style=\"color:green\">ES6字符串的扩展</h6></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*模板字符串*/</span></div><div class=\"line\"> <span class=\"keyword\">var</span> name = <span class=\"string\">'狮父'</span> ;</div><div class=\"line\"> <span class=\"keyword\">var</span> age = <span class=\"string\">'18'</span> ;</div><div class=\"line\"><span class=\"comment\">//传统字符串拼接做法：</span></div><div class=\"line\"> <span class=\"keyword\">var</span> str = <span class=\"string\">\"你的名字是：\"</span>+name+<span class=\"string\">\"你的年龄是\"</span>+age ;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(str)  </div><div class=\"line\"><span class=\"comment\">//使用模板字符串</span></div><div class=\"line\"> varstr = <span class=\"string\">`你的名字是<span class=\"subst\">$&#123;name&#125;</span>,你的年龄是<span class=\"subst\">$&#123;age&#125;</span>`</span>  <span class=\"comment\">//注意：使用反引号 `do something` 来包含,&#123;&#125;中可以进行运算 和 对象.属性</span></div><div class=\"line\"><span class=\"comment\">/*字符串复制str.repeat(num);*/</span></div><div class=\"line\"> <span class=\"keyword\">var</span> str = a ;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(a.repeat(<span class=\"number\">10</span>)) <span class=\"comment\">// aaaaaaaaaa</span></div><div class=\"line\"><span class=\"comment\">/*字符串的查找 str.includes()*/</span></div><div class=\"line\"> <span class=\"keyword\">var</span> str = <span class=\"string\">'abc'</span> ;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">'a'</span>))  <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"comment\">/*查找对应字符是否在首部或者尾部*/</span></div><div class=\"line\"> <span class=\"keyword\">var</span> str = <span class=\"string\">\"shifu\"</span> ;</div><div class=\"line\"> str.startsWith(<span class=\"string\">'shi'</span>) <span class=\"comment\">// true ;</span></div><div class=\"line\"> str.endsWith(<span class=\"string\">'u'</span>) ; <span class=\"comment\">//true ;</span></div></pre></td></tr></table></figure>\n<h2 id=\"ES6数值的扩展\"><a href=\"#ES6数值的扩展\" class=\"headerlink\" title=\"ES6数值的扩展\"></a><h6 style=\"color:green\">ES6数值的扩展</h6></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*二进制和八进制表示法:ES6提供使用前缀Ob和Oo表示 二进制八进制*/</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0b11</span> ; <span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0o11</span> ; <span class=\"comment\">// 9</span></div><div class=\"line\"><span class=\"comment\">/*Math 方法的扩展*/</span></div><div class=\"line\"><span class=\"comment\">// 取掉小数点</span></div><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1.234</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(num)) <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"comment\">//判断一个数字是正数负数,正0还是0</span></div><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">0</span> ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"number\">0</span>)) <span class=\"comment\">//0 ;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"number\">-0</span>)) <span class=\"comment\">//  -0 ;</span></div><div class=\"line\"><span class=\"comment\">//勾股定理  返回所有平方和的平方根</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.hypot(<span class=\"number\">3</span>,<span class=\"number\">4</span>))  <span class=\"comment\">//5</span></div></pre></td></tr></table></figure>\n<h2 id=\"ES6数组的扩展\"><a href=\"#ES6数组的扩展\" class=\"headerlink\" title=\"ES6数组的扩展\"></a><h6 style=\"color:green\">ES6数组的扩展</h6></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*转数组*/</span></div><div class=\"line\"><span class=\"meta\">\"use strict\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>)   <span class=\"comment\">//获取到类数组</span></div><div class=\"line\"><span class=\"comment\">//es5做法</span></div><div class=\"line\"><span class=\"keyword\">var</span> ele = [].slice.call(<span class=\"string\">'div'</span>) ; <span class=\"comment\">// []</span></div><div class=\"line\"><span class=\"comment\">//es6 做法</span></div><div class=\"line\"><span class=\"keyword\">var</span> eles =  <span class=\"built_in\">Array</span>.from(divs) ;   <span class=\"comment\">//[]</span></div><div class=\"line\"><span class=\"comment\">//也可以字符串转数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abc'</span> ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(str))   <span class=\"comment\">// ['a','b','c']</span></div><div class=\"line\"><span class=\"comment\">//将参数转换成数组   es5中:var arr = new Array(5) ,arr.length == 5 ;</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr  = <span class=\"built_in\">Array</span>.of(a,b,c,d,e) ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [] ;</span></div><div class=\"line\"><span class=\"comment\">/*数组查找元素*/</span></div><div class=\"line\"><span class=\"comment\">//语法:arr.find()   arr.findIndex()</span></div><div class=\"line\"><span class=\"comment\">//参数:1.回掉函数  2.回掉函数中的this指向</span></div><div class=\"line\"><span class=\"comment\">//执行过程:遍历整个数组,遍历的过程中调用回调函数，如果回调函数的返回值为true，则返回当前正在遍历的元素，如果所有的元素都不符合条件则返回undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] ;</div><div class=\"line\"><span class=\"keyword\">var</span> n = arr.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,index,ar</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(value) ; <span class=\"comment\">// 遍历的当前值  1</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(index) ; <span class=\"comment\">// 遍历值所处的位置索引 0</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(ar) ; <span class=\"comment\">// 当前正在遍历的数组本身  [1,2,3,4,5]</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>/<em>new</em>/</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"变量声明–let\"><a href=\"#变量声明–let\" class=\"headerlink\" title=\"变量声明–let\"></a><h6 style=\"color:green\">变量声明–let</h6></h2><p><b>let特性</b></p>\n<ol>\n<li>不可以重复申明</li>\n<li>没有预解析过程（即变量声明提前）</li>\n<li><p>块级作用域 ：一个变量或者函数只有在该区域才起作用</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &#123; <span class=\"comment\">//块级作用域</span></div><div class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(a)</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//举个例子：for循环依次输出 0~10</span></div><div class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"built_in\">console</span>.log(i);<span class=\"comment\">//解析：上述结果 输出10次i ，原因为每次for循环结束后 setTimeout还在走，所以输出的i还是全局的i，所以一直是10</span></div><div class=\"line\">  &#125;,<span class=\"number\">0</span>)</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">//我们若想依次输出0~10 我们可以使用一个闭包函数， 在闭包函数中会形成一个作用域，将i以形参的形式传入，这样每次执行循环的时候，变量就会存在于闭包作用域中。</span></div><div class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</div><div class=\"line\">\t setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">argument</span>) </span>&#123;</div><div class=\"line\">\t\t <span class=\"built_in\">console</span>.log(i);  <span class=\"comment\">// 0,1,2,3,4,5,6,7,8,9,10</span></div><div class=\"line\">\t &#125;)</div><div class=\"line\">    &#125;)(i)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//在ecma6 中 我们可以使用let 来实现 ,let 将循环变成一个块级作用域，第一次循环完成之后，i就是那个0</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">argument</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(i);  <span class=\"comment\">// 0,1,2,3,4,5,6,7,8,9,10</span></div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"</li>\n<li>暂存死区   相似于 预解析  </li>\n</ol>\n<h2 id=\"常量声明–const\"><a href=\"#常量声明–const\" class=\"headerlink\" title=\"常量声明–const\"></a><h6 style=\"color:green\">常量声明–const</h6></h2><p><b>const简介:</b>防止命名冲突  存一些东西用于对比  声明后不能被修改(变量值不可修改，若是一个对象是可以被修改的)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span> ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"comment\">// const a = 2 ;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//报错</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> b = &#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.name);</div><div class=\"line\">ab.name = <span class=\"number\">2</span> ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// &#123;name:2&#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"变量的“解构”赋值\"><a href=\"#变量的“解构”赋值\" class=\"headerlink\" title=\"变量的“解构”赋值\"></a><h6 style=\"color:green\">变量的<b>“解构”</b>赋值</h6></h2><p><b>解构赋值简介:</b> Es6 允许按照一定的模式，通过一定的格式将数组和对象中的值提取出来，赋给变量<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span></div><div class=\"line\"><span class=\"comment\">//数组的解构赋值 ： 按照对应的顺序解构</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] ;</div><div class=\"line\"><span class=\"keyword\">var</span> [a,b,c] = arr ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a,b,c)  <span class=\"comment\">// 1,2,3</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1  = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>,<span class=\"number\">3</span>]] ;</div><div class=\"line\"><span class=\"keyword\">var</span> [d,[e,f]] =  arr ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(d,e,f)  <span class=\"comment\">// 1,2,3</span></div><div class=\"line\"><span class=\"comment\">//对象的解构赋值 ： 按照 对象的属性名称进行解构   和顺序无关 ,方便从对象里面拿到对应的值</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">\t<span class=\"attr\">foo</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">\t<span class=\"attr\">o</span>:&#123;&#125;,</div><div class=\"line\">\t<span class=\"attr\">arr</span>:[],</div><div class=\"line\">\t<span class=\"attr\">str</span>:<span class=\"string\">'abc'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> &#123;foo,o,arr,str&#125; = obj ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo,o,arr,str) ; <span class=\"comment\">// function()&#123;&#125;  &#123;&#125;  []  abc    </span></div><div class=\"line\"><span class=\"comment\">//值的交换</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span> ;</div><div class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">2</span> ;</div><div class=\"line\"><span class=\"keyword\">var</span> [x,y] = [y,x];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x,y) ; <span class=\"comment\">//2 1</span></div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"ES6字符串的扩展\"><a href=\"#ES6字符串的扩展\" class=\"headerlink\" title=\"ES6字符串的扩展\"></a><h6 style=\"color:green\">ES6字符串的扩展</h6></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*模板字符串*/</span></div><div class=\"line\"> <span class=\"keyword\">var</span> name = <span class=\"string\">'狮父'</span> ;</div><div class=\"line\"> <span class=\"keyword\">var</span> age = <span class=\"string\">'18'</span> ;</div><div class=\"line\"><span class=\"comment\">//传统字符串拼接做法：</span></div><div class=\"line\"> <span class=\"keyword\">var</span> str = <span class=\"string\">\"你的名字是：\"</span>+name+<span class=\"string\">\"你的年龄是\"</span>+age ;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(str)  </div><div class=\"line\"><span class=\"comment\">//使用模板字符串</span></div><div class=\"line\"> varstr = <span class=\"string\">`你的名字是<span class=\"subst\">$&#123;name&#125;</span>,你的年龄是<span class=\"subst\">$&#123;age&#125;</span>`</span>  <span class=\"comment\">//注意：使用反引号 `do something` 来包含,&#123;&#125;中可以进行运算 和 对象.属性</span></div><div class=\"line\"><span class=\"comment\">/*字符串复制str.repeat(num);*/</span></div><div class=\"line\"> <span class=\"keyword\">var</span> str = a ;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(a.repeat(<span class=\"number\">10</span>)) <span class=\"comment\">// aaaaaaaaaa</span></div><div class=\"line\"><span class=\"comment\">/*字符串的查找 str.includes()*/</span></div><div class=\"line\"> <span class=\"keyword\">var</span> str = <span class=\"string\">'abc'</span> ;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">'a'</span>))  <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"comment\">/*查找对应字符是否在首部或者尾部*/</span></div><div class=\"line\"> <span class=\"keyword\">var</span> str = <span class=\"string\">\"shifu\"</span> ;</div><div class=\"line\"> str.startsWith(<span class=\"string\">'shi'</span>) <span class=\"comment\">// true ;</span></div><div class=\"line\"> str.endsWith(<span class=\"string\">'u'</span>) ; <span class=\"comment\">//true ;</span></div></pre></td></tr></table></figure>\n<h2 id=\"ES6数值的扩展\"><a href=\"#ES6数值的扩展\" class=\"headerlink\" title=\"ES6数值的扩展\"></a><h6 style=\"color:green\">ES6数值的扩展</h6></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*二进制和八进制表示法:ES6提供使用前缀Ob和Oo表示 二进制八进制*/</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0b11</span> ; <span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0o11</span> ; <span class=\"comment\">// 9</span></div><div class=\"line\"><span class=\"comment\">/*Math 方法的扩展*/</span></div><div class=\"line\"><span class=\"comment\">// 取掉小数点</span></div><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1.234</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(num)) <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"comment\">//判断一个数字是正数负数,正0还是0</span></div><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">0</span> ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"number\">0</span>)) <span class=\"comment\">//0 ;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"number\">-0</span>)) <span class=\"comment\">//  -0 ;</span></div><div class=\"line\"><span class=\"comment\">//勾股定理  返回所有平方和的平方根</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.hypot(<span class=\"number\">3</span>,<span class=\"number\">4</span>))  <span class=\"comment\">//5</span></div></pre></td></tr></table></figure>\n<h2 id=\"ES6数组的扩展\"><a href=\"#ES6数组的扩展\" class=\"headerlink\" title=\"ES6数组的扩展\"></a><h6 style=\"color:green\">ES6数组的扩展</h6></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*转数组*/</span></div><div class=\"line\"><span class=\"meta\">\"use strict\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>)   <span class=\"comment\">//获取到类数组</span></div><div class=\"line\"><span class=\"comment\">//es5做法</span></div><div class=\"line\"><span class=\"keyword\">var</span> ele = [].slice.call(<span class=\"string\">'div'</span>) ; <span class=\"comment\">// []</span></div><div class=\"line\"><span class=\"comment\">//es6 做法</span></div><div class=\"line\"><span class=\"keyword\">var</span> eles =  <span class=\"built_in\">Array</span>.from(divs) ;   <span class=\"comment\">//[]</span></div><div class=\"line\"><span class=\"comment\">//也可以字符串转数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abc'</span> ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(str))   <span class=\"comment\">// ['a','b','c']</span></div><div class=\"line\"><span class=\"comment\">//将参数转换成数组   es5中:var arr = new Array(5) ,arr.length == 5 ;</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr  = <span class=\"built_in\">Array</span>.of(a,b,c,d,e) ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [] ;</span></div><div class=\"line\"><span class=\"comment\">/*数组查找元素*/</span></div><div class=\"line\"><span class=\"comment\">//语法:arr.find()   arr.findIndex()</span></div><div class=\"line\"><span class=\"comment\">//参数:1.回掉函数  2.回掉函数中的this指向</span></div><div class=\"line\"><span class=\"comment\">//执行过程:遍历整个数组,遍历的过程中调用回调函数，如果回调函数的返回值为true，则返回当前正在遍历的元素，如果所有的元素都不符合条件则返回undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] ;</div><div class=\"line\"><span class=\"keyword\">var</span> n = arr.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,index,ar</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(value) ; <span class=\"comment\">// 遍历的当前值  1</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(index) ; <span class=\"comment\">// 遍历值所处的位置索引 0</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(ar) ; <span class=\"comment\">// 当前正在遍历的数组本身  [1,2,3,4,5]</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>/<em>new</em>/</p>"},{"title":"判断两个数组是否相等    &&   判断两个对象是否相等  ","date":"2015-12-06T06:56:27.000Z","_content":"\n\n>##### 数组比较\n\n\n方法 1：\n\n``` javascript\n\nJSON.stringify(a1) == JSON.stringify(a2)\n//或者\na1.toString() == a2.toString()\n\n\n```\n\n<!-- more -->\n\n#### 不建议使用此方法\n\n###### <span style=\"color:red\">这种方法在某些情况下是可行的，当两个数组的元素顺序相同且元素都可以转换成字符串的情况下确实可行，但是这样的代码存有隐患，比如数字被转换成字符串，数字“1”和字符串“1”会被认为相等，可能造成调试困难，不推荐使用。</span>\n\n\n方法2 ：\n```javascript\n\n // Warn if overriding existing method\nif(Array.prototype.equals)\nconsole.warn(\"Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.\");\n // attach the .equals method to Array's prototype to call it on any array\n Array.prototype.equals = function (array) {\n// if the other array is a falsy value, return\nif (!array)\n         return false;\n\n     // compare lengths - can save a lot of time\n     if (this.length != array.length)\n         return false;\n\n     for (var i = 0, l = this.length; i < l; i++) {\n        // Check if we have nested arrays\n         if (this[i] instanceof Array && array[i] instanceof Array) {\n           // recurse into the nested arrays\n             if (!this[i].equals(array[i]))\n                 return false;       \n         }           \n         else if (this[i] != array[i]) {\n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;   \n        }           \n     }       \n     return true;\n }\n // Hide method from for-in loops\n Object.defineProperty(Array.prototype, \"equals\", {enumerable: false});\n\nvar a = [1,2,3] ;\nvar b = [1,2,4] ;\n\n\na.equals(b)\n```\n>##### 对象的比较\n\n```javascript\nObject.prototype.equals = function(object2) {\n    //For the first loop, we only check for types\n    for (propName in this) {\n        //Check for inherited methods and properties - like .equals itself\n        //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\n        //Return false if the return value is different\n        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {\n            return false;\n        }\n        //Check instance type\n        else if (typeof this[propName] != typeof object2[propName]) {\n            //Different types => not equal\n            return false;\n        }\n    }\n    //Now a deeper check using other objects property names\n    for(propName in object2) {\n        //We must check instances anyway, there may be a property that only exists in object2\n            //I wonder, if remembering the checked values from the first loop would be faster or not\n        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {\n            return false;\n        }\n        else if (typeof this[propName] != typeof object2[propName]) {\n            return false;\n        }\n        //If the property is inherited, do not check any more (it must be equa if both objects inherit it)\n        if(!this.hasOwnProperty(propName))\n          continue;\n\n        //Now the detail check and recursion\n\n        //This returns the script back to the array comparing\n        /**REQUIRES Array.equals**/\n        if (this[propName] instanceof Array && object2[propName] instanceof Array) {\n                   // recurse into the nested arrays\n           if (!this[propName].equals(object2[propName]))\n                        return false;\n        }\n        else if (this[propName] instanceof Object && object2[propName] instanceof Object) {\n                   // recurse into another objects\n                   //console.log(\"Recursing to compare \", this[propName],\"with\",object2[propName], \" both named \\\"\"+propName+\"\\\"\");\n           if (!this[propName].equals(object2[propName]))\n                        return false;\n        }\n        //Normal value comparison for strings and numbers\n        else if(this[propName] != object2[propName]) {\n           return false;\n        }\n    }\n    //If everything passed, let's say YES\n    return true;\n}\n\nvar a = {a:1,b:2} ;\nvar b = {a:1,b:2} ;\nb.equals(a)\n\n\n\n\n```\n","source":"_posts/判断两个数组是否相等-判断两个对象是否相等.md","raw":"---\ntitle: '判断两个数组是否相等    &&   判断两个对象是否相等  '\ndate: 2015-12-06 14:56:27\ntags:\n- js\ncategories:\n- Javascript\n---\n\n\n>##### 数组比较\n\n\n方法 1：\n\n``` javascript\n\nJSON.stringify(a1) == JSON.stringify(a2)\n//或者\na1.toString() == a2.toString()\n\n\n```\n\n<!-- more -->\n\n#### 不建议使用此方法\n\n###### <span style=\"color:red\">这种方法在某些情况下是可行的，当两个数组的元素顺序相同且元素都可以转换成字符串的情况下确实可行，但是这样的代码存有隐患，比如数字被转换成字符串，数字“1”和字符串“1”会被认为相等，可能造成调试困难，不推荐使用。</span>\n\n\n方法2 ：\n```javascript\n\n // Warn if overriding existing method\nif(Array.prototype.equals)\nconsole.warn(\"Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.\");\n // attach the .equals method to Array's prototype to call it on any array\n Array.prototype.equals = function (array) {\n// if the other array is a falsy value, return\nif (!array)\n         return false;\n\n     // compare lengths - can save a lot of time\n     if (this.length != array.length)\n         return false;\n\n     for (var i = 0, l = this.length; i < l; i++) {\n        // Check if we have nested arrays\n         if (this[i] instanceof Array && array[i] instanceof Array) {\n           // recurse into the nested arrays\n             if (!this[i].equals(array[i]))\n                 return false;       \n         }           \n         else if (this[i] != array[i]) {\n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;   \n        }           \n     }       \n     return true;\n }\n // Hide method from for-in loops\n Object.defineProperty(Array.prototype, \"equals\", {enumerable: false});\n\nvar a = [1,2,3] ;\nvar b = [1,2,4] ;\n\n\na.equals(b)\n```\n>##### 对象的比较\n\n```javascript\nObject.prototype.equals = function(object2) {\n    //For the first loop, we only check for types\n    for (propName in this) {\n        //Check for inherited methods and properties - like .equals itself\n        //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\n        //Return false if the return value is different\n        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {\n            return false;\n        }\n        //Check instance type\n        else if (typeof this[propName] != typeof object2[propName]) {\n            //Different types => not equal\n            return false;\n        }\n    }\n    //Now a deeper check using other objects property names\n    for(propName in object2) {\n        //We must check instances anyway, there may be a property that only exists in object2\n            //I wonder, if remembering the checked values from the first loop would be faster or not\n        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {\n            return false;\n        }\n        else if (typeof this[propName] != typeof object2[propName]) {\n            return false;\n        }\n        //If the property is inherited, do not check any more (it must be equa if both objects inherit it)\n        if(!this.hasOwnProperty(propName))\n          continue;\n\n        //Now the detail check and recursion\n\n        //This returns the script back to the array comparing\n        /**REQUIRES Array.equals**/\n        if (this[propName] instanceof Array && object2[propName] instanceof Array) {\n                   // recurse into the nested arrays\n           if (!this[propName].equals(object2[propName]))\n                        return false;\n        }\n        else if (this[propName] instanceof Object && object2[propName] instanceof Object) {\n                   // recurse into another objects\n                   //console.log(\"Recursing to compare \", this[propName],\"with\",object2[propName], \" both named \\\"\"+propName+\"\\\"\");\n           if (!this[propName].equals(object2[propName]))\n                        return false;\n        }\n        //Normal value comparison for strings and numbers\n        else if(this[propName] != object2[propName]) {\n           return false;\n        }\n    }\n    //If everything passed, let's say YES\n    return true;\n}\n\nvar a = {a:1,b:2} ;\nvar b = {a:1,b:2} ;\nb.equals(a)\n\n\n\n\n```\n","slug":"判断两个数组是否相等-判断两个对象是否相等","published":1,"updated":"2018-03-08T02:35:46.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc7h001irexmlyhc9a5p","content":"<blockquote>\n<h5 id=\"数组比较\"><a href=\"#数组比较\" class=\"headerlink\" title=\"数组比较\"></a>数组比较</h5></blockquote>\n<p>方法 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(a1) == <span class=\"built_in\">JSON</span>.stringify(a2)</div><div class=\"line\"><span class=\"comment\">//或者</span></div><div class=\"line\">a1.toString() == a2.toString()</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"不建议使用此方法\"><a href=\"#不建议使用此方法\" class=\"headerlink\" title=\"不建议使用此方法\"></a>不建议使用此方法</h4><h6 id=\"这种方法在某些情况下是可行的，当两个数组的元素顺序相同且元素都可以转换成字符串的情况下确实可行，但是这样的代码存有隐患，比如数字被转换成字符串，数字“1”和字符串“1”会被认为相等，可能造成调试困难，不推荐使用。\"><a href=\"#这种方法在某些情况下是可行的，当两个数组的元素顺序相同且元素都可以转换成字符串的情况下确实可行，但是这样的代码存有隐患，比如数字被转换成字符串，数字“1”和字符串“1”会被认为相等，可能造成调试困难，不推荐使用。\" class=\"headerlink\" title=\"这种方法在某些情况下是可行的，当两个数组的元素顺序相同且元素都可以转换成字符串的情况下确实可行，但是这样的代码存有隐患，比如数字被转换成字符串，数字“1”和字符串“1”会被认为相等，可能造成调试困难，不推荐使用。\"></a><span style=\"color:red\">这种方法在某些情况下是可行的，当两个数组的元素顺序相同且元素都可以转换成字符串的情况下确实可行，但是这样的代码存有隐患，比如数字被转换成字符串，数字“1”和字符串“1”会被认为相等，可能造成调试困难，不推荐使用。</span></h6><p>方法2 ：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// Warn if overriding existing method</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.prototype.equals)</div><div class=\"line\"><span class=\"built_in\">console</span>.warn(<span class=\"string\">\"Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.\"</span>);</div><div class=\"line\"> <span class=\"comment\">// attach the .equals method to Array's prototype to call it on any array</span></div><div class=\"line\"> <span class=\"built_in\">Array</span>.prototype.equals = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// if the other array is a falsy value, return</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!array)</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// compare lengths - can save a lot of time</span></div><div class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.length != array.length)</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"keyword\">this</span>.length; i &lt; l; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// Check if we have nested arrays</span></div><div class=\"line\">         <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> &amp;&amp; array[i] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">           <span class=\"comment\">// recurse into the nested arrays</span></div><div class=\"line\">             <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>[i].equals(array[i]))</div><div class=\"line\">                 <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;       </div><div class=\"line\">         &#125;           </div><div class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i] != array[i]) &#123;</div><div class=\"line\">            <span class=\"comment\">// Warning - two different object instances will never be equal: &#123;x:20&#125; != &#123;x:20&#125;</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">        &#125;           </div><div class=\"line\">     &#125;       </div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">// Hide method from for-in loops</span></div><div class=\"line\"> <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">\"equals\"</span>, &#123;<span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] ;</div><div class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>] ;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">a.equals(b)</div></pre></td></tr></table></figure></p>\n<blockquote>\n<h5 id=\"对象的比较\"><a href=\"#对象的比较\" class=\"headerlink\" title=\"对象的比较\"></a>对象的比较</h5></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.equals = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//For the first loop, we only check for types</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (propName <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//Check for inherited methods and properties - like .equals itself</span></div><div class=\"line\">        <span class=\"comment\">//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty</span></div><div class=\"line\">        <span class=\"comment\">//Return false if the return value is different</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//Check instance type</span></div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>[propName] != <span class=\"keyword\">typeof</span> object2[propName]) &#123;</div><div class=\"line\">            <span class=\"comment\">//Different types =&gt; not equal</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//Now a deeper check using other objects property names</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(propName <span class=\"keyword\">in</span> object2) &#123;</div><div class=\"line\">        <span class=\"comment\">//We must check instances anyway, there may be a property that only exists in object2</span></div><div class=\"line\">            <span class=\"comment\">//I wonder, if remembering the checked values from the first loop would be faster or not</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>[propName] != <span class=\"keyword\">typeof</span> object2[propName]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//If the property is inherited, do not check any more (it must be equa if both objects inherit it)</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.hasOwnProperty(propName))</div><div class=\"line\">          <span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//Now the detail check and recursion</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//This returns the script back to the array comparing</span></div><div class=\"line\">        <span class=\"comment\">/**REQUIRES Array.equals**/</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[propName] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> &amp;&amp; object2[propName] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">                   <span class=\"comment\">// recurse into the nested arrays</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>[propName].equals(object2[propName]))</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[propName] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> &amp;&amp; object2[propName] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</div><div class=\"line\">                   <span class=\"comment\">// recurse into another objects</span></div><div class=\"line\">                   <span class=\"comment\">//console.log(\"Recursing to compare \", this[propName],\"with\",object2[propName], \" both named \\\"\"+propName+\"\\\"\");</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>[propName].equals(object2[propName]))</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//Normal value comparison for strings and numbers</span></div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[propName] != object2[propName]) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//If everything passed, let's say YES</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> b = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125; ;</div><div class=\"line\">b.equals(a)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<h5 id=\"数组比较\"><a href=\"#数组比较\" class=\"headerlink\" title=\"数组比较\"></a>数组比较</h5></blockquote>\n<p>方法 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(a1) == <span class=\"built_in\">JSON</span>.stringify(a2)</div><div class=\"line\"><span class=\"comment\">//或者</span></div><div class=\"line\">a1.toString() == a2.toString()</div></pre></td></tr></table></figure>","more":"<h4 id=\"不建议使用此方法\"><a href=\"#不建议使用此方法\" class=\"headerlink\" title=\"不建议使用此方法\"></a>不建议使用此方法</h4><h6 id=\"这种方法在某些情况下是可行的，当两个数组的元素顺序相同且元素都可以转换成字符串的情况下确实可行，但是这样的代码存有隐患，比如数字被转换成字符串，数字“1”和字符串“1”会被认为相等，可能造成调试困难，不推荐使用。\"><a href=\"#这种方法在某些情况下是可行的，当两个数组的元素顺序相同且元素都可以转换成字符串的情况下确实可行，但是这样的代码存有隐患，比如数字被转换成字符串，数字“1”和字符串“1”会被认为相等，可能造成调试困难，不推荐使用。\" class=\"headerlink\" title=\"这种方法在某些情况下是可行的，当两个数组的元素顺序相同且元素都可以转换成字符串的情况下确实可行，但是这样的代码存有隐患，比如数字被转换成字符串，数字“1”和字符串“1”会被认为相等，可能造成调试困难，不推荐使用。\"></a><span style=\"color:red\">这种方法在某些情况下是可行的，当两个数组的元素顺序相同且元素都可以转换成字符串的情况下确实可行，但是这样的代码存有隐患，比如数字被转换成字符串，数字“1”和字符串“1”会被认为相等，可能造成调试困难，不推荐使用。</span></h6><p>方法2 ：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// Warn if overriding existing method</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.prototype.equals)</div><div class=\"line\"><span class=\"built_in\">console</span>.warn(<span class=\"string\">\"Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.\"</span>);</div><div class=\"line\"> <span class=\"comment\">// attach the .equals method to Array's prototype to call it on any array</span></div><div class=\"line\"> <span class=\"built_in\">Array</span>.prototype.equals = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// if the other array is a falsy value, return</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!array)</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// compare lengths - can save a lot of time</span></div><div class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.length != array.length)</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"keyword\">this</span>.length; i &lt; l; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// Check if we have nested arrays</span></div><div class=\"line\">         <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> &amp;&amp; array[i] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">           <span class=\"comment\">// recurse into the nested arrays</span></div><div class=\"line\">             <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>[i].equals(array[i]))</div><div class=\"line\">                 <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;       </div><div class=\"line\">         &#125;           </div><div class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i] != array[i]) &#123;</div><div class=\"line\">            <span class=\"comment\">// Warning - two different object instances will never be equal: &#123;x:20&#125; != &#123;x:20&#125;</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">        &#125;           </div><div class=\"line\">     &#125;       </div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">// Hide method from for-in loops</span></div><div class=\"line\"> <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">\"equals\"</span>, &#123;<span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] ;</div><div class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>] ;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">a.equals(b)</div></pre></td></tr></table></figure></p>\n<blockquote>\n<h5 id=\"对象的比较\"><a href=\"#对象的比较\" class=\"headerlink\" title=\"对象的比较\"></a>对象的比较</h5></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.equals = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//For the first loop, we only check for types</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (propName <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//Check for inherited methods and properties - like .equals itself</span></div><div class=\"line\">        <span class=\"comment\">//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty</span></div><div class=\"line\">        <span class=\"comment\">//Return false if the return value is different</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//Check instance type</span></div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>[propName] != <span class=\"keyword\">typeof</span> object2[propName]) &#123;</div><div class=\"line\">            <span class=\"comment\">//Different types =&gt; not equal</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//Now a deeper check using other objects property names</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(propName <span class=\"keyword\">in</span> object2) &#123;</div><div class=\"line\">        <span class=\"comment\">//We must check instances anyway, there may be a property that only exists in object2</span></div><div class=\"line\">            <span class=\"comment\">//I wonder, if remembering the checked values from the first loop would be faster or not</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>[propName] != <span class=\"keyword\">typeof</span> object2[propName]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//If the property is inherited, do not check any more (it must be equa if both objects inherit it)</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.hasOwnProperty(propName))</div><div class=\"line\">          <span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//Now the detail check and recursion</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//This returns the script back to the array comparing</span></div><div class=\"line\">        <span class=\"comment\">/**REQUIRES Array.equals**/</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[propName] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> &amp;&amp; object2[propName] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">                   <span class=\"comment\">// recurse into the nested arrays</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>[propName].equals(object2[propName]))</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[propName] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> &amp;&amp; object2[propName] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</div><div class=\"line\">                   <span class=\"comment\">// recurse into another objects</span></div><div class=\"line\">                   <span class=\"comment\">//console.log(\"Recursing to compare \", this[propName],\"with\",object2[propName], \" both named \\\"\"+propName+\"\\\"\");</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>[propName].equals(object2[propName]))</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//Normal value comparison for strings and numbers</span></div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[propName] != object2[propName]) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//If everything passed, let's say YES</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> b = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125; ;</div><div class=\"line\">b.equals(a)</div></pre></td></tr></table></figure>"},{"title":"干货--使用闭包实现js倒计时功能","date":"2016-10-20T03:35:03.000Z","_content":"\n\n\n### 话不多说直接贴代码\n```javascript\nvar dj = (function() {\n            return {\n                time: function() {\n                    // setTimeout 内部this 指向\n                    var This = this;\n\n                    if (This.miao > 0) {\n                        This.timer = setTimeout(function() {\n                            This.miao = This.miao - 1;\n                            This.time();\n                        }, 1000);\n                    } else if (This.miao == 0) {\n                        console.log('时间到  倒计时结束的操作')\n                        // do somthing....\n\n\n\n\n                    }\n                    // 渲染数据到页面\n                    This.rander();\n                },\n                rander: function() {   //做页面的数据渲染      \n                    miaoStr = this.miao + \"\";\n\n                    if (miaoStr.length <= 1) {\n                        this.sw.innerHTML = \"0\";\n                        this.gw.innerHTML = miaoStr;\n                    } else if (miaoStr.length > 1) {\n                        this.sw.innerHTML = miaoStr[0];\n                        this.gw.innerHTML = miaoStr[miaoStr.length - 1];\n                    }\n                },\n                stop: function(time) {\n                    clearInterval(this.timer);\n                    //返回倒计时停止时候的秒数\n                    return this.miao;\n                },\n                start: function(miao, gw, sw) {\n                \t//参数说明：   miao:自定义多少秒倒计时   gw:从页面获取到的 倒计时“个位”元素对象     sw:  从页面获取到的 倒计时“\n      ”元素对象\n                    this.gw = gw;\n                    this.sw = sw;\n                    this.miao = miao;\n                    this.time();\n\n                }\n            }\n        })();\n```\n\n<!-- more -->\n\n#### 使用方法\n````javascript\n//从页面获取  个位 十位 元素ID  用于渲染   \nvar gw = document.getElementById('gw');\nvar sw = document.getElementById('sw');\n\n//启动倒计时\ndj.start(60,gw,sw);\n//停止倒计时\ndj.stop();\n\n````\n\n\n### 效果\n\n\n![效果](http://omy3ifpvu.bkt.clouddn.com/WechatIMG36.jpeg)\n","source":"_posts/闭包实现倒计时程序.md","raw":"---\ntitle: 干货--使用闭包实现js倒计时功能  \ndate: 2016-10-20 11:35:03\ntags:\n- js\ncategories:\n- Javascript\n---\n\n\n\n### 话不多说直接贴代码\n```javascript\nvar dj = (function() {\n            return {\n                time: function() {\n                    // setTimeout 内部this 指向\n                    var This = this;\n\n                    if (This.miao > 0) {\n                        This.timer = setTimeout(function() {\n                            This.miao = This.miao - 1;\n                            This.time();\n                        }, 1000);\n                    } else if (This.miao == 0) {\n                        console.log('时间到  倒计时结束的操作')\n                        // do somthing....\n\n\n\n\n                    }\n                    // 渲染数据到页面\n                    This.rander();\n                },\n                rander: function() {   //做页面的数据渲染      \n                    miaoStr = this.miao + \"\";\n\n                    if (miaoStr.length <= 1) {\n                        this.sw.innerHTML = \"0\";\n                        this.gw.innerHTML = miaoStr;\n                    } else if (miaoStr.length > 1) {\n                        this.sw.innerHTML = miaoStr[0];\n                        this.gw.innerHTML = miaoStr[miaoStr.length - 1];\n                    }\n                },\n                stop: function(time) {\n                    clearInterval(this.timer);\n                    //返回倒计时停止时候的秒数\n                    return this.miao;\n                },\n                start: function(miao, gw, sw) {\n                \t//参数说明：   miao:自定义多少秒倒计时   gw:从页面获取到的 倒计时“个位”元素对象     sw:  从页面获取到的 倒计时“\n      ”元素对象\n                    this.gw = gw;\n                    this.sw = sw;\n                    this.miao = miao;\n                    this.time();\n\n                }\n            }\n        })();\n```\n\n<!-- more -->\n\n#### 使用方法\n````javascript\n//从页面获取  个位 十位 元素ID  用于渲染   \nvar gw = document.getElementById('gw');\nvar sw = document.getElementById('sw');\n\n//启动倒计时\ndj.start(60,gw,sw);\n//停止倒计时\ndj.stop();\n\n````\n\n\n### 效果\n\n\n![效果](http://omy3ifpvu.bkt.clouddn.com/WechatIMG36.jpeg)\n","slug":"闭包实现倒计时程序","published":1,"updated":"2018-03-08T02:35:29.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei6lc7j001krexmyrtvfgqs","content":"<h3 id=\"话不多说直接贴代码\"><a href=\"#话不多说直接贴代码\" class=\"headerlink\" title=\"话不多说直接贴代码\"></a>话不多说直接贴代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dj = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                <span class=\"attr\">time</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                    <span class=\"comment\">// setTimeout 内部this 指向</span></div><div class=\"line\">                    <span class=\"keyword\">var</span> This = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (This.miao &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        This.timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                            This.miao = This.miao - <span class=\"number\">1</span>;</div><div class=\"line\">                            This.time();</div><div class=\"line\">                        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (This.miao == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'时间到  倒计时结束的操作'</span>)</div><div class=\"line\">                        <span class=\"comment\">// do somthing....</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">// 渲染数据到页面</span></div><div class=\"line\">                    This.rander();</div><div class=\"line\">                &#125;,</div><div class=\"line\">                <span class=\"attr\">rander</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;   <span class=\"comment\">//做页面的数据渲染      </span></div><div class=\"line\">                    miaoStr = <span class=\"keyword\">this</span>.miao + <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (miaoStr.length &lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">this</span>.sw.innerHTML = <span class=\"string\">\"0\"</span>;</div><div class=\"line\">                        <span class=\"keyword\">this</span>.gw.innerHTML = miaoStr;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (miaoStr.length &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">this</span>.sw.innerHTML = miaoStr[<span class=\"number\">0</span>];</div><div class=\"line\">                        <span class=\"keyword\">this</span>.gw.innerHTML = miaoStr[miaoStr.length - <span class=\"number\">1</span>];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                <span class=\"attr\">stop</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">                    clearInterval(<span class=\"keyword\">this</span>.timer);</div><div class=\"line\">                    <span class=\"comment\">//返回倒计时停止时候的秒数</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.miao;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                <span class=\"attr\">start</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">miao, gw, sw</span>) </span>&#123;</div><div class=\"line\">                \t<span class=\"comment\">//参数说明：   miao:自定义多少秒倒计时   gw:从页面获取到的 倒计时“个位”元素对象     sw:  从页面获取到的 倒计时“</span></div><div class=\"line\">      ”元素对象</div><div class=\"line\">                    <span class=\"keyword\">this</span>.gw = gw;</div><div class=\"line\">                    <span class=\"keyword\">this</span>.sw = sw;</div><div class=\"line\">                    <span class=\"keyword\">this</span>.miao = miao;</div><div class=\"line\">                    <span class=\"keyword\">this</span>.time();</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)();</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//从页面获取  个位 十位 元素ID  用于渲染   </span></div><div class=\"line\"><span class=\"keyword\">var</span> gw = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'gw'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> sw = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'sw'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//启动倒计时</span></div><div class=\"line\">dj.start(<span class=\"number\">60</span>,gw,sw);</div><div class=\"line\"><span class=\"comment\">//停止倒计时</span></div><div class=\"line\">dj.stop();</div></pre></td></tr></table></figure>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"http://omy3ifpvu.bkt.clouddn.com/WechatIMG36.jpeg\" alt=\"效果\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"话不多说直接贴代码\"><a href=\"#话不多说直接贴代码\" class=\"headerlink\" title=\"话不多说直接贴代码\"></a>话不多说直接贴代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dj = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                <span class=\"attr\">time</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                    <span class=\"comment\">// setTimeout 内部this 指向</span></div><div class=\"line\">                    <span class=\"keyword\">var</span> This = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (This.miao &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        This.timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                            This.miao = This.miao - <span class=\"number\">1</span>;</div><div class=\"line\">                            This.time();</div><div class=\"line\">                        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (This.miao == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'时间到  倒计时结束的操作'</span>)</div><div class=\"line\">                        <span class=\"comment\">// do somthing....</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">// 渲染数据到页面</span></div><div class=\"line\">                    This.rander();</div><div class=\"line\">                &#125;,</div><div class=\"line\">                <span class=\"attr\">rander</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;   <span class=\"comment\">//做页面的数据渲染      </span></div><div class=\"line\">                    miaoStr = <span class=\"keyword\">this</span>.miao + <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (miaoStr.length &lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">this</span>.sw.innerHTML = <span class=\"string\">\"0\"</span>;</div><div class=\"line\">                        <span class=\"keyword\">this</span>.gw.innerHTML = miaoStr;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (miaoStr.length &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">this</span>.sw.innerHTML = miaoStr[<span class=\"number\">0</span>];</div><div class=\"line\">                        <span class=\"keyword\">this</span>.gw.innerHTML = miaoStr[miaoStr.length - <span class=\"number\">1</span>];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                <span class=\"attr\">stop</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">                    clearInterval(<span class=\"keyword\">this</span>.timer);</div><div class=\"line\">                    <span class=\"comment\">//返回倒计时停止时候的秒数</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.miao;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                <span class=\"attr\">start</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">miao, gw, sw</span>) </span>&#123;</div><div class=\"line\">                \t<span class=\"comment\">//参数说明：   miao:自定义多少秒倒计时   gw:从页面获取到的 倒计时“个位”元素对象     sw:  从页面获取到的 倒计时“</span></div><div class=\"line\">      ”元素对象</div><div class=\"line\">                    <span class=\"keyword\">this</span>.gw = gw;</div><div class=\"line\">                    <span class=\"keyword\">this</span>.sw = sw;</div><div class=\"line\">                    <span class=\"keyword\">this</span>.miao = miao;</div><div class=\"line\">                    <span class=\"keyword\">this</span>.time();</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)();</div></pre></td></tr></table></figure>","more":"<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//从页面获取  个位 十位 元素ID  用于渲染   </span></div><div class=\"line\"><span class=\"keyword\">var</span> gw = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'gw'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> sw = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'sw'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//启动倒计时</span></div><div class=\"line\">dj.start(<span class=\"number\">60</span>,gw,sw);</div><div class=\"line\"><span class=\"comment\">//停止倒计时</span></div><div class=\"line\">dj.stop();</div></pre></td></tr></table></figure>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"http://omy3ifpvu.bkt.clouddn.com/WechatIMG36.jpeg\" alt=\"效果\"></p>"},{"title":"Promise 学习笔记（全）","date":"2018-03-13T07:13:23.000Z","banner":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1520935239437&di=385f20daa20a27d7c413376b1814568c&imgtype=0&src=http%3A%2F%2Fpic.baike.soso.com%2Fp%2F20140710%2F20140710213836-955952945.jpg","_content":"\n### Promise  学习笔记\n\n\n\n### **释义:**\n1.用于异步计算\n\n2.一个promise 表示一个现在，将来或用不可能使用的值 ( 可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果。)\n\n3.可以在对象之间传递和操作promise ，帮助我们处理队列\n\n<!-- more -->\n\n### **异步回调的四个问题:**\n\n1. 嵌套层次很深，容易陷入回调地域 ，很难维护  \n2. 无法正常使用 return  和  throw\n3. 无法正常检索堆栈信息，因为每一次回调都是系统层面上的新的堆栈 。\n4. 在多个回调之间难以建立联系。\n\n### **Promise 结构:**\n\n```javascript\nnew Promise(\n\t//执行器 executor\n\tfunction (resolve,reject) {\n\t\t//一段耗时很长的异步操作\n\t\tresolve() ; //数据处理完成\n\t\treject() ; //数据处理出错\n\t}\n\n)\n.then(function A(){\n\t//成功 下一步\n},function B(){\n\t// 失败，做相应的处理\n})\n```\n\n###### 1.Promise 是一个代理对象，它和原先要进行的操作并无关系。只是将原来操作放入了`executor`\n###### 2.它通过引入一个回调，避免更多的回调\n\n\n\n### **Promise三个状态 **\n\n1. `pending` 待定状态\n2. 如果调用 `resolve()` 就进入  `fulfilled` 实现 操作成功状态\n3. 如果 `reject()` 就进入 `rejected` 被否决状态 操作失败\n\n当 promise 状态发生改变的时候，就会立即触发`.then()`离得响应函数，处理后续步骤\n\nPromise 状态一经改变就不会改变\n\n执行流程图  \n\n![执行流程图](./1520911191668.png)\n\n\n### **.then()函数**\n\n```javascript\n// 假如在.then()的函数里面不返回新的Promise，会怎样？\n// https://www.imooc.com/video/16616\n\nconsole.log('here we go');\nnew Promise(resolve => {\n    setTimeout( () => {\n        resolve('hello');\n    }, 2000);\n})\n    .then( value => {\n        console.log(value);\n        console.log('everyone');\n        (function () {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    console.log('Mr.Laurence');\n                    resolve('Merry Xmas');\n                }, 2000);\n            });\n        }());\n        return false;\n    })\n    .then( value => {\n        console.log(value + ' world');\n    });\n\n结果：\nhere we go\nhello\neveryone\nfalse world\nMr.Laurence\n```\n\n`.then()`  接受两个函数作为参数，分别代表 `fulfilled` 和 'rejected'\n\n`.then()` 返回一个新的Promise 实例，所以它可以链式调用\n\n当前面的\t`Promise` 状态改变时，`.then()` 根据其最终状态，选择特定的状态响应函数执行 。\n\n状态响应函数可以反悔新的`Promise` ，或其它值\n\n如果返回新的 `Promise` ，那么下一级 `.then()` 会在新 Promise 状态改变之后执行\n\n如果返回其它任何值，则会立即执行下一级 `.then()`   \n\n\n####  .then() 里面有 .then() 的情况\n\n1. 因为 `.then()` 返回的还是Promise 实例\n\n2. 外层的 `.then` 会等到 里面的` .then() `执行完成 再执行\n\n3. 对于我们来书，此时最好将其展开，会更好读\n\n```javascript\n// 嵌套.then()\n// https://www.imooc.com/video/16618\n\nconsole.log('start');\nnew Promise( resolve => {\n    console.log('Step 1');\n    setTimeout(() => {\n        resolve(100);\n    }, 1000);\n})\n    .then( value => {\n        return new Promise(resolve => {\n            console.log('Step 1-1');\n            setTimeout(() => {\n                resolve(110);\n            }, 1000);\n        })\n            .then( value => {\n                console.log('Step 1-2');\n                return value;\n            })\n            .then( value => {\n                console.log('Step 1-3');\n                return value;\n            });\n    })\n    .then(value => {\n        console.log(value);\n        console.log('Step 2');\n    });\n\n结果：\nstart\nstep 1\nstep 1-1\nstep 1-2\nstep 1-3\n110\nstep 2\n```\n\n\n\n\n### **思考：**\n\n以下问题出自：\n[原文：We have a problem with promises](https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html)\n[FEX 中文翻译](http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/)\n[慕课网视频讲解](https://www.imooc.com/video/16619/0)\n\n\n\n##### 以下四种Promise 的区别是什么呢？\n```javascript\ndoSomething().then(function () {\n  return doSomethingElse();\n});\n\ndoSomething().then(function () {\n  doSomethingElse();\n});\n\ndoSomething().then(doSomethingElse());\n\ndoSomething().then(doSomethingElse);\n```\n\n\n##### 答案 ：\n```javascript\n第一题：\ndoSomething().then(function () {\n  return doSomethingElse();\n}).then(finalHandler);\n\ndoSomething\n|-----------------|\n                  doSomethingElse(undefined)\n                  |------------------|\n                                     finalHandler(resultOfDoSomethingElse)\n                                     |------------------|\n第二题：\ndoSomething().then(function () {\n  doSomethingElse();\n}).then(finalHandler);\n\ndoSomething\n|-----------------|\n                  doSomethingElse(undefined)\n                  |------------------|\n                  finalHandler(undefined)\n                  |------------------|\n\n第三题：\n\ndoSomething().then(doSomethingElse())\n  .then(finalHandler);\n\n\ndoSomething\n|-----------------|\ndoSomethingElse(undefined)\n|---------------------------------|\n                  finalHandler(resultOfDoSomething)\n                  |------------------|\n\n第四题：\ndoSomething().then(doSomethingElse)\n  .then(finalHandler);\n\ndoSomething\n|-----------------|\n                  doSomethingElse(resultOfDoSomething)\n                  |------------------|\n                                     finalHandler(resultOfDoSomethingElse)\n                                     |------------------|\n\n```\n\n\n\n\n#### 版权说明：以上均为 [慕课网课程：Promise 入门](https://www.imooc.com/learn/949) 学习笔记,如有侵权[联系我](18735443767)删除\n","source":"_posts/Promise-学习笔记（全）.md","raw":"---\ntitle: Promise 学习笔记（全）\ndate: 2018-03-13 15:13:23\ntags:\n- es6\ncategories:\n- EcmaJs6\nbanner : https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1520935239437&di=385f20daa20a27d7c413376b1814568c&imgtype=0&src=http%3A%2F%2Fpic.baike.soso.com%2Fp%2F20140710%2F20140710213836-955952945.jpg\n---\n\n### Promise  学习笔记\n\n\n\n### **释义:**\n1.用于异步计算\n\n2.一个promise 表示一个现在，将来或用不可能使用的值 ( 可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果。)\n\n3.可以在对象之间传递和操作promise ，帮助我们处理队列\n\n<!-- more -->\n\n### **异步回调的四个问题:**\n\n1. 嵌套层次很深，容易陷入回调地域 ，很难维护  \n2. 无法正常使用 return  和  throw\n3. 无法正常检索堆栈信息，因为每一次回调都是系统层面上的新的堆栈 。\n4. 在多个回调之间难以建立联系。\n\n### **Promise 结构:**\n\n```javascript\nnew Promise(\n\t//执行器 executor\n\tfunction (resolve,reject) {\n\t\t//一段耗时很长的异步操作\n\t\tresolve() ; //数据处理完成\n\t\treject() ; //数据处理出错\n\t}\n\n)\n.then(function A(){\n\t//成功 下一步\n},function B(){\n\t// 失败，做相应的处理\n})\n```\n\n###### 1.Promise 是一个代理对象，它和原先要进行的操作并无关系。只是将原来操作放入了`executor`\n###### 2.它通过引入一个回调，避免更多的回调\n\n\n\n### **Promise三个状态 **\n\n1. `pending` 待定状态\n2. 如果调用 `resolve()` 就进入  `fulfilled` 实现 操作成功状态\n3. 如果 `reject()` 就进入 `rejected` 被否决状态 操作失败\n\n当 promise 状态发生改变的时候，就会立即触发`.then()`离得响应函数，处理后续步骤\n\nPromise 状态一经改变就不会改变\n\n执行流程图  \n\n![执行流程图](./1520911191668.png)\n\n\n### **.then()函数**\n\n```javascript\n// 假如在.then()的函数里面不返回新的Promise，会怎样？\n// https://www.imooc.com/video/16616\n\nconsole.log('here we go');\nnew Promise(resolve => {\n    setTimeout( () => {\n        resolve('hello');\n    }, 2000);\n})\n    .then( value => {\n        console.log(value);\n        console.log('everyone');\n        (function () {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    console.log('Mr.Laurence');\n                    resolve('Merry Xmas');\n                }, 2000);\n            });\n        }());\n        return false;\n    })\n    .then( value => {\n        console.log(value + ' world');\n    });\n\n结果：\nhere we go\nhello\neveryone\nfalse world\nMr.Laurence\n```\n\n`.then()`  接受两个函数作为参数，分别代表 `fulfilled` 和 'rejected'\n\n`.then()` 返回一个新的Promise 实例，所以它可以链式调用\n\n当前面的\t`Promise` 状态改变时，`.then()` 根据其最终状态，选择特定的状态响应函数执行 。\n\n状态响应函数可以反悔新的`Promise` ，或其它值\n\n如果返回新的 `Promise` ，那么下一级 `.then()` 会在新 Promise 状态改变之后执行\n\n如果返回其它任何值，则会立即执行下一级 `.then()`   \n\n\n####  .then() 里面有 .then() 的情况\n\n1. 因为 `.then()` 返回的还是Promise 实例\n\n2. 外层的 `.then` 会等到 里面的` .then() `执行完成 再执行\n\n3. 对于我们来书，此时最好将其展开，会更好读\n\n```javascript\n// 嵌套.then()\n// https://www.imooc.com/video/16618\n\nconsole.log('start');\nnew Promise( resolve => {\n    console.log('Step 1');\n    setTimeout(() => {\n        resolve(100);\n    }, 1000);\n})\n    .then( value => {\n        return new Promise(resolve => {\n            console.log('Step 1-1');\n            setTimeout(() => {\n                resolve(110);\n            }, 1000);\n        })\n            .then( value => {\n                console.log('Step 1-2');\n                return value;\n            })\n            .then( value => {\n                console.log('Step 1-3');\n                return value;\n            });\n    })\n    .then(value => {\n        console.log(value);\n        console.log('Step 2');\n    });\n\n结果：\nstart\nstep 1\nstep 1-1\nstep 1-2\nstep 1-3\n110\nstep 2\n```\n\n\n\n\n### **思考：**\n\n以下问题出自：\n[原文：We have a problem with promises](https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html)\n[FEX 中文翻译](http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/)\n[慕课网视频讲解](https://www.imooc.com/video/16619/0)\n\n\n\n##### 以下四种Promise 的区别是什么呢？\n```javascript\ndoSomething().then(function () {\n  return doSomethingElse();\n});\n\ndoSomething().then(function () {\n  doSomethingElse();\n});\n\ndoSomething().then(doSomethingElse());\n\ndoSomething().then(doSomethingElse);\n```\n\n\n##### 答案 ：\n```javascript\n第一题：\ndoSomething().then(function () {\n  return doSomethingElse();\n}).then(finalHandler);\n\ndoSomething\n|-----------------|\n                  doSomethingElse(undefined)\n                  |------------------|\n                                     finalHandler(resultOfDoSomethingElse)\n                                     |------------------|\n第二题：\ndoSomething().then(function () {\n  doSomethingElse();\n}).then(finalHandler);\n\ndoSomething\n|-----------------|\n                  doSomethingElse(undefined)\n                  |------------------|\n                  finalHandler(undefined)\n                  |------------------|\n\n第三题：\n\ndoSomething().then(doSomethingElse())\n  .then(finalHandler);\n\n\ndoSomething\n|-----------------|\ndoSomethingElse(undefined)\n|---------------------------------|\n                  finalHandler(resultOfDoSomething)\n                  |------------------|\n\n第四题：\ndoSomething().then(doSomethingElse)\n  .then(finalHandler);\n\ndoSomething\n|-----------------|\n                  doSomethingElse(resultOfDoSomething)\n                  |------------------|\n                                     finalHandler(resultOfDoSomethingElse)\n                                     |------------------|\n\n```\n\n\n\n\n#### 版权说明：以上均为 [慕课网课程：Promise 入门](https://www.imooc.com/learn/949) 学习笔记,如有侵权[联系我](18735443767)删除\n","slug":"Promise-学习笔记（全）","published":1,"updated":"2018-03-13T07:21:23.415Z","_id":"cjepblho00000t3xmx08lmc2c","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Promise-学习笔记\"><a href=\"#Promise-学习笔记\" class=\"headerlink\" title=\"Promise  学习笔记\"></a>Promise  学习笔记</h3><h3 id=\"释义\"><a href=\"#释义\" class=\"headerlink\" title=\"释义:\"></a><strong>释义:</strong></h3><p>1.用于异步计算</p>\n<p>2.一个promise 表示一个现在，将来或用不可能使用的值 ( 可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果。)</p>\n<p>3.可以在对象之间传递和操作promise ，帮助我们处理队列</p>\n<a id=\"more\"></a>\n<h3 id=\"异步回调的四个问题\"><a href=\"#异步回调的四个问题\" class=\"headerlink\" title=\"异步回调的四个问题:\"></a><strong>异步回调的四个问题:</strong></h3><ol>\n<li>嵌套层次很深，容易陷入回调地域 ，很难维护  </li>\n<li>无法正常使用 return  和  throw</li>\n<li>无法正常检索堆栈信息，因为每一次回调都是系统层面上的新的堆栈 。</li>\n<li>在多个回调之间难以建立联系。</li>\n</ol>\n<h3 id=\"Promise-结构\"><a href=\"#Promise-结构\" class=\"headerlink\" title=\"Promise 结构:\"></a><strong>Promise 结构:</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(</div><div class=\"line\">\t<span class=\"comment\">//执行器 executor</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve,reject</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//一段耗时很长的异步操作</span></div><div class=\"line\">\t\tresolve() ; <span class=\"comment\">//数据处理完成</span></div><div class=\"line\">\t\treject() ; <span class=\"comment\">//数据处理出错</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//成功 下一步</span></div><div class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 失败，做相应的处理</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h6 id=\"1-Promise-是一个代理对象，它和原先要进行的操作并无关系。只是将原来操作放入了executor\"><a href=\"#1-Promise-是一个代理对象，它和原先要进行的操作并无关系。只是将原来操作放入了executor\" class=\"headerlink\" title=\"1.Promise 是一个代理对象，它和原先要进行的操作并无关系。只是将原来操作放入了executor\"></a>1.Promise 是一个代理对象，它和原先要进行的操作并无关系。只是将原来操作放入了<code>executor</code></h6><h6 id=\"2-它通过引入一个回调，避免更多的回调\"><a href=\"#2-它通过引入一个回调，避免更多的回调\" class=\"headerlink\" title=\"2.它通过引入一个回调，避免更多的回调\"></a>2.它通过引入一个回调，避免更多的回调</h6><h3 id=\"Promise三个状态\"><a href=\"#Promise三个状态\" class=\"headerlink\" title=\"Promise三个状态 \"></a><strong>Promise三个状态 </strong></h3><ol>\n<li><code>pending</code> 待定状态</li>\n<li>如果调用 <code>resolve()</code> 就进入  <code>fulfilled</code> 实现 操作成功状态</li>\n<li>如果 <code>reject()</code> 就进入 <code>rejected</code> 被否决状态 操作失败</li>\n</ol>\n<p>当 promise 状态发生改变的时候，就会立即触发<code>.then()</code>离得响应函数，处理后续步骤</p>\n<p>Promise 状态一经改变就不会改变</p>\n<p>执行流程图  </p>\n<p><img src=\"./1520911191668.png\" alt=\"执行流程图\"></p>\n<h3 id=\"then-函数\"><a href=\"#then-函数\" class=\"headerlink\" title=\".then()函数\"></a><strong>.then()函数</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 假如在.then()的函数里面不返回新的Promise，会怎样？</span></div><div class=\"line\"><span class=\"comment\">// https://www.imooc.com/video/16616</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'here we go'</span>);</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">    setTimeout( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        resolve(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">    .then( <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'everyone'</span>);</div><div class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Mr.Laurence'</span>);</div><div class=\"line\">                    resolve(<span class=\"string\">'Merry Xmas'</span>);</div><div class=\"line\">                &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;());</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then( <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(value + <span class=\"string\">' world'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">结果：</div><div class=\"line\">here we go</div><div class=\"line\">hello</div><div class=\"line\">everyone</div><div class=\"line\"><span class=\"literal\">false</span> world</div><div class=\"line\">Mr.Laurence</div></pre></td></tr></table></figure>\n<p><code>.then()</code>  接受两个函数作为参数，分别代表 <code>fulfilled</code> 和 ‘rejected’</p>\n<p><code>.then()</code> 返回一个新的Promise 实例，所以它可以链式调用</p>\n<p>当前面的    <code>Promise</code> 状态改变时，<code>.then()</code> 根据其最终状态，选择特定的状态响应函数执行 。</p>\n<p>状态响应函数可以反悔新的<code>Promise</code> ，或其它值</p>\n<p>如果返回新的 <code>Promise</code> ，那么下一级 <code>.then()</code> 会在新 Promise 状态改变之后执行</p>\n<p>如果返回其它任何值，则会立即执行下一级 <code>.then()</code>   </p>\n<h4 id=\"then-里面有-then-的情况\"><a href=\"#then-里面有-then-的情况\" class=\"headerlink\" title=\".then() 里面有 .then() 的情况\"></a>.then() 里面有 .then() 的情况</h4><ol>\n<li><p>因为 <code>.then()</code> 返回的还是Promise 实例</p>\n</li>\n<li><p>外层的 <code>.then</code> 会等到 里面的<code>.then()</code>执行完成 再执行</p>\n</li>\n<li><p>对于我们来书，此时最好将其展开，会更好读</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 嵌套.then()</span></div><div class=\"line\"><span class=\"comment\">// https://www.imooc.com/video/16618</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Step 1'</span>);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        resolve(<span class=\"number\">100</span>);</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">    .then( <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Step 1-1'</span>);</div><div class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                resolve(<span class=\"number\">110</span>);</div><div class=\"line\">            &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">        &#125;)</div><div class=\"line\">            .then( <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Step 1-2'</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> value;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .then( <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Step 1-3'</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> value;</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Step 2'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">结果：</div><div class=\"line\">start</div><div class=\"line\">step <span class=\"number\">1</span></div><div class=\"line\">step <span class=\"number\">1</span><span class=\"number\">-1</span></div><div class=\"line\">step <span class=\"number\">1</span><span class=\"number\">-2</span></div><div class=\"line\">step <span class=\"number\">1</span><span class=\"number\">-3</span></div><div class=\"line\"><span class=\"number\">110</span></div><div class=\"line\">step <span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<h3 id=\"思考：\"><a href=\"#思考：\" class=\"headerlink\" title=\"思考：\"></a><strong>思考：</strong></h3><p>以下问题出自：<br><a href=\"https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html\" target=\"_blank\" rel=\"noopener\">原文：We have a problem with promises</a><br><a href=\"http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/\" target=\"_blank\" rel=\"noopener\">FEX 中文翻译</a><br><a href=\"https://www.imooc.com/video/16619/0\" target=\"_blank\" rel=\"noopener\">慕课网视频讲解</a></p>\n<h5 id=\"以下四种Promise-的区别是什么呢？\"><a href=\"#以下四种Promise-的区别是什么呢？\" class=\"headerlink\" title=\"以下四种Promise 的区别是什么呢？\"></a>以下四种Promise 的区别是什么呢？</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">doSomething().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> doSomethingElse();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">doSomething().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  doSomethingElse();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">doSomething().then(doSomethingElse());</div><div class=\"line\"></div><div class=\"line\">doSomething().then(doSomethingElse);</div></pre></td></tr></table></figure>\n<h5 id=\"答案-：\"><a href=\"#答案-：\" class=\"headerlink\" title=\"答案 ：\"></a>答案 ：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一题：</div><div class=\"line\">doSomething().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> doSomethingElse();</div><div class=\"line\">&#125;).then(finalHandler);</div><div class=\"line\"></div><div class=\"line\">doSomething</div><div class=\"line\">|-----------------|</div><div class=\"line\">                  doSomethingElse(<span class=\"literal\">undefined</span>)</div><div class=\"line\">                  |------------------|</div><div class=\"line\">                                     finalHandler(resultOfDoSomethingElse)</div><div class=\"line\">                                     |------------------|</div><div class=\"line\">第二题：</div><div class=\"line\">doSomething().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  doSomethingElse();</div><div class=\"line\">&#125;).then(finalHandler);</div><div class=\"line\"></div><div class=\"line\">doSomething</div><div class=\"line\">|-----------------|</div><div class=\"line\">                  doSomethingElse(<span class=\"literal\">undefined</span>)</div><div class=\"line\">                  |------------------|</div><div class=\"line\">                  finalHandler(<span class=\"literal\">undefined</span>)</div><div class=\"line\">                  |------------------|</div><div class=\"line\"></div><div class=\"line\">第三题：</div><div class=\"line\"></div><div class=\"line\">doSomething().then(doSomethingElse())</div><div class=\"line\">  .then(finalHandler);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">doSomething</div><div class=\"line\">|-----------------|</div><div class=\"line\">doSomethingElse(<span class=\"literal\">undefined</span>)</div><div class=\"line\">|---------------------------------|</div><div class=\"line\">                  finalHandler(resultOfDoSomething)</div><div class=\"line\">                  |------------------|</div><div class=\"line\"></div><div class=\"line\">第四题：</div><div class=\"line\">doSomething().then(doSomethingElse)</div><div class=\"line\">  .then(finalHandler);</div><div class=\"line\"></div><div class=\"line\">doSomething</div><div class=\"line\">|-----------------|</div><div class=\"line\">                  doSomethingElse(resultOfDoSomething)</div><div class=\"line\">                  |------------------|</div><div class=\"line\">                                     finalHandler(resultOfDoSomethingElse)</div><div class=\"line\">                                     |------------------|</div></pre></td></tr></table></figure>\n<h4 id=\"版权说明：以上均为-慕课网课程：Promise-入门-学习笔记-如有侵权联系我删除\"><a href=\"#版权说明：以上均为-慕课网课程：Promise-入门-学习笔记-如有侵权联系我删除\" class=\"headerlink\" title=\"版权说明：以上均为 慕课网课程：Promise 入门 学习笔记,如有侵权联系我删除\"></a>版权说明：以上均为 <a href=\"https://www.imooc.com/learn/949\" target=\"_blank\" rel=\"noopener\">慕课网课程：Promise 入门</a> 学习笔记,如有侵权<a href=\"18735443767\">联系我</a>删除</h4>","site":{"data":{}},"excerpt":"<h3 id=\"Promise-学习笔记\"><a href=\"#Promise-学习笔记\" class=\"headerlink\" title=\"Promise  学习笔记\"></a>Promise  学习笔记</h3><h3 id=\"释义\"><a href=\"#释义\" class=\"headerlink\" title=\"释义:\"></a><strong>释义:</strong></h3><p>1.用于异步计算</p>\n<p>2.一个promise 表示一个现在，将来或用不可能使用的值 ( 可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果。)</p>\n<p>3.可以在对象之间传递和操作promise ，帮助我们处理队列</p>","more":"<h3 id=\"异步回调的四个问题\"><a href=\"#异步回调的四个问题\" class=\"headerlink\" title=\"异步回调的四个问题:\"></a><strong>异步回调的四个问题:</strong></h3><ol>\n<li>嵌套层次很深，容易陷入回调地域 ，很难维护  </li>\n<li>无法正常使用 return  和  throw</li>\n<li>无法正常检索堆栈信息，因为每一次回调都是系统层面上的新的堆栈 。</li>\n<li>在多个回调之间难以建立联系。</li>\n</ol>\n<h3 id=\"Promise-结构\"><a href=\"#Promise-结构\" class=\"headerlink\" title=\"Promise 结构:\"></a><strong>Promise 结构:</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(</div><div class=\"line\">\t<span class=\"comment\">//执行器 executor</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve,reject</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//一段耗时很长的异步操作</span></div><div class=\"line\">\t\tresolve() ; <span class=\"comment\">//数据处理完成</span></div><div class=\"line\">\t\treject() ; <span class=\"comment\">//数据处理出错</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//成功 下一步</span></div><div class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 失败，做相应的处理</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h6 id=\"1-Promise-是一个代理对象，它和原先要进行的操作并无关系。只是将原来操作放入了executor\"><a href=\"#1-Promise-是一个代理对象，它和原先要进行的操作并无关系。只是将原来操作放入了executor\" class=\"headerlink\" title=\"1.Promise 是一个代理对象，它和原先要进行的操作并无关系。只是将原来操作放入了executor\"></a>1.Promise 是一个代理对象，它和原先要进行的操作并无关系。只是将原来操作放入了<code>executor</code></h6><h6 id=\"2-它通过引入一个回调，避免更多的回调\"><a href=\"#2-它通过引入一个回调，避免更多的回调\" class=\"headerlink\" title=\"2.它通过引入一个回调，避免更多的回调\"></a>2.它通过引入一个回调，避免更多的回调</h6><h3 id=\"Promise三个状态\"><a href=\"#Promise三个状态\" class=\"headerlink\" title=\"Promise三个状态 \"></a><strong>Promise三个状态 </strong></h3><ol>\n<li><code>pending</code> 待定状态</li>\n<li>如果调用 <code>resolve()</code> 就进入  <code>fulfilled</code> 实现 操作成功状态</li>\n<li>如果 <code>reject()</code> 就进入 <code>rejected</code> 被否决状态 操作失败</li>\n</ol>\n<p>当 promise 状态发生改变的时候，就会立即触发<code>.then()</code>离得响应函数，处理后续步骤</p>\n<p>Promise 状态一经改变就不会改变</p>\n<p>执行流程图  </p>\n<p><img src=\"./1520911191668.png\" alt=\"执行流程图\"></p>\n<h3 id=\"then-函数\"><a href=\"#then-函数\" class=\"headerlink\" title=\".then()函数\"></a><strong>.then()函数</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 假如在.then()的函数里面不返回新的Promise，会怎样？</span></div><div class=\"line\"><span class=\"comment\">// https://www.imooc.com/video/16616</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'here we go'</span>);</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">    setTimeout( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        resolve(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">    .then( <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'everyone'</span>);</div><div class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Mr.Laurence'</span>);</div><div class=\"line\">                    resolve(<span class=\"string\">'Merry Xmas'</span>);</div><div class=\"line\">                &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;());</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then( <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(value + <span class=\"string\">' world'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">结果：</div><div class=\"line\">here we go</div><div class=\"line\">hello</div><div class=\"line\">everyone</div><div class=\"line\"><span class=\"literal\">false</span> world</div><div class=\"line\">Mr.Laurence</div></pre></td></tr></table></figure>\n<p><code>.then()</code>  接受两个函数作为参数，分别代表 <code>fulfilled</code> 和 ‘rejected’</p>\n<p><code>.then()</code> 返回一个新的Promise 实例，所以它可以链式调用</p>\n<p>当前面的    <code>Promise</code> 状态改变时，<code>.then()</code> 根据其最终状态，选择特定的状态响应函数执行 。</p>\n<p>状态响应函数可以反悔新的<code>Promise</code> ，或其它值</p>\n<p>如果返回新的 <code>Promise</code> ，那么下一级 <code>.then()</code> 会在新 Promise 状态改变之后执行</p>\n<p>如果返回其它任何值，则会立即执行下一级 <code>.then()</code>   </p>\n<h4 id=\"then-里面有-then-的情况\"><a href=\"#then-里面有-then-的情况\" class=\"headerlink\" title=\".then() 里面有 .then() 的情况\"></a>.then() 里面有 .then() 的情况</h4><ol>\n<li><p>因为 <code>.then()</code> 返回的还是Promise 实例</p>\n</li>\n<li><p>外层的 <code>.then</code> 会等到 里面的<code>.then()</code>执行完成 再执行</p>\n</li>\n<li><p>对于我们来书，此时最好将其展开，会更好读</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 嵌套.then()</span></div><div class=\"line\"><span class=\"comment\">// https://www.imooc.com/video/16618</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Step 1'</span>);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        resolve(<span class=\"number\">100</span>);</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">    .then( <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Step 1-1'</span>);</div><div class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                resolve(<span class=\"number\">110</span>);</div><div class=\"line\">            &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">        &#125;)</div><div class=\"line\">            .then( <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Step 1-2'</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> value;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .then( <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Step 1-3'</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> value;</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Step 2'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">结果：</div><div class=\"line\">start</div><div class=\"line\">step <span class=\"number\">1</span></div><div class=\"line\">step <span class=\"number\">1</span><span class=\"number\">-1</span></div><div class=\"line\">step <span class=\"number\">1</span><span class=\"number\">-2</span></div><div class=\"line\">step <span class=\"number\">1</span><span class=\"number\">-3</span></div><div class=\"line\"><span class=\"number\">110</span></div><div class=\"line\">step <span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<h3 id=\"思考：\"><a href=\"#思考：\" class=\"headerlink\" title=\"思考：\"></a><strong>思考：</strong></h3><p>以下问题出自：<br><a href=\"https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html\" target=\"_blank\" rel=\"noopener\">原文：We have a problem with promises</a><br><a href=\"http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/\" target=\"_blank\" rel=\"noopener\">FEX 中文翻译</a><br><a href=\"https://www.imooc.com/video/16619/0\" target=\"_blank\" rel=\"noopener\">慕课网视频讲解</a></p>\n<h5 id=\"以下四种Promise-的区别是什么呢？\"><a href=\"#以下四种Promise-的区别是什么呢？\" class=\"headerlink\" title=\"以下四种Promise 的区别是什么呢？\"></a>以下四种Promise 的区别是什么呢？</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">doSomething().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> doSomethingElse();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">doSomething().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  doSomethingElse();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">doSomething().then(doSomethingElse());</div><div class=\"line\"></div><div class=\"line\">doSomething().then(doSomethingElse);</div></pre></td></tr></table></figure>\n<h5 id=\"答案-：\"><a href=\"#答案-：\" class=\"headerlink\" title=\"答案 ：\"></a>答案 ：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一题：</div><div class=\"line\">doSomething().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> doSomethingElse();</div><div class=\"line\">&#125;).then(finalHandler);</div><div class=\"line\"></div><div class=\"line\">doSomething</div><div class=\"line\">|-----------------|</div><div class=\"line\">                  doSomethingElse(<span class=\"literal\">undefined</span>)</div><div class=\"line\">                  |------------------|</div><div class=\"line\">                                     finalHandler(resultOfDoSomethingElse)</div><div class=\"line\">                                     |------------------|</div><div class=\"line\">第二题：</div><div class=\"line\">doSomething().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  doSomethingElse();</div><div class=\"line\">&#125;).then(finalHandler);</div><div class=\"line\"></div><div class=\"line\">doSomething</div><div class=\"line\">|-----------------|</div><div class=\"line\">                  doSomethingElse(<span class=\"literal\">undefined</span>)</div><div class=\"line\">                  |------------------|</div><div class=\"line\">                  finalHandler(<span class=\"literal\">undefined</span>)</div><div class=\"line\">                  |------------------|</div><div class=\"line\"></div><div class=\"line\">第三题：</div><div class=\"line\"></div><div class=\"line\">doSomething().then(doSomethingElse())</div><div class=\"line\">  .then(finalHandler);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">doSomething</div><div class=\"line\">|-----------------|</div><div class=\"line\">doSomethingElse(<span class=\"literal\">undefined</span>)</div><div class=\"line\">|---------------------------------|</div><div class=\"line\">                  finalHandler(resultOfDoSomething)</div><div class=\"line\">                  |------------------|</div><div class=\"line\"></div><div class=\"line\">第四题：</div><div class=\"line\">doSomething().then(doSomethingElse)</div><div class=\"line\">  .then(finalHandler);</div><div class=\"line\"></div><div class=\"line\">doSomething</div><div class=\"line\">|-----------------|</div><div class=\"line\">                  doSomethingElse(resultOfDoSomething)</div><div class=\"line\">                  |------------------|</div><div class=\"line\">                                     finalHandler(resultOfDoSomethingElse)</div><div class=\"line\">                                     |------------------|</div></pre></td></tr></table></figure>\n<h4 id=\"版权说明：以上均为-慕课网课程：Promise-入门-学习笔记-如有侵权联系我删除\"><a href=\"#版权说明：以上均为-慕课网课程：Promise-入门-学习笔记-如有侵权联系我删除\" class=\"headerlink\" title=\"版权说明：以上均为 慕课网课程：Promise 入门 学习笔记,如有侵权联系我删除\"></a>版权说明：以上均为 <a href=\"https://www.imooc.com/learn/949\" target=\"_blank\" rel=\"noopener\">慕课网课程：Promise 入门</a> 学习笔记,如有侵权<a href=\"18735443767\">联系我</a>删除</h4>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjei6lc6o0000rexmgbmziwf4","category_id":"cjei6lc6v0004rexmd8c53snj","_id":"cjei6lc74000hrexmbz20qyo5"},{"post_id":"cjei6lc6s0002rexmtmque6fx","category_id":"cjei6lc70000brexmgosri0eq","_id":"cjei6lc76000mrexmdwtsl64e"},{"post_id":"cjei6lc74000krexmhvoeao41","category_id":"cjei6lc74000irexm2cmlyyaj","_id":"cjei6lc79000srexm0gmxin4o"},{"post_id":"cjei6lc6x0006rexmx5whry0j","category_id":"cjei6lc74000irexm2cmlyyaj","_id":"cjei6lc7a000xrexmtgsxyxjo"},{"post_id":"cjei6lc75000lrexmj3zcqhok","category_id":"cjei6lc74000irexm2cmlyyaj","_id":"cjei6lc7c0010rexmealkw889"},{"post_id":"cjei6lc77000prexmpjv22hyg","category_id":"cjei6lc74000irexm2cmlyyaj","_id":"cjei6lc7d0015rexmxqoysa2m"},{"post_id":"cjei6lc6y0008rexmlrubazto","category_id":"cjei6lc74000irexm2cmlyyaj","_id":"cjei6lc7e0018rexm1p0juiqc"},{"post_id":"cjei6lc70000arexmvbonom8x","category_id":"cjei6lc74000irexm2cmlyyaj","_id":"cjei6lc7g001crexm0bs1emrr"},{"post_id":"cjei6lc71000frexm8adzmj17","category_id":"cjei6lc74000irexm2cmlyyaj","_id":"cjei6lc7h001frexm8bmgdddr"},{"post_id":"cjei6lc7f001brexmthlc46hs","category_id":"cjei6lc7f0019rexmp4fl64gr","_id":"cjei6lc7j001lrexmc6ahdmql"},{"post_id":"cjei6lc73000grexmye4mztxj","category_id":"cjei6lc7f0019rexmp4fl64gr","_id":"cjei6lc7k001orexmxej7jraw"},{"post_id":"cjei6lc7g001erexm8qjr4yu4","category_id":"cjei6lc74000irexm2cmlyyaj","_id":"cjei6lc7l001rrexmpasbxkty"},{"post_id":"cjei6lc7h001irexmlyhc9a5p","category_id":"cjei6lc7f0019rexmp4fl64gr","_id":"cjei6lc7l001trexmk9d403k6"},{"post_id":"cjei6lc78000rrexm8fuwnz75","category_id":"cjei6lc7f0019rexmp4fl64gr","_id":"cjei6lc7m001xrexmkbg2iwau"},{"post_id":"cjei6lc7j001krexmyrtvfgqs","category_id":"cjei6lc7f0019rexmp4fl64gr","_id":"cjei6lc7m001yrexm7hw1ltg4"},{"post_id":"cjei6lc7a000wrexm7cae5aqx","category_id":"cjei6lc7k001nrexmnx7zoqbt","_id":"cjei6lc7n0022rexmxel6ipk2"},{"post_id":"cjei6lc7b000zrexm8um35xac","category_id":"cjei6lc7l001urexmii4otye5","_id":"cjei6lc7n0024rexmo2eb2o6s"},{"post_id":"cjei6lc7d0014rexmyt4r4u16","category_id":"cjei6lc7m0020rexmidz4awmo","_id":"cjei6lc7p0028rexma66a5803"},{"post_id":"cjei6lc7e0017rexm38bv5kxr","category_id":"cjei6lc7n0025rexm1owwno5r","_id":"cjei6lc7p002brexmy8bqrz47"},{"post_id":"cjepblho00000t3xmx08lmc2c","category_id":"cjei6lc74000irexm2cmlyyaj","_id":"cjepbp0ex0002t3xmcpz3u31x"}],"PostTag":[{"post_id":"cjei6lc6o0000rexmgbmziwf4","tag_id":"cjei6lc6w0005rexm9np0ezj8","_id":"cjei6lc71000erexmqsgk3xt3"},{"post_id":"cjei6lc6s0002rexmtmque6fx","tag_id":"cjei6lc70000crexmjles1d2z","_id":"cjei6lc78000qrexm7riwkm3a"},{"post_id":"cjei6lc6s0002rexmtmque6fx","tag_id":"cjei6lc74000jrexmy12xjeoy","_id":"cjei6lc79000trexmz79x5ds9"},{"post_id":"cjei6lc77000prexmpjv22hyg","tag_id":"cjei6lc76000orexm777uzham","_id":"cjei6lc7b000yrexmfi4l9v8r"},{"post_id":"cjei6lc6x0006rexmx5whry0j","tag_id":"cjei6lc76000orexm777uzham","_id":"cjei6lc7c0011rexmu71adygs"},{"post_id":"cjei6lc6y0008rexmlrubazto","tag_id":"cjei6lc76000orexm777uzham","_id":"cjei6lc7e0016rexm92ndt2kt"},{"post_id":"cjei6lc70000arexmvbonom8x","tag_id":"cjei6lc76000orexm777uzham","_id":"cjei6lc7g001drexmn27t5iwt"},{"post_id":"cjei6lc71000frexm8adzmj17","tag_id":"cjei6lc76000orexm777uzham","_id":"cjei6lc7i001jrexmcllbgqdd"},{"post_id":"cjei6lc7g001erexm8qjr4yu4","tag_id":"cjei6lc76000orexm777uzham","_id":"cjei6lc7k001mrexm6tfdr79u"},{"post_id":"cjei6lc7j001krexmyrtvfgqs","tag_id":"cjei6lc7h001hrexm0mh1wqsi","_id":"cjei6lc7k001qrexmqph3ydi3"},{"post_id":"cjei6lc73000grexmye4mztxj","tag_id":"cjei6lc7h001hrexm0mh1wqsi","_id":"cjei6lc7l001srexmgn7b8lw9"},{"post_id":"cjei6lc74000krexmhvoeao41","tag_id":"cjei6lc76000orexm777uzham","_id":"cjei6lc7m001wrexm9m2mrhq0"},{"post_id":"cjei6lc75000lrexmj3zcqhok","tag_id":"cjei6lc76000orexm777uzham","_id":"cjei6lc7m0021rexmtzh0ozrc"},{"post_id":"cjei6lc78000rrexm8fuwnz75","tag_id":"cjei6lc7h001hrexm0mh1wqsi","_id":"cjei6lc7o0026rexm5yw9pz56"},{"post_id":"cjei6lc7a000wrexm7cae5aqx","tag_id":"cjei6lc7n0023rexm7k8fb1b1","_id":"cjei6lc7p0029rexm3b05meqj"},{"post_id":"cjei6lc7b000zrexm8um35xac","tag_id":"cjei6lc7p0027rexmx9jlybda","_id":"cjei6lc7q002crexmndmplemp"},{"post_id":"cjei6lc7d0014rexmyt4r4u16","tag_id":"cjei6lc7h001hrexm0mh1wqsi","_id":"cjei6lc7q002frexmpe42gw2x"},{"post_id":"cjei6lc7d0014rexmyt4r4u16","tag_id":"cjei6lc7q002drexm2ts8cxw0","_id":"cjei6lc7q002grexm5jj5byz2"},{"post_id":"cjei6lc7e0017rexm38bv5kxr","tag_id":"cjei6lc7q002erexmm27x1foc","_id":"cjei6lc7r002irexmc3s5bkdk"},{"post_id":"cjei6lc7f001brexmthlc46hs","tag_id":"cjei6lc7h001hrexm0mh1wqsi","_id":"cjei6lc7r002krexma0u1fda1"},{"post_id":"cjei6lc7h001irexmlyhc9a5p","tag_id":"cjei6lc7h001hrexm0mh1wqsi","_id":"cjei6lc7s002lrexmjkg7pysq"},{"post_id":"cjepblho00000t3xmx08lmc2c","tag_id":"cjei6lc76000orexm777uzham","_id":"cjepbp0ex0001t3xmdr09cs4k"}],"Tag":[{"name":"开发工具","_id":"cjei6lc6w0005rexm9np0ezj8"},{"name":"小程序","_id":"cjei6lc70000crexmjles1d2z"},{"name":"css3","_id":"cjei6lc74000jrexmy12xjeoy"},{"name":"es6","_id":"cjei6lc76000orexm777uzham"},{"name":"js","_id":"cjei6lc7h001hrexm0mh1wqsi"},{"name":"angular","_id":"cjei6lc7n0023rexm7k8fb1b1"},{"name":"vuejs","_id":"cjei6lc7p0027rexmx9jlybda"},{"name":"web调试","_id":"cjei6lc7q002drexm2ts8cxw0"},{"name":"css","_id":"cjei6lc7q002erexmm27x1foc"}]}}